@prank_modifiers_default_duration_years_value = 15
@coronation_banquet_0052_dolt_pay_out_value = root.massive_gold_value
@coronation_banquet_0061_high_skill_value = extremely_high_skill_rating
@coronation_banquet_0061_old_value = 80
@coronation_banquet_0061_very_old = 90

namespace = coronation_banquet

##################################################
# #Banquet Regular Events
# 0001 - 0010	Quite the Spectacle - Connect with various types of characters over the entertainment.
# 0011 - 0020	Food Fit for a... - Connect with various types of characters over the food.
# 0021 - 0030	Shimmering, Shining - Connect with various types of characters over the venue & its decorations.
# 0031 - 0040	A Sociable Supper - Meet one of your neighbouring rulers and form a fast friendship.
# 0041 - 0050	Speech! Speech! - Make a speech to the happy couple, adjusting the meaning to your intent.
# 0051 - 0060	And Another Thing - Someone is pitching questionable ideas at you, and you can go along with them or not, but they keep coming at you.
# 0061 - 0070	To My Beloved GetRelation - Embarrassing older relation speech.
# 0071 - 0080	Oath in Moment - Your liege offers you a favour for your support.
#
# #Murder
# 0101 - 0110	Clear your Head - Ambush your target when they go out for a walk.
#
# #Seduce
# 0201 - 0210	Dinner and a Show - Position yourself opposite your intent_target, eat seductively.
#
# #Befriend
# 0401 - 0410	Stomach Rumbling - Bond with your intent_target over the terrible/excellent food.
#
# #Mischief
# 0601 - 0610	A Mere Jest - Stuff a gross item (e.g., dead rat) in a refined foodstuff (e.g., jug of wine).
#
# #Relax
# 0801 - 0810	A Pleasing Atmosphere - Sit back and enjoy the vibes.
#
#coronation_banquet.1001 - A guest is impressed with your high learning!
#coronation_banquet.1002 - You get grumpy because the food is late
#coronation_banquet.1003 - A Guest is sarcastically impressed with your high Learning
#coronation_banquet.1004 - Enjoy Magnificent Food!
#coronation_banquet.1005 - You're having a hard time socializing
#coronation_banquet.1006 - Reveler is in their element
#coronation_banquet.1007 - Two Gluttons admire each other
#coronation_banquet.1008 - You reveal a secret about yourself
#coronation_banquet.1009 - You reveal a secret about someone else
#coronation_banquet.1010 - Promise someone a favor
#coronation_banquet.1011 - You get drunk and kill someone
#coronation_banquet.1012 - Sneaky murder of character you dislike
#coronation_banquet.1013 - Murder someone for attacking friend/lover/sibling
#coronation_banquet.1014 - Murder someone, one witness!
#coronation_banquet.1015 - Seat important people beside each other
#coronation_banquet.1016 - Steal a trinket!
#coronation_banquet.1020 - Dislike the host, deface a displayed Court Artifact
#coronation_banquet.1040 - You make a new friend
#coronation_banquet.1050 - Someone catches fire from the torches
#coronation_banquet.1070 - Showing off exotic animals can go very well or very wrong
#coronation_banquet.1310 - A Friend Is Monopolizing Your Attention
#coronation_banquet.1320 - A rival seeks forgiveness
#coronation_banquet.6501 - Someone says something with a lewd double-meaning
#
#coronation_banquet.2000-2001 - Diplomatic Intent: You find information about your target by talking to a friend of theirs
#coronation_banquet.2005 - Someone throws up on you
#coronation_banquet.2006 - Someone has a befriend/seduce scheme against you
#coronation_banquet.2007 - Two lovers are exposed
#coronation_banquet.2008 - Lustful secret homosexual discovered with a servant
#coronation_banquet.2009 - Learn a secret about someone else
#coronation_banquet.2010-2011 - Host: Paint an animal white and pretend it's a legendary guest
#coronation_banquet.2012 - Someone is murdered, you're a witness!
#coronation_banquet.2030 - A vassal decides to ask the Host to legitimize a bastard during the banquet - By BWWalker01
#coronation_banquet.6111 - A guest rambles on and on
#coronation_banquet.6101 - Guest is having a hard time socializing
#coronation_banquet.6251 - You trip - where will you spill your wine?
#
#coronation_banquet.3001 - Have a good time with a friend
#coronation_banquet.3002 - A chance to exchange "kisses" with a Lover
#coronation_banquet.3003 - Altercation with a Rival
#coronation_banquet.3004 - Insult your rival
#coronation_banquet.3005 - Rival duel!
#coronation_banquet.3006 - Soiree with another attendee
#coronation_banquet.3007 - Caught committing adultery with a Lover
#
#coronation_banquet.5001 - Host's high Dread causes you Stress
#coronation_banquet.5002 - Host is lunatic
#coronation_banquet.5003 - Host is sadistic
#coronation_banquet.5004 - Host is a reveler
#coronation_banquet.5020 - Promote rule
#
#coronation_banquet.6001 - Spouse has done a great job
#coronation_banquet.6002 - Guest complements your feast
#coronation_banquet.6003 - Guests getting into a fight
#coronation_banquet.6121 - Serve a guest food you know they hate
#coronation_banquet.6231 - There's no more wine!
#coronation_banquet.6261 - Serve the guests something new (cannibal)
#coronation_banquet.6301 - A guest has damaged one of your Court Artifacts on display
#coronation_banquet.6351 - Two guests get into a fight, causing damage to one of your displayed Court Artifacts!
#
#coronation_banquet.8001 - For host - I killed everyone
#coronation_banquet.8002 - For host - I killed only my target
#coronation_banquet.8003 - For host - My target died in an "accident"
#coronation_banquet.8052 - For guest - I died
#coronation_banquet.8061 - For guest - Someone close to me tried to kill people?!
#
#coronation_banquet.9000 - End events setup
#coronation_banquet.9001 - Host end event
#coronation_banquet.9002 - Guest end event
##################################################

##################################################
# MISC SCRIPTED TRIGGERS & EFFECTS

# Filter out characters who aren't appropriate to be giving their unasked opinions on the activity's setup options.
scripted_trigger coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = {
	# Filter out players immediately.
	is_ai = yes
	# Now let's make sure it's no one who wouldn't be having this conversation or who we might want to reserve for something else.
	NOR = {
		this = root
		this = scope:activity.special_guest:coronation_target
		#this = scope:activity.special_guest:coronation_officiant
		this ?= root.intent_target
		has_any_bad_relationship_with_character_trigger = { CHARACTER = root }
	}
	# So they don't make 100+ friends
	any_relation = {
		type = friend
		count < 4
	}
}

# Standard stress loss for hosts agreeing with criticisms.
scripted_effect coronation_banquet_0000_host_takes_criticism_stress_gain_effect = {
	# Host reacts a bit differently to feedback.
	if = {
		limit = { this = scope:activity.special_guest:coronation_target }
		stress_impact = {
			gregarious = miniscule_stress_impact_loss
			humble = minor_stress_impact_loss
			arrogant = miniscule_stress_impact_gain
		}
	}
	else = {
		stress_impact = { gregarious = miniscule_stress_impact_loss }
	}
}

scripted_effect coronation_banquet_0000_opinion_swap_effect = {
	# Progress heavily towards friendship.
	progress_towards_friend_effect = {
		CHARACTER = $FAVOURED_CHAR$
		REASON = friend_dinner
		OPINION = 35
	}
	reverse_add_opinion = {
		target = $REJECTED_CHAR$
		modifier = respect_opinion
		opinion = -15
	}
}

scripted_effect coronation_banquet_0000_host_approves_effect = {
	# If you're the host, gain some prestige for ignoring them.
	if = {
		limit = { this = scope:activity.special_guest:coronation_target }
		add_prestige = minor_prestige_gain
	}
	# Otherwise, gain some opinion with the host.
	else = {
		reverse_add_opinion = {
			target = scope:activity.special_guest:coronation_target
			modifier = friendliness_opinion
			opinion = 15
		}
	}
}

scripted_effect coronation_banquet_0000_award_lifestyle_xp_per_conversationalist_effect = {
	$TARGET$ = {
		# Diplomacy.
		if = {
			limit = { has_trait = education_diplomacy }
			# T1.
			if = {
				limit = { has_trait = education_diplomacy_1 }
				root = { add_diplomacy_lifestyle_xp = minor_lifestyle_xp }
			}
			# T2.
			else_if = {
				limit = { has_trait = education_diplomacy_2 }
				root = { add_diplomacy_lifestyle_xp = medium_lifestyle_xp }
			}
			# T3.
			else_if = {
				limit = { has_trait = education_diplomacy_3 }
				root = { add_diplomacy_lifestyle_xp = major_lifestyle_xp }
			}
			# T4.
			else_if = {
				limit = {
					OR = {
						has_trait = education_diplomacy_4
						has_trait = education_diplomacy_5
					}
				}
				root = { add_diplomacy_lifestyle_xp = massive_lifestyle_xp }
			}
		}
		# Martial.
		if = {
			limit = { has_trait = education_martial }
			# T1.
			if = {
				limit = { has_trait = education_martial_1 }
				root = { add_martial_lifestyle_xp = minor_lifestyle_xp }
			}
			# T2.
			else_if = {
				limit = { has_trait = education_martial_2 }
				root = { add_martial_lifestyle_xp = medium_lifestyle_xp }
			}
			# T3.
			else_if = {
				limit = { has_trait = education_martial_3 }
				root = { add_martial_lifestyle_xp = major_lifestyle_xp }
			}
			# T4.
			else_if = {
				limit = {
					OR = {
						has_trait = education_martial_4
						has_trait = education_martial_5
					}
				}
				root = { add_martial_lifestyle_xp = massive_lifestyle_xp }
			}
		}
		# Stewardship.
		if = {
			limit = { has_trait = education_stewardship }
			# T1.
			if = {
				limit = { has_trait = education_stewardship_1 }
				root = { add_stewardship_lifestyle_xp = minor_lifestyle_xp }
			}
			# T2.
			else_if = {
				limit = { has_trait = education_stewardship_2 }
				root = { add_stewardship_lifestyle_xp = medium_lifestyle_xp }
			}
			# T3.
			else_if = {
				limit = { has_trait = education_stewardship_3 }
				root = { add_stewardship_lifestyle_xp = major_lifestyle_xp }
			}
			# T4.
			else_if = {
				limit = {
					OR = {
						has_trait = education_stewardship_4
						has_trait = education_stewardship_5
					}
				}
				root = { add_stewardship_lifestyle_xp = massive_lifestyle_xp }
			}
		}
		# Intrigue.
		if = {
			limit = { has_trait = education_intrigue }
			# T1.
			if = {
				limit = { has_trait = education_intrigue_1 }
				root = { add_intrigue_lifestyle_xp = minor_lifestyle_xp }
			}
			# T2.
			else_if = {
				limit = { has_trait = education_intrigue_2 }
				root = { add_intrigue_lifestyle_xp = medium_lifestyle_xp }
			}
			# T3.
			else_if = {
				limit = { has_trait = education_intrigue_3 }
				root = { add_intrigue_lifestyle_xp = major_lifestyle_xp }
			}
			# T4.
			else_if = {
				limit = {
					OR = {
						has_trait = education_intrigue_4
						has_trait = education_intrigue_5
					}
				}
				root = { add_intrigue_lifestyle_xp = massive_lifestyle_xp }
			}
		}
		# Learning.
		if = {
			limit = { has_trait = education_learning }
			# T1.
			if = {
				limit = { has_trait = education_learning_1 }
				root = { add_learning_lifestyle_xp = minor_lifestyle_xp }
			}
			# T2.
			else_if = {
				limit = { has_trait = education_learning_2 }
				root = { add_learning_lifestyle_xp = medium_lifestyle_xp }
			}
			# T3.
			else_if = {
				limit = { has_trait = education_learning_3 }
				root = { add_learning_lifestyle_xp = major_lifestyle_xp }
			}
			# T4.
			else_if = {
				limit = {
					OR = {
						has_trait = education_learning_4
						has_trait = education_learning_5
					}
				}
				root = { add_learning_lifestyle_xp = massive_lifestyle_xp }
			}
		}
	}
}











##################################################
# BANQUET PHASE

##################################################
# Quite the Spectacle
# by Ewan Cowhig Croft
# 0001 - 0010
##################################################

# Character likes T1 entertainment.
scripted_trigger coronation_banquet_0001_entertainment_t1_likes_trigger = {
	OR = {
		# Thinks too much entertainment is frivolous.
		has_trait = diligent
		# Prefers 1-on-1 conversations to showy jugglers.
		## N-not that I'm sad because I can't juggle.
		### My hands are just stupid.
		has_trait = shy
		# Prefers lagom entertainment.
		has_trait = humble
		has_trait = content
		# Doesn't respect any entertaining profession.
		has_trait = honest
		## Just characters are kill-joys. Change my mind.
		has_trait = just
		# Likes safe entertainment that doesn't give them the jitters.
		has_trait = craven
		# Doesn't trust large bands of strangers.
		has_trait = paranoid
	}
}
# Character hates T1 entertainment.
scripted_trigger coronation_banquet_0001_entertainment_t1_hates_trigger = {
	OR = {
		# Likes a good joke/acrobat/actor.
		has_trait = lazy
		has_trait = gregarious
		# Prefers big, upscale-everything.
		has_trait = arrogant
		has_trait = ambitious
		# Appreciates the entertainer's art.
		has_trait = deceitful
		has_trait = arbitrary
		# Wants bombastic, dangerous entertainment.
		has_trait = brave
		# Loves large bands of dangerous strangers.
		has_trait = trusting
	}
}
# Character likes T2 entertainment.
scripted_trigger coronation_banquet_0001_entertainment_t2_likes_trigger = {
	OR = {
		# Accepting of the average.
		has_trait = content
		has_trait = compassionate
		# Likes that money was spent.
		has_trait = generous
		# Likes the atmosphere being high-effort but not _too_ bustling.
		has_trait = calm
		has_trait = patient
		# Likes a middling option.
		has_trait = fickle
		has_trait = cynical
	}
}
# Character hates T2 entertainment.
scripted_trigger coronation_banquet_0001_entertainment_t2_hates_trigger = {
	OR = {
		# Hates the average.
		has_trait = ambitious
		has_trait = arrogant
		# Would have preferred all the money, to take advantage, or else none, not to waste any.
		has_trait = greedy
		# Want a more bustling atmosphere that goes further than this.
		has_trait = wrathful
		has_trait = impatient
		# Feels that if it was worth doing, it's worth doing to its best.
		has_trait = stubborn
		has_trait = zealous
	}
}
# Character likes T3 entertainment.
scripted_trigger coronation_banquet_0001_entertainment_t3_likes_trigger = {
	OR = {
		# Loves excellent entertainment.
		has_trait = lazy
		has_trait = gregarious
		# Prefers big, upscale-everything.
		has_trait = arrogant
		has_trait = ambitious
		# Appreciates the entertainer's art.
		has_trait = deceitful
		has_trait = arbitrary
		# Wants bombastic, dangerous entertainment.
		has_trait = brave
		# Loves large bands of dangerous strangers.
		has_trait = trusting
	}
}
# Character hates T3 entertainment.
scripted_trigger coronation_banquet_0001_entertainment_t3_hates_trigger = {
	OR = {
		# So much entertainment is frivolous.
		has_trait = diligent
		# This is way, way too loud.
		has_trait = shy
		# Wants entertainment to be more lagom.
		has_trait = humble
		has_trait = content
		# Doesn't respect any entertaining profession.
		has_trait = honest
		## Just characters are kill-joys. Change my mind.
		has_trait = just
		# Likes safe entertainment that doesn't give them the jitters.
		has_trait = craven
		# Doesn't trust large bands of strangers.
		has_trait = paranoid
	}
}

#	Connect with various types of characters over the entertainment.
coronation_banquet.0001 = {
	type = activity_event
	title = coronation_banquet.0001.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = {
							category = wedding_option_entertainment
							option = wedding_entertainment_bad
						}
					}
				}
				desc = {
					desc = coronation_banquet.0001.desc.intro.bad
					desc = {
						random_valid = {
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = diligent }
								}
								desc = coronation_banquet.0001.desc.t1.love.diligent
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = shy }
								}
								desc = coronation_banquet.0001.desc.t1.love.shy
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = humble }
								}
								desc = coronation_banquet.0001.desc.t1.love.humble
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = content }
								}
								desc = coronation_banquet.0001.desc.t1.love.content
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = honest }
								}
								desc = coronation_banquet.0001.desc.t1.love.honest
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = just }
								}
								desc = coronation_banquet.0001.desc.t1.love.just
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = craven }
								}
								desc = coronation_banquet.0001.desc.t1.love.craven
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = paranoid }
								}
								desc = coronation_banquet.0001.desc.t1.love.paranoid
							}
						}
					}
				}
			}
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = {
							category = wedding_option_entertainment
							option = wedding_entertainment_normal
						}
					}
				}
				desc = {
					desc = coronation_banquet.0001.desc.intro.normal
					desc = {
						random_valid = {
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = content }
								}
								desc = coronation_banquet.0001.desc.t2.love.content
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = compassionate }
								}
								desc = coronation_banquet.0001.desc.t2.love.compassionate
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = generous }
								}
								desc = coronation_banquet.0001.desc.t2.love.generous
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = calm }
								}
								desc = coronation_banquet.0001.desc.t2.love.calm
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = patient }
								}
								desc = coronation_banquet.0001.desc.t2.love.patient
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = fickle }
								}
								desc = coronation_banquet.0001.desc.t2.love.fickle
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = cynical }
								}
								desc = coronation_banquet.0001.desc.t2.love.cynical
							}
						}
					}
				}
			}
			desc = {
				desc = coronation_banquet.0001.desc.intro.good
				random_valid = {
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = lazy }
						}
						desc = coronation_banquet.0001.desc.t3.love.lazy
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = gregarious }
						}
						desc = coronation_banquet.0001.desc.t3.love.gregarious
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = arrogant }
						}
						desc = coronation_banquet.0001.desc.t3.love.arrogant
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = ambitious }
						}
						desc = coronation_banquet.0001.desc.t3.love.ambitious
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = deceitful }
						}
						desc = coronation_banquet.0001.desc.t3.love.deceitful
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = arbitrary }
						}
						desc = coronation_banquet.0001.desc.t3.love.arbitrary
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = brave }
						}
						desc = coronation_banquet.0001.desc.t3.love.brave
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = trusting }
						}
						desc = coronation_banquet.0001.desc.t3.love.trusting
					}
				}
			}
		}
		desc = coronation_banquet.0001.desc.midtro
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = {
							category = wedding_option_entertainment
							option = wedding_entertainment_bad
						}
					}
				}
				desc = {
					random_valid = {
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = lazy }
							}
							desc = coronation_banquet.0001.desc.t1.hate.lazy
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = gregarious }
							}
							desc = coronation_banquet.0001.desc.t1.hate.gregarious
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = arrogant }
							}
							desc = coronation_banquet.0001.desc.t1.hate.arrogant
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = ambitious }
							}
							desc = coronation_banquet.0001.desc.t1.hate.ambitious
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = deceitful }
							}
							desc = coronation_banquet.0001.desc.t1.hate.deceitful
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = arbitrary }
							}
							desc = coronation_banquet.0001.desc.t1.hate.arbitrary
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = brave }
							}
							desc = coronation_banquet.0001.desc.t1.hate.brave
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = trusting }
							}
							desc = coronation_banquet.0001.desc.t1.hate.trusting
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = {
									NOR = {
										has_trait = lazy
										has_trait = gregarious
										has_trait = arrogant
										has_trait = ambitious
										has_trait = deceitful
										has_trait = arbitrary
										has_trait = brave
										has_trait = trusting
									}
								}
							}
							desc = coronation_banquet.0000.desc.hate.fallback
						}
					}
				}
			}
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = {
							category = wedding_option_entertainment
							option = wedding_entertainment_normal
						}
					}
				}
				desc = {
					random_valid = {
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = ambitious }
							}
							desc = coronation_banquet.0001.desc.t2.hate.ambitious
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = arrogant }
							}
							desc = coronation_banquet.0001.desc.t2.hate.arrogant
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = greedy }
							}
							desc = coronation_banquet.0001.desc.t2.hate.greedy
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = wrathful }
							}
							desc = coronation_banquet.0001.desc.t2.hate.wrathful
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = impatient }
							}
							desc = coronation_banquet.0001.desc.t2.hate.impatient
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = stubborn }
							}
							desc = coronation_banquet.0001.desc.t2.hate.stubborn
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = zealous }
							}
							desc = coronation_banquet.0001.desc.t2.hate.zealous
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = {
									NOR = {
										has_trait = ambitious
										has_trait = arrogant
										has_trait = greedy
										has_trait = wrathful
										has_trait = impatient
										has_trait = stubborn
										has_trait = zealous
									}
								}
							}
							desc = coronation_banquet.0000.desc.hate.fallback
						}
					}
				}
			}
			desc = {
				random_valid = {
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = diligent }
						}
						desc = coronation_banquet.0001.desc.t3.hate.diligent
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = shy }
						}
						desc = coronation_banquet.0001.desc.t3.hate.shy
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = humble }
						}
						desc = coronation_banquet.0001.desc.t3.hate.humble
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = content }
						}
						desc = coronation_banquet.0001.desc.t3.hate.content
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = honest }
						}
						desc = coronation_banquet.0001.desc.t3.hate.honest
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = just }
						}
						desc = coronation_banquet.0001.desc.t3.hate.just
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = craven }
						}
						desc = coronation_banquet.0001.desc.t3.hate.craven
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = paranoid }
						}
						desc = coronation_banquet.0001.desc.t3.hate.paranoid
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = {
								NOR = {
									has_trait = diligent
									has_trait = shy
									has_trait = humble
									has_trait = content
									has_trait = honest
									has_trait = just
									has_trait = craven
									has_trait = paranoid
								}
							}
						}
						desc = coronation_banquet.0000.desc.hate.fallback
					}
				}
			}
		}
	}
	theme = feast_activity
	left_portrait = {
		character = scope:char_1
		animation = throne_room_applaud_1
	}
	center_portrait = {
		character = root
		animation = happiness
	}
	right_portrait = {
		character = scope:char_2
		animation = boredom
	}

	cooldown = { years = 1 }

	trigger = {
		scope:activity = {
			# T1.
			trigger_if = {
				limit = {
					has_activity_option = {
						category = wedding_option_entertainment
						option = wedding_entertainment_bad
					}
				}
				# Check for a character who likes the setup.
				any_attending_character = {
					coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
					coronation_banquet_0001_entertainment_t1_likes_trigger = yes
					# Now we need to wiggle a bit to make sure they don't overlap with one who _dislikes_ the setup.
					save_temporary_scope_as = char_temp
					scope:activity = {
						any_attending_character = {
							coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
							coronation_banquet_0001_entertainment_t1_hates_trigger = yes
							NOT = { this = scope:char_temp }
						}
					}
				}
			}
			# T2.
			trigger_else_if = {
				limit = {
					has_activity_option = {
						category = wedding_option_entertainment
						option = wedding_entertainment_normal
					}
				}
				# Check for a character who likes the setup.
				any_attending_character = {
					coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
					coronation_banquet_0001_entertainment_t2_likes_trigger = yes
					# Now we need to wiggle a bit to make sure they don't overlap with one who _dislikes_ the setup.
					save_temporary_scope_as = char_temp
					scope:activity = {
						any_attending_character = {
							coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
							coronation_banquet_0001_entertainment_t2_hates_trigger = yes
							NOT = { this = scope:char_temp }
						}
					}
				}
			}
			# T3.
			trigger_else = {
				# Check for a character who likes the setup.
				any_attending_character = {
					coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
					coronation_banquet_0001_entertainment_t3_likes_trigger = yes
					# Now we need to wiggle a bit to make sure they don't overlap with one who _dislikes_ the setup.
					save_temporary_scope_as = char_temp
					scope:activity = {
						any_attending_character = {
							coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
							coronation_banquet_0001_entertainment_t3_hates_trigger = yes
							NOT = { this = scope:char_temp }
						}
					}
				}
			}
		}
	}

	immediate = {
		# Try to grab our actors.
		scope:activity = {
			# T1.
			if = {
				limit = {
					has_activity_option = {
						category = wedding_option_entertainment
						option = wedding_entertainment_bad
					}
				}
				# Check for a character who likes the setup.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0001_entertainment_t1_likes_trigger = yes
						coronation_banquet_0001_entertainment_t1_hates_trigger = no
					}
					# Failing that, grab anyone valid.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0001_entertainment_t1_likes_trigger = yes
					}
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_1
				}
				# And for one who dislikes it.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0001_entertainment_t1_hates_trigger = yes
						coronation_banquet_0001_entertainment_t1_likes_trigger = no
					}
					# Failing that, grab anyone appropriate.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0001_entertainment_t1_hates_trigger = yes
					}
					# Failing _that_, grab anyone at all.
					alternative_limit = { coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes }
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_2
				}
			}
			# T2.
			else_if = {
				limit = {
					has_activity_option = {
						category = wedding_option_entertainment
						option = wedding_entertainment_normal
					}
				}
				# Check for a character who likes the setup.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0001_entertainment_t2_likes_trigger = yes
						coronation_banquet_0001_entertainment_t2_hates_trigger = no
					}
					# Failing that, grab anyone valid.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0001_entertainment_t2_likes_trigger = yes
					}
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_1
				}
				# And for one who dislikes it.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0001_entertainment_t2_hates_trigger = yes
						coronation_banquet_0001_entertainment_t2_likes_trigger = no
					}
					# Failing that, grab anyone appropriate.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0001_entertainment_t2_hates_trigger = yes
					}
					# Failing _that_, grab anyone at all.
					alternative_limit = { coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes }
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_2
				}
			}
			# T3.
			else = {
				# Check for a character who likes the setup.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0001_entertainment_t3_likes_trigger = yes
						coronation_banquet_0001_entertainment_t3_hates_trigger = no
					}
					# Failing that, grab anyone valid.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0001_entertainment_t3_likes_trigger = yes
					}
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_1
				}
				# And for one who dislikes it.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0001_entertainment_t3_hates_trigger = yes
						coronation_banquet_0001_entertainment_t3_likes_trigger = no
					}
					# Failing that, grab anyone appropriate.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0001_entertainment_t3_hates_trigger = yes
					}
					# Failing _that_, grab anyone at all.
					alternative_limit = { coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes }
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_2
				}
			}
		}
		# If relevant, grab our intent target.
		if = {
			limit = { has_activity_intent = murder_attendee_intent }
			intent_target = { save_scope_as = intent_target }
		}
	}

	# Agree with scope:char_1.
	option = {
		name = {
			trigger = {
				NOT = { this = scope:activity.special_guest:coronation_target }
			}
			text = coronation_banquet.0001.a
		}
		name = {
			trigger = { this = scope:activity.special_guest:coronation_target }
			text = coronation_banquet.0001.a.host
		}
		flavor = coronation_banquet.0000.flavour.hobnob.char_1

		# Apply opinion.
		coronation_banquet_0000_opinion_swap_effect = {
			FAVOURED_CHAR = scope:char_1
			REJECTED_CHAR = scope:char_2
		}
		# Give some lifestyle XP for who you hobnob with.
		coronation_banquet_0000_award_lifestyle_xp_per_conversationalist_effect = { TARGET = scope:char_1 }

		coronation_banquet_0000_host_takes_criticism_stress_gain_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = { ai_sociability = 1 }
			opinion_modifier = {
				opinion_target = scope:char_1
				multiplier = 0.5
			}
			opinion_modifier = {
				opinion_target = scope:char_2
				multiplier = -0.5
			}
		}
	}

	# Agree with scope:char_2.
	option = {
		name = {
			trigger = {
				NOT = { this = scope:activity.special_guest:coronation_target }
			}
			text = coronation_banquet.0001.b
		}
		name = {
			trigger = { this = scope:activity.special_guest:coronation_target }
			text = coronation_banquet.0001.b.host
		}
		flavor = coronation_banquet.0000.flavour.hobnob.char_2

		# Apply opinion.
		coronation_banquet_0000_opinion_swap_effect = {
			FAVOURED_CHAR = scope:char_2
			REJECTED_CHAR = scope:char_1
		}
		# Give some lifestyle XP for who you hobnob with.
		coronation_banquet_0000_award_lifestyle_xp_per_conversationalist_effect = { TARGET = scope:char_2 }

		coronation_banquet_0000_host_takes_criticism_stress_gain_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = { ai_sociability = 1 }
			opinion_modifier = {
				opinion_target = scope:char_2
				multiplier = 0.5
			}
			opinion_modifier = {
				opinion_target = scope:char_1
				multiplier = -0.5
			}
		}
	}

	# Murder: my eyes are on scope:intent_target.
	option = {
		name = coronation_banquet.0001.c
		flavor = coronation_banquet.0001.c.tt
		trigger = { has_activity_intent = murder_attendee_intent }
		custom_tooltip = available_because_intent_tt

		scope:intent_target = {
			# They're unsettled by your staring.
			add_stress = medium_stress_gain
			# Then we add a little concern.
			add_opinion = {
				target = root
				modifier = suspicion_opinion
				opinion = -10
			}
		}

		stress_impact = { vengeful = minor_stress_impact_loss }
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_vengefulness = 1
				ai_sociability = -0.5
			}
		}
	}

	# Focus on the acts.
	option = {
		name = coronation_banquet.0001.d

		# Opinion with the activty_host, or else prestige.
		coronation_banquet_0000_host_approves_effect = yes

		# We give base stress loss for this'un too.
		stress_impact = {
			base = minor_stress_impact_loss
			shy = minor_stress_impact_loss
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_energy = -0.5
				ai_sociability = -2
			}
		}
	}

	option = {
		name = coronation_banquet.0001.e
		trigger = {
			has_activity_intent = raise_dynasty_prestige_intent
			this = scope:activity.special_guest:coronation_target
			scope:activity = {
				OR = {
					has_activity_option = {
						category = wedding_option_entertainment
						option = wedding_entertainment_normal
					}
					has_activity_option = {
						category = wedding_option_entertainment
						option = wedding_entertainment_good
					}
				}
			}
		}
		custom_tooltip = available_because_intent_tt
		# We give base stress loss for this'un too.
		stress_impact = {
			base = minor_stress_impact_loss
			shy = minor_stress_impact_gain
			eccentric = minor_stress_impact_loss
		}
		dynasty = { add_dynasty_prestige = minor_dynasty_prestige_gain }
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_energy = -0.5
				ai_sociability = -2
			}
		}
	}
}

##################################################
# Food Fit for a...
# by Ewan Cowhig Croft
# 0011 - 0020
##################################################

# Character likes T1 food.
scripted_trigger coronation_banquet_0011_food_t1_likes_trigger = {
	OR = {
		# Has more sedate food preferences.
		has_trait = temperate
		# Is ok with an only moderately fancy meal.
		has_trait = humble
		has_trait = content
		# Appreciates something with a few fewer courses than usual
		has_trait = impatient
		# Less food, and less fancy food, means a harder time hiding poisons and other mischiefs.
		has_trait = paranoid
		# Prefers to eat mostly the same food, if possible.
		has_trait = stubborn
	}
}
# Character hates T1 food.
scripted_trigger coronation_banquet_0011_food_t1_hates_trigger = {
	OR = {
		# Likes plenty of exotic foods.
		has_trait = gluttonous
		# Prefers a large, fancy meal.
		has_trait = arrogant
		has_trait = ambitious
		# Has the patience for incredibly long meals.
		has_trait = patient
		# Doesn't see why they wouldn't have more variety.
		has_trait = trusting
		has_trait = fickle
	}
}
# Character likes T2 food.
scripted_trigger coronation_banquet_0011_food_t2_likes_trigger = {
	OR = {
		# Accepting of the average.
		has_trait = content
		has_trait = compassionate
		# Likes that money was spent.
		has_trait = generous
		# Likes the atmosphere being high-effort but not _too_ bustling.
		has_trait = calm
		has_trait = patient
		# Likes a middling option.
		has_trait = cynical
	}
}
# Character hates T2 food.
scripted_trigger coronation_banquet_0011_food_t2_hates_trigger = {
	OR = {
		# Hates the average.
		has_trait = ambitious
		has_trait = arrogant
		# Would have preferred all the money, to take advantage, or else none, not to waste any.
		has_trait = greedy
		# Want a more bustling atmosphere that goes further than this.
		has_trait = wrathful
		has_trait = impatient
		# Feels that if it was worth doing, it's worth doing to its best.
		has_trait = zealous
	}
}
# Character likes T3 food.
scripted_trigger coronation_banquet_0011_food_t3_likes_trigger = {
	OR = {
		# Likes plenty of exotic foods.
		has_trait = gluttonous
		# Prefers a large, fancy meal.
		has_trait = arrogant
		has_trait = ambitious
		# Has the patience for incredibly long meals.
		has_trait = patient
		# Loves the scope and variety of strange foodstuffs.
		has_trait = trusting
		# Really likes variety and being able to flit.
		has_trait = fickle
	}
}
# Character hates T3 food.
scripted_trigger coronation_banquet_0011_food_t3_hates_trigger = {
	OR = {
		# Has more sedate food preferences.
		has_trait = temperate
		# Doesn't like showing off this much.
		has_trait = humble
		has_trait = content
		# Can't stand the sheer number of courses.
		has_trait = impatient
		# Less food, and less fancy food, means a harder time hiding poisons and other mischiefs.
		has_trait = paranoid
		# Prefers to eat mostly the same food, if possible.
		has_trait = stubborn
	}
}

#	Connect with various types of characters over the food.
coronation_banquet.0011 = {
	type = activity_event
	title = coronation_banquet.0011.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = {
							category = wedding_option_food
							option = wedding_food_bad
						}
					}
				}
				desc = {
					desc = coronation_banquet.0011.desc.intro.bad
					desc = {
						random_valid = {
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = temperate }
								}
								desc = coronation_banquet.0011.desc.t1.love.temperate
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = humble }
								}
								desc = coronation_banquet.0011.desc.t1.love.humble
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = content }
								}
								desc = coronation_banquet.0011.desc.t1.love.content
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = impatient }
								}
								desc = coronation_banquet.0011.desc.t1.love.impatient
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = paranoid }
								}
								desc = coronation_banquet.0011.desc.t1.love.paranoid
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = stubborn }
								}
								desc = coronation_banquet.0011.desc.t1.love.stubborn
							}
						}
					}
				}
			}
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = {
							category = wedding_option_food
							option = wedding_food_normal
						}
					}
				}
				desc = {
					desc = coronation_banquet.0011.desc.intro.normal
					desc = {
						random_valid = {
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = content }
								}
								desc = coronation_banquet.0011.desc.t2.love.content
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = compassionate }
								}
								desc = coronation_banquet.0011.desc.t2.love.compassionate
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = generous }
								}
								desc = coronation_banquet.0011.desc.t2.love.generous
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = calm }
								}
								desc = coronation_banquet.0011.desc.t2.love.calm
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = patient }
								}
								desc = coronation_banquet.0011.desc.t2.love.patient
							}
							triggered_desc = {
								trigger = {
									scope:char_1 = { has_trait = cynical }
								}
								desc = coronation_banquet.0011.desc.t2.love.cynical
							}
						}
					}
				}
			}
			desc = {
				desc = coronation_banquet.0011.desc.intro.good
				random_valid = {
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = gluttonous }
						}
						desc = coronation_banquet.0011.desc.t3.love.gluttonous
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = arrogant }
						}
						desc = coronation_banquet.0011.desc.t3.love.arrogant
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = ambitious }
						}
						desc = coronation_banquet.0011.desc.t3.love.ambitious
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = patient }
						}
						desc = coronation_banquet.0011.desc.t3.love.patient
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = trusting }
						}
						desc = coronation_banquet.0011.desc.t3.love.trusting
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = fickle }
						}
						desc = coronation_banquet.0011.desc.t3.love.fickle
					}
				}
			}
		}
		desc = coronation_banquet.0011.desc.midtro
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = {
							category = wedding_option_food
							option = wedding_food_bad
						}
					}
				}
				desc = {
					random_valid = {
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = gluttonous }
							}
							desc = coronation_banquet.0011.desc.t1.hate.gluttonous
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = arrogant }
							}
							desc = coronation_banquet.0011.desc.t1.hate.arrogant
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = ambitious }
							}
							desc = coronation_banquet.0011.desc.t1.hate.ambitious
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = patient }
							}
							desc = coronation_banquet.0011.desc.t1.hate.patient
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = trusting }
							}
							desc = coronation_banquet.0011.desc.t1.hate.trusting
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = fickle }
							}
							desc = coronation_banquet.0011.desc.t1.hate.fickle
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = {
									NOR = {
										has_trait = gluttonous
										has_trait = arrogant
										has_trait = ambitious
										has_trait = patient
										has_trait = trusting
										has_trait = fickle
									}
								}
							}
							desc = coronation_banquet.0000.desc.hate.fallback
						}
					}
				}
			}
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = {
							category = wedding_option_food
							option = wedding_food_normal
						}
					}
				}
				desc = {
					random_valid = {
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = ambitious }
							}
							desc = coronation_banquet.0011.desc.t2.hate.ambitious
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = arrogant }
							}
							desc = coronation_banquet.0011.desc.t2.hate.arrogant
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = greedy }
							}
							desc = coronation_banquet.0011.desc.t2.hate.greedy
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = wrathful }
							}
							desc = coronation_banquet.0011.desc.t2.hate.wrathful
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = impatient }
							}
							desc = coronation_banquet.0011.desc.t2.hate.impatient
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = zealous }
							}
							desc = coronation_banquet.0011.desc.t2.hate.zealous
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = {
									NOR = {
										has_trait = ambitious
										has_trait = arrogant
										has_trait = greedy
										has_trait = wrathful
										has_trait = impatient
										has_trait = zealous
									}
								}
							}
							desc = coronation_banquet.0000.desc.hate.fallback
						}
					}
				}
			}
			desc = {
				random_valid = {
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = temperate }
						}
						desc = coronation_banquet.0011.desc.t3.hate.temperate
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = humble }
						}
						desc = coronation_banquet.0011.desc.t3.hate.humble
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = content }
						}
						desc = coronation_banquet.0011.desc.t3.hate.content
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = impatient }
						}
						desc = coronation_banquet.0011.desc.t3.hate.impatient
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = paranoid }
						}
						desc = coronation_banquet.0011.desc.t3.hate.paranoid
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = stubborn }
						}
						desc = coronation_banquet.0011.desc.t3.hate.stubborn
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = {
								NOR = {
									has_trait = temperate
									has_trait = humble
									has_trait = content
									has_trait = impatient
									has_trait = paranoid
									has_trait = stubborn
								}
							}
						}
						desc = coronation_banquet.0000.desc.hate.fallback
					}
				}
			}
		}
	}
	theme = feast_activity
	left_portrait = {
		character = scope:char_1
		animation = drink_goblet
	}
	center_portrait = {
		character = root
		animation = thinking
	}
	right_portrait = {
		character = scope:char_2
		animation = disapproval
	}

	cooldown = { years = 1 }

	trigger = {
		scope:activity = {
			# T1.
			trigger_if = {
				limit = {
					has_activity_option = {
						category = wedding_option_food
						option = wedding_food_bad
					}
				}
				# Check for a character who likes the setup.
				any_attending_character = {
					coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
					coronation_banquet_0011_food_t1_likes_trigger = yes
					# Now we need to wiggle a bit to make sure they don't overlap with one who _dislikes_ the setup.
					save_temporary_scope_as = char_temp
					scope:activity = {
						any_attending_character = {
							coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
							coronation_banquet_0011_food_t1_hates_trigger = yes
							NOT = { this = scope:char_temp }
						}
					}
				}
			}
			# T2.
			trigger_else_if = {
				limit = {
					has_activity_option = {
						category = wedding_option_food
						option = wedding_food_normal
					}
				}
				# Check for a character who likes the setup.
				any_attending_character = {
					coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
					coronation_banquet_0011_food_t2_likes_trigger = yes
					# Now we need to wiggle a bit to make sure they don't overlap with one who _dislikes_ the setup.
					save_temporary_scope_as = char_temp
					scope:activity = {
						any_attending_character = {
							coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
							coronation_banquet_0011_food_t2_hates_trigger = yes
							NOT = { this = scope:char_temp }
						}
					}
				}
			}
			# T3.
			trigger_else = {
				# Check for a character who likes the setup.
				any_attending_character = {
					coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
					coronation_banquet_0011_food_t3_likes_trigger = yes
					# Now we need to wiggle a bit to make sure they don't overlap with one who _dislikes_ the setup.
					save_temporary_scope_as = char_temp
					scope:activity = {
						any_attending_character = {
							coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
							coronation_banquet_0011_food_t3_hates_trigger = yes
							NOT = { this = scope:char_temp }
						}
					}
				}
			}
		}
	}

	immediate = {
		scope:activity = {
			# Try to grab our actors.
			## T1.
			if = {
				limit = {
					has_activity_option = {
						category = wedding_option_food
						option = wedding_food_bad
					}
				}
				# Check for a character who likes the setup.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0011_food_t1_likes_trigger = yes
						coronation_banquet_0011_food_t1_hates_trigger = no
					}
					# Failing that, grab anyone valid.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0011_food_t1_likes_trigger = yes
					}
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_1
				}
				# And for one who dislikes it.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0011_food_t1_hates_trigger = yes
						coronation_banquet_0011_food_t1_likes_trigger = no
					}
					# Failing that, grab anyone appropriate.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0011_food_t1_hates_trigger = yes
					}
					# Failing _that_, grab anyone at all.
					alternative_limit = { coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes }
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_2
				}
			}
			## T2.
			else_if = {
				limit = {
					has_activity_option = {
						category = wedding_option_food
						option = wedding_food_normal
					}
				}
				# Check for a character who likes the setup.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0011_food_t2_likes_trigger = yes
						coronation_banquet_0011_food_t2_hates_trigger = no
					}
					# Failing that, grab anyone valid.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0011_food_t2_likes_trigger = yes
					}
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_1
				}
				# And for one who dislikes it.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0011_food_t2_hates_trigger = yes
						coronation_banquet_0011_food_t2_likes_trigger = no
					}
					# Failing that, grab anyone appropriate.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0011_food_t2_hates_trigger = yes
					}
					# Failing _that_, grab anyone at all.
					alternative_limit = { coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes }
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_2
				}
			}
			## T3.
			else = {
				# Check for a character who likes the setup.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0011_food_t3_likes_trigger = yes
						coronation_banquet_0011_food_t3_hates_trigger = no
					}
					# Failing that, grab anyone valid.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0011_food_t3_likes_trigger = yes
					}
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_1
				}
				# And for one who dislikes it.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0011_food_t3_hates_trigger = yes
						coronation_banquet_0011_food_t3_likes_trigger = no
					}
					# Failing that, grab anyone appropriate.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0011_food_t3_hates_trigger = yes
					}
					# Failing _that_, grab anyone at all.
					alternative_limit = { coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes }
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_2
				}
			}
			# Now we try to process a decent activity target.
			if = {
				limit = {
					root = { has_activity_intent = banquet_mischief_intent }
				}
				ordered_attending_character = {
					limit = {
						NOR = {
							this = root
							this = scope:char_1
							this = scope:char_2
							this = scope:activity.special_guest:coronation_target
						}
						# No players.
						is_ai = yes
					}
					order_by = {
						# Nab _something_ like opinion.
						add = calc_rough_root_opinion_value
						# Invert it, as we want characters who hate us ranked first.
						multiply = -1
						# Aaaand multiply by tier to get more interesting characters who hate us.
						if = {
							# Unlanded have a rank of zero, so filter this a bit.
							limit = { is_landed = yes }
							multiply = highest_held_title_tier
						}
					}
					save_scope_as = intent_target
				}
			}
		}
	}

	# Agree with scope:char_1.
	option = {
		name = {
			trigger = {
				NOT = { this = scope:activity.special_guest:coronation_target }
			}
			text = coronation_banquet.0011.a
		}
		name = {
			trigger = { this = scope:activity.special_guest:coronation_target }
			text = coronation_banquet.0011.a.host
		}
		flavor = coronation_banquet.0000.flavour.hobnob.char_1

		# Apply opinion.
		coronation_banquet_0000_opinion_swap_effect = {
			FAVOURED_CHAR = scope:char_1
			REJECTED_CHAR = scope:char_2
		}
		# Give some lifestyle XP for who you hobnob with.
		coronation_banquet_0000_award_lifestyle_xp_per_conversationalist_effect = { TARGET = scope:char_1 }

		coronation_banquet_0000_host_takes_criticism_stress_gain_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = { ai_sociability = 1 }
			opinion_modifier = {
				opinion_target = scope:char_1
				multiplier = 0.5
			}
			opinion_modifier = {
				opinion_target = scope:char_2
				multiplier = -0.5
			}
		}
	}

	# Agree with scope:char_2.
	option = {
		name = {
			trigger = {
				NOT = { this = scope:activity.special_guest:coronation_target }
			}
			text = coronation_banquet.0011.b
		}
		name = {
			trigger = { this = scope:activity.special_guest:coronation_target }
			text = coronation_banquet.0011.b.host
		}
		flavor = coronation_banquet.0000.flavour.hobnob.char_2

		# Apply opinion.
		coronation_banquet_0000_opinion_swap_effect = {
			FAVOURED_CHAR = scope:char_2
			REJECTED_CHAR = scope:char_1
		}
		# Give some lifestyle XP for who you hobnob with.
		coronation_banquet_0000_award_lifestyle_xp_per_conversationalist_effect = { TARGET = scope:char_2 }

		coronation_banquet_0000_host_takes_criticism_stress_gain_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = { ai_sociability = 1 }
			opinion_modifier = {
				opinion_target = scope:char_2
				multiplier = 0.5
			}
			opinion_modifier = {
				opinion_target = scope:char_1
				multiplier = -0.5
			}
		}
	}

	# Mischief: spill something on someone.
	option = {
		name = coronation_banquet.0011.c
		# Check for target directly, rather than just the intent, because there isn't a pre-defined intent target and we may have failed to acquire someone suitable.
		trigger = { exists = scope:intent_target }
		custom_tooltip = available_because_intent_tt

		# You try to trip a server onto someone.
		duel = {
			skill = intrigue
			target = scope:intent_target
			# You're successful.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				min = 10
				desc = coronation_banquet.0011.c.tt.success
				send_interface_toast = {
					title = coronation_banquet.0011.c.tt.success
					left_icon = scope:intent_target
					scope:intent_target = {
						# Lose some prestige.
						add_prestige = minor_prestige_loss
						# Gain some stress.
						add_stress = medium_stress_gain
					}
				}
			}
			# The server rights themselves.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				min = 10
				desc = coronation_banquet.0011.c.tt.failure
				send_interface_toast = {
					title = coronation_banquet.0011.c.tt.failure
					left_icon = scope:intent_target
					# Considered borish.
					add_prestige = miniscule_prestige_loss
					# Plus scope:intent_target notices.
					reverse_add_opinion = {
						target = scope:intent_target
						modifier = suspicion_opinion
						opinion = -10
					}
				}
			}
		}

		# We give base stress loss for this'un too.
		stress_impact = {
			base = medium_stress_impact_loss
			deceitful = minor_stress_impact_loss
			honest = miniscule_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_compassion = -0.25
				ai_rationality = -0.25
			}
		}
	}

	# Nod along without paying attention.
	option = {
		name = coronation_banquet.0011.d

		# Opinion with the activty_host, or else prestige.
		coronation_banquet_0000_host_approves_effect = yes

		# We give base stress loss for this'un too.
		stress_impact = {
			base = minor_stress_impact_loss
			shy = minor_stress_impact_loss
			eccentric = minor_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_energy = -0.5
				ai_sociability = -2
			}
		}
	}

	option = {
		name = coronation_banquet.0011.e
		trigger = {
			has_activity_intent = raise_dynasty_prestige_intent
			this = scope:activity.special_guest:coronation_target
			scope:activity = {
				OR = {
					has_activity_option = {
						category = wedding_option_food
						option = wedding_food_normal
					}
					has_activity_option = {
						category = wedding_option_food
						option = wedding_food_good
					}
				}
			}
		}
		custom_tooltip = available_because_intent_tt
		# We give base stress loss for this'un too.
		stress_impact = {
			base = minor_stress_impact_loss
			shy = minor_stress_impact_gain
			eccentric = minor_stress_impact_loss
		}
		dynasty = { add_dynasty_prestige = minor_dynasty_prestige_gain }
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_energy = -0.5
				ai_sociability = -2
			}
		}
	}
}

##################################################
# Shimmering, Shining
# by Ewan Cowhig Croft
# 0021 - 0030
##################################################

# Character likes T1 decorations.
scripted_trigger coronation_banquet_0021_decoration_t1_likes_trigger = {
	OR = {
		# Appreciate it for being low-key.
		has_trait = content
		has_trait = lazy
		has_trait = humble
		# Understand that effort still went into it.
		has_trait = forgiving
		has_trait = compassionate
		# Contrarian.
		has_trait = arbitrary
		# Approves of frugality.
		has_trait = greedy
	}
}
# Character hates T1 decorations.
scripted_trigger coronation_banquet_0021_decoration_t1_hates_trigger = {
	OR = {
		# Hates it for being low-key.
		has_trait = ambitious
		has_trait = diligent
		has_trait = arrogant
		# Thinks they could've done better or not hyped it up so much.
		has_trait = honest
		has_trait = generous
		# Thinks it's just not what they expected.
		has_trait = just
	}
}
# Character likes T2 decorations.
scripted_trigger coronation_banquet_0021_decoration_t2_likes_trigger = {
	OR = {
		# Accepting of the average.
		has_trait = content
		has_trait = compassionate
		# Likes that money was spent.
		has_trait = generous
		# Likes the atmosphere being high-effort but not _too_ bustling.
		has_trait = calm
		has_trait = patient
		# Likes a middling option.
		has_trait = fickle
		has_trait = cynical
	}
}
# Character hates T2 decorations.
scripted_trigger coronation_banquet_0021_decoration_t2_hates_trigger = {
	OR = {
		# Hates the average.
		has_trait = ambitious
		has_trait = arrogant
		# Would have preferred all the money, to take advantage, or else none, not to waste any.
		has_trait = greedy
		# Want a more bustling atmosphere that goes further than this.
		has_trait = wrathful
		has_trait = impatient
		# Feels that if it was worth doing, it's worth doing to its best.
		has_trait = stubborn
		has_trait = zealous
	}
}
# Character likes T3 decorations.
scripted_trigger coronation_banquet_0021_decoration_t3_likes_trigger = {
	OR = {
		# Loves an over-the-top wedding.
		has_trait = ambitious
		has_trait = diligent
		has_trait = arrogant
		# Think it had the appropriate amount of effort put in.
		has_trait = honest
		has_trait = just
		# Happy to see all the money being spent.
		has_trait = greedy
		has_trait = generous
	}
}
# Character hates T3 decorations.
scripted_trigger coronation_banquet_0021_decoration_t3_hates_trigger = {
	OR = {
		# Think this might all be a bit much.
		has_trait = content
		has_trait = lazy
		has_trait = humble
		# Worry that the marriage is getting lost amidst all of this pomp.
		has_trait = compassionate
		# Contrarian.
		has_trait = arbitrary
	}
}

#	Connect with various types of characters over the venue & its decorations.
coronation_banquet.0021 = {
	type = activity_event
	title = coronation_banquet.0021.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = {
							category = coronation_option_pomp
							option = coronation_pomp_humble
						}
					}
				}
				desc = {
					desc = coronation_banquet.0021.desc.intro.bad
					random_valid = {
						triggered_desc = {
							trigger = {
								scope:char_1 = { has_trait = content }
							}
							desc = coronation_banquet.0021.desc.t1.love.content
						}
						triggered_desc = {
							trigger = {
								scope:char_1 = { has_trait = lazy }
							}
							desc = coronation_banquet.0021.desc.t1.love.lazy
						}
						triggered_desc = {
							trigger = {
								scope:char_1 = { has_trait = humble }
							}
							desc = coronation_banquet.0021.desc.t1.love.humble
						}
						triggered_desc = {
							trigger = {
								scope:char_1 = { has_trait = forgiving }
							}
							desc = coronation_banquet.0021.desc.t1.love.forgiving
						}
						triggered_desc = {
							trigger = {
								scope:char_1 = { has_trait = compassionate }
							}
							desc = coronation_banquet.0021.desc.t1.love.compassionate
						}
						triggered_desc = {
							trigger = {
								scope:char_1 = { has_trait = arbitrary }
							}
							desc = coronation_banquet.0021.desc.t1.love.arbitrary
						}
						triggered_desc = {
							trigger = {
								scope:char_1 = { has_trait = greedy }
							}
							desc = coronation_banquet.0021.desc.t1.love.greedy
						}
					}
				}
			}
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = {
							category = coronation_option_pomp
							option = coronation_pomp_appropriate
						}
					}
				}
				desc = {
					desc = coronation_banquet.0021.desc.intro.normal
					random_valid = {
						triggered_desc = {
							trigger = {
								scope:char_1 = { has_trait = content }
							}
							desc = coronation_banquet.0021.desc.t2.love.content
						}
						triggered_desc = {
							trigger = {
								scope:char_1 = { has_trait = compassionate }
							}
							desc = coronation_banquet.0021.desc.t2.love.compassionate
						}
						triggered_desc = {
							trigger = {
								scope:char_1 = { has_trait = generous }
							}
							desc = coronation_banquet.0021.desc.t2.love.generous
						}
						triggered_desc = {
							trigger = {
								scope:char_1 = { has_trait = calm }
							}
							desc = coronation_banquet.0021.desc.t2.love.calm
						}
						triggered_desc = {
							trigger = {
								scope:char_1 = { has_trait = patient }
							}
							desc = coronation_banquet.0021.desc.t2.love.patient
						}
						triggered_desc = {
							trigger = {
								scope:char_1 = { has_trait = fickle }
							}
							desc = coronation_banquet.0021.desc.t2.love.fickle
						}
						triggered_desc = {
							trigger = {
								scope:char_1 = { has_trait = cynical }
							}
							desc = coronation_banquet.0021.desc.t2.love.cynical
						}
					}
				}
			}
			desc = {
				desc = coronation_banquet.0021.desc.intro.good
				random_valid = {
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = ambitious }
						}
						desc = coronation_banquet.0021.desc.t3.love.ambitious
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = diligent }
						}
						desc = coronation_banquet.0021.desc.t3.love.diligent
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = arrogant }
						}
						desc = coronation_banquet.0021.desc.t3.love.arrogant
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = honest }
						}
						desc = coronation_banquet.0021.desc.t3.love.honest
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = just }
						}
						desc = coronation_banquet.0021.desc.t3.love.just
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = greedy }
						}
						desc = coronation_banquet.0021.desc.t3.love.greedy
					}
					triggered_desc = {
						trigger = {
							scope:char_1 = { has_trait = generous }
						}
						desc = coronation_banquet.0021.desc.t3.love.generous
					}
				}
			}
		}
		desc = coronation_banquet.0021.desc.midtro
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = {
							category = coronation_option_pomp
							option = coronation_pomp_humble
						}
					}
				}
				desc = {
					random_valid = {
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = ambitious }
							}
							desc = coronation_banquet.0021.desc.t1.hate.ambitious
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = diligent }
							}
							desc = coronation_banquet.0021.desc.t1.hate.diligent
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = arrogant }
							}
							desc = coronation_banquet.0021.desc.t1.hate.arrogant
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = honest }
							}
							desc = coronation_banquet.0021.desc.t1.hate.honest
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = generous }
							}
							desc = coronation_banquet.0021.desc.t1.hate.generous
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = just }
							}
							desc = coronation_banquet.0021.desc.t1.hate.just
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = {
									NOR = {
										has_trait = ambitious
										has_trait = diligent
										has_trait = arrogant
										has_trait = honest
										has_trait = generous
										has_trait = just
									}
								}
							}
							desc = coronation_banquet.0000.desc.hate.fallback
						}
					}
				}
			}
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = {
							category = coronation_option_pomp
							option = coronation_pomp_appropriate
						}
					}
				}
				desc = {
					random_valid = {
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = ambitious }
							}
							desc = coronation_banquet.0021.desc.t2.hate.ambitious
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = arrogant }
							}
							desc = coronation_banquet.0021.desc.t2.hate.arrogant
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = greedy }
							}
							desc = coronation_banquet.0021.desc.t2.hate.greedy
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = wrathful }
							}
							desc = coronation_banquet.0021.desc.t2.hate.wrathful
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = impatient }
							}
							desc = coronation_banquet.0021.desc.t2.hate.impatient
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = stubborn }
							}
							desc = coronation_banquet.0021.desc.t2.hate.stubborn
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = { has_trait = zealous }
							}
							desc = coronation_banquet.0021.desc.t2.hate.zealous
						}
						triggered_desc = {
							trigger = {
								scope:char_2 = {
									NOR = {
										has_trait = ambitious
										has_trait = arrogant
										has_trait = greedy
										has_trait = wrathful
										has_trait = impatient
										has_trait = stubborn
										has_trait = zealous
									}
								}
							}
							desc = coronation_banquet.0000.desc.hate.fallback
						}
					}
				}
			}
			desc = {
				random_valid = {
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = content }
						}
						desc = coronation_banquet.0021.desc.t3.hate.content
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = lazy }
						}
						desc = coronation_banquet.0021.desc.t3.hate.lazy
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = humble }
						}
						desc = coronation_banquet.0021.desc.t3.hate.humble
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = compassionate }
						}
						desc = coronation_banquet.0021.desc.t3.hate.compassionate
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = { has_trait = arbitrary }
						}
						desc = coronation_banquet.0021.desc.t3.hate.arbitrary
					}
					triggered_desc = {
						trigger = {
							scope:char_2 = {
								NOR = {
									has_trait = content
									has_trait = lazy
									has_trait = humble
									has_trait = compassionate
									has_trait = arbitrary
								}
							}
						}
						desc = coronation_banquet.0000.desc.hate.fallback
					}
				}
			}
		}
	}
	theme = feast_activity
	left_portrait = {
		character = scope:char_1
		animation = admiration
	}
	center_portrait = {
		character = root
		animation = thinking
	}
	right_portrait = {
		character = scope:char_2
		animation = disapproval
	}

	cooldown = { years = 1 }

	trigger = {
		scope:activity = {
			# T1.
			trigger_if = {
				limit = {
					has_activity_option = {
						category = coronation_option_pomp
						option = coronation_pomp_humble
					}
				}
				# Check for a character who likes the setup.
				any_attending_character = {
					coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
					coronation_banquet_0021_decoration_t1_likes_trigger = yes
					# Now we need to wiggle a bit to make sure they don't overlap with one who _dislikes_ the setup.
					save_temporary_scope_as = char_temp
					scope:activity = {
						any_attending_character = {
							coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
							coronation_banquet_0021_decoration_t1_hates_trigger = yes
							NOT = { this = scope:char_temp }
						}
					}
				}
			}
			# T2.
			trigger_else_if = {
				limit = {
					has_activity_option = {
						category = coronation_option_pomp
						option = coronation_pomp_appropriate
					}
				}
				# Check for a character who likes the setup.
				any_attending_character = {
					coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
					coronation_banquet_0021_decoration_t2_likes_trigger = yes
					# Now we need to wiggle a bit to make sure they don't overlap with one who _dislikes_ the setup.
					save_temporary_scope_as = char_temp
					scope:activity = {
						any_attending_character = {
							coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
							coronation_banquet_0021_decoration_t2_hates_trigger = yes
							NOT = { this = scope:char_temp }
						}
					}
				}
			}
			# T3.
			trigger_else = {
				# Check for a character who likes the setup.
				any_attending_character = {
					coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
					coronation_banquet_0021_decoration_t3_likes_trigger = yes
					# Now we need to wiggle a bit to make sure they don't overlap with one who _dislikes_ the setup.
					save_temporary_scope_as = char_temp
					scope:activity = {
						any_attending_character = {
							coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
							coronation_banquet_0021_decoration_t3_hates_trigger = yes
							NOT = { this = scope:char_temp }
						}
					}
				}
			}
		}
	}

	immediate = {
		# Try to grab our actors.
		scope:activity = {
			# T1.
			if = {
				limit = {
					has_activity_option = {
						category = coronation_option_pomp
						option = coronation_pomp_humble
					}
				}
				# Check for a character who likes the setup.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0021_decoration_t1_likes_trigger = yes
						coronation_banquet_0021_decoration_t1_hates_trigger = no
					}
					# Failing that, grab anyone valid.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0021_decoration_t1_likes_trigger = yes
					}
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_1
				}
				# And for one who dislikes it.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0021_decoration_t1_hates_trigger = yes
						coronation_banquet_0021_decoration_t1_likes_trigger = no
					}
					# Failing that, grab anyone appropriate.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0021_decoration_t1_hates_trigger = yes
					}
					# Failing _that_, grab anyone at all.
					alternative_limit = { coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes }
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_2
				}
			}
			# T2.
			else_if = {
				limit = {
					has_activity_option = {
						category = coronation_option_pomp
						option = coronation_pomp_appropriate
					}
				}
				# Check for a character who likes the setup.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0021_decoration_t2_likes_trigger = yes
						coronation_banquet_0021_decoration_t2_hates_trigger = no
					}
					# Failing that, grab anyone valid.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0021_decoration_t2_likes_trigger = yes
					}
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_1
				}
				# And for one who dislikes it.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0021_decoration_t2_hates_trigger = yes
						coronation_banquet_0021_decoration_t2_likes_trigger = no
					}
					# Failing that, grab anyone appropriate.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0021_decoration_t2_hates_trigger = yes
					}
					# Failing _that_, grab anyone at all.
					alternative_limit = { coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes }
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_2
				}
			}
			# T3.
			else = {
				# Check for a character who likes the setup.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0021_decoration_t3_likes_trigger = yes
						coronation_banquet_0021_decoration_t3_hates_trigger = no
					}
					# Failing that, grab anyone valid.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0021_decoration_t3_likes_trigger = yes
					}
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_1
				}
				# And for one who dislikes it.
				ordered_attending_character = {
					# Try to grab opposing characters first.
					limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0021_decoration_t3_hates_trigger = yes
						coronation_banquet_0021_decoration_t3_likes_trigger = no
					}
					# Failing that, grab anyone appropriate.
					alternative_limit = {
						coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes
						coronation_banquet_0021_decoration_t3_hates_trigger = yes
					}
					# Failing _that_, grab anyone at all.
					alternative_limit = { coronation_banquet_0000_activity_option_opinion_characters_standard_filter_trigger = yes }
					# Make sure we're looking at interesting people.
					order_by = highest_held_title_tier
					save_scope_as = char_2
				}
			}
		}
		# If relevant, grab our intent target.
		if = {
			limit = { has_activity_intent = woo_attendee_intent }
			intent_target = { save_scope_as = intent_target }
		}
	}

	# Agree with scope:char_1.
	option = {
		name = {
			trigger = {
				NOT = { this = scope:activity.special_guest:coronation_target }
			}
			text = coronation_banquet.0021.a
		}
		name = {
			trigger = { this = scope:activity.special_guest:coronation_target }
			text = coronation_banquet.0021.a.host
		}
		flavor = coronation_banquet.0000.flavour.hobnob.char_1

		# Apply opinion.
		coronation_banquet_0000_opinion_swap_effect = {
			FAVOURED_CHAR = scope:char_1
			REJECTED_CHAR = scope:char_2
		}
		# Give some lifestyle XP for who you hobnob with.
		coronation_banquet_0000_award_lifestyle_xp_per_conversationalist_effect = { TARGET = scope:char_1 }

		coronation_banquet_0000_host_takes_criticism_stress_gain_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = { ai_sociability = 1 }
			opinion_modifier = {
				opinion_target = scope:char_1
				multiplier = 0.5
			}
			opinion_modifier = {
				opinion_target = scope:char_2
				multiplier = -0.5
			}
		}
	}

	# Agree with scope:char_2.
	option = {
		name = {
			trigger = {
				NOT = { this = scope:activity.special_guest:coronation_target }
			}
			text = coronation_banquet.0021.b
		}
		name = {
			trigger = { this = scope:activity.special_guest:coronation_target }
			text = coronation_banquet.0021.b.host
		}
		flavor = coronation_banquet.0000.flavour.hobnob.char_2

		# Apply opinion.
		coronation_banquet_0000_opinion_swap_effect = {
			FAVOURED_CHAR = scope:char_2
			REJECTED_CHAR = scope:char_1
		}
		# Give some lifestyle XP for who you hobnob with.
		coronation_banquet_0000_award_lifestyle_xp_per_conversationalist_effect = { TARGET = scope:char_2 }

		coronation_banquet_0000_host_takes_criticism_stress_gain_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = { ai_sociability = 1 }
			opinion_modifier = {
				opinion_target = scope:char_2
				multiplier = 0.5
			}
			opinion_modifier = {
				opinion_target = scope:char_1
				multiplier = -0.5
			}
		}
	}

	# Seduce: try to chat your target up.
	option = {
		name = coronation_banquet.0021.c
		trigger = { has_activity_intent = woo_attendee_intent }
		custom_tooltip = available_because_intent_tt

		# Sprinkle a bit of opinion in there.
		reverse_add_opinion = {
			target = scope:intent_target
			modifier = flattered_opinion
			opinion = 30
		}

		if = {
			limit = {
				OR = {
					root = scope:activity.special_guest:coronation_target
				}
				OR = {
					scope:intent_target = scope:activity.special_guest:coronation_target
				}
				can_set_relation_soulmate_trigger = { CHARACTER = scope:intent_target }
			}
			random = {
				chance = 5
				set_relation_soulmate = { reason = soulmate_wedding_accepting_partner target = scope:intent_target }
				# Achievements
				player_succeeded_at_a_thousand_and_one_nights_achievement_effect = yes
			}
		}

		stress_impact = {
			chaste = miniscule_stress_impact_gain
			lustful = minor_stress_impact_loss
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 1
				ai_rationality = -0.5
			}
		}
	}

	# Don't get involved.
	option = {
		name = coronation_banquet.0021.d

		# Opinion with the activty_host, or else prestige.
		coronation_banquet_0000_host_approves_effect = yes

		# We give base stress loss for this'un too.
		stress_impact = {
			base = minor_stress_impact_loss
			shy = minor_stress_impact_loss
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_energy = -0.5
				ai_sociability = -2
			}
		}
	}
}

##################################################
# A Sociable Supper
# by Ewan Cowhig Croft
# 0031 - 0040
##################################################

scripted_trigger coronation_banquet_0031_appropriate_ruler_trigger = {
	# Are they an appropriately landed ruler?
	highest_held_title_tier >= {
		# Grab root's tier.
		value = root.highest_held_title_tier
		# Now subtract one so that we allow for direct vassals.
		add = -1
		# Counts & above only.
		min = 2
	}
	# Make sure they don't hate root's guts already?
	opinion = {
		target = root
		value >= high_negative_opinion
	}
	NOR = {
		# No family.
		is_close_family_of = root
		is_consort_of = root
		# No prior relations.
		has_any_good_relationship_with_character_trigger  = { CHARACTER = root }
		has_any_bad_relationship_with_character_trigger  = { CHARACTER = root }
	}
	# No players.
	is_ai = no
}

scripted_effect coronation_banquet_0031_social_climber_stress_effect = {
	stress_impact = {
		gregarious = minor_stress_impact_loss
		ambitious = minor_stress_impact_loss
		shy = miniscule_stress_impact_gain
		content = miniscule_stress_impact_gain
	}
}

scripted_effect coronation_banquet_0031_make_friend_effect = {
	# Become friends.
	set_relation_friend = {
		target = $TARGET$
		reason = befriended_at_feast
		province = scope:activity.activity_location
	}
	# Plus some opinion for the sake of it.
	reverse_add_opinion = {
		target = $TARGET$
		modifier = friendliness_opinion
		opinion = 15
	}
}

#	Meet one of your neighbouring rulers and form a fast friendship.
coronation_banquet.0031 = {
	type = activity_event
	title = coronation_banquet.0031.t
	desc = {
		desc = coronation_banquet.0031.desc.intro
		# Our first character.
		first_valid = {
			triggered_desc = {
				trigger = {  scope:conversationalist_neighbour ?= scope:char_1 }
				desc = coronation_banquet.0031.desc.char_1.conversationalist_neighbour
			}
			triggered_desc = {
				trigger = {  scope:conversationalist_covassal ?= scope:char_1 }
				desc = coronation_banquet.0031.desc.char_1.conversationalist_covassal
			}
			triggered_desc = {
				trigger = {  scope:conversationalist_vassal ?= scope:char_1 }
				desc = coronation_banquet.0031.desc.char_1.conversationalist_vassal
			}
			triggered_desc = {
				trigger = {  scope:conversationalist_liege ?= scope:char_1 }
				desc = coronation_banquet.0031.desc.char_1.conversationalist_liege
			}
			triggered_desc = {
				trigger = {  scope:conversationalist_other_ruler ?= scope:char_1 }
				desc = coronation_banquet.0031.desc.char_1.conversationalist_other_ruler
			}
			triggered_desc = {
				trigger = {  scope:conversationalist_backup ?= scope:char_1 }
				desc = coronation_banquet.0031.desc.char_1.conversationalist_backup
			}
		}
		desc = coronation_banquet.0031.desc.midro
		# Our second character.
		first_valid = {
			triggered_desc = {
				trigger = {  scope:conversationalist_neighbour ?= scope:char_2 }
				desc = coronation_banquet.0031.desc.char_2.conversationalist_neighbour
			}
			triggered_desc = {
				trigger = {  scope:conversationalist_covassal ?= scope:char_2 }
				desc = coronation_banquet.0031.desc.char_2.conversationalist_covassal
			}
			triggered_desc = {
				trigger = {  scope:conversationalist_vassal ?= scope:char_2 }
				desc = coronation_banquet.0031.desc.char_2.conversationalist_vassal
			}
			triggered_desc = {
				trigger = {  scope:conversationalist_liege ?= scope:char_2 }
				desc = coronation_banquet.0031.desc.char_2.conversationalist_liege
			}
			triggered_desc = {
				trigger = {  scope:conversationalist_other_ruler ?= scope:char_2 }
				desc = coronation_banquet.0031.desc.char_2.conversationalist_other_ruler
			}
			triggered_desc = {
				trigger = {  scope:conversationalist_backup ?= scope:char_2 }
				desc = coronation_banquet.0031.desc.char_2.conversationalist_backup
			}
		}
		desc = coronation_banquet.0031.desc.outro
	}
	theme = feast_activity
	left_portrait = {
		character = scope:char_1
		animation = boredom
	}
	right_portrait = {
		character = scope:char_2
		animation = happiness
	}

	cooldown = { years = 1 }

	trigger = {
		scope:activity = {
			any_attending_character = {
				count >= 2
				coronation_banquet_0031_appropriate_ruler_trigger = yes
			}
		}
	}

	weight_multiplier = {
		base = 1

		# We don't want the AI to spam-befriend people via this event too much, so we weight it down for them.
		modifier = {
			add = -0.75
			is_ai = yes
		}
	}

	immediate = {
		# Let's pick some characters!
		## First, grab everyone we might want to pick through.
		scope:activity = {
			every_attending_character = {
				limit = { coronation_banquet_0031_appropriate_ruler_trigger = yes }
				add_to_list = potential_conversationalists_list
			}
		}
		## Now, we need to try and filter them out by categories.
		### Neighbouring rulers.
		#### This one is expensive, so we restrict it to players.
		if = {
			limit = { is_ai = no }
			# Right, we're actually going to post-filter by these guys later on too, so we want to grab all of them the first time we iterate rather than do it twice.
			every_in_list = {
				list = potential_conversationalists_list
				limit = {
					OR = {
						any_neighboring_and_across_water_realm_same_rank_owner = { this = root }
						any_neighboring_and_across_water_top_liege_realm_owner = { this = root }
					}
				}
				add_to_list = neighbouring_conversationalists_list
			}
			# Now we can go through and grab the best one.
			ordered_in_list = {
				list = neighbouring_conversationalists_list
				# Order by military strength for the most interesting realpolitik choice.
				order_by = max_military_strength
				# Grab the most suitable for later checks & randomisation.
				save_scope_as = conversationalist_neighbour
				add_to_list = contending_characters_list
			}
		}
		### Fellow vassals or one of your lieges.
		#### No point iterating through the list repeatedly if we aren't independent.
		if = {
			limit = { exists = liege }
			# Fellow vassals.
			ordered_in_list = {
				list = potential_conversationalists_list
				limit = { liege ?= root.liege }
				# Order by military strength for the most interesting realpolitik choice.
				order_by = max_military_strength
				# Grab the most suitable for later checks & randomisation.
				save_scope_as = conversationalist_covassal
				add_to_list = contending_characters_list
			}
			# Lieges.
			ordered_in_list = {
				list = potential_conversationalists_list
				limit = {
					save_temporary_scope_as = char_temp
					root = {
						any_liege_or_above = { this = scope:char_temp }
					}
				}
				# Lieges use a slightly weirder prio-order, since their military strength is less relevant.
				order_by = {
					# We want to befriend the most powerful person we can, as they're the most interesting.
					value = highest_held_title_tier
					# _But_, your direct liege is still the best, as they have much more impact on your general rule.
					if = {
						limit = { this = root.liege }
						add = 10
					}
				}
				# Grab the most suitable for later checks & randomisation.
				save_scope_as = conversationalist_liege
				add_to_list = contending_characters_list
			}
		}
		### Direct vassals.
		ordered_in_list = {
			list = potential_conversationalists_list
			limit = { liege ?= root }
			# Order by military strength for the most interesting realpolitik choice.
			order_by = max_military_strength
			# Grab the most suitable for later checks & randomisation.
			save_scope_as = conversationalist_vassal
			add_to_list = contending_characters_list
		}
		### Distant rulers.
		ordered_in_list = {
			list = potential_conversationalists_list
			limit = {
				NOR = {
					top_liege = root.top_liege
					# If we don't have a neighbouring conversationalists list, then this allows the AI to befriend non-realm rulers, and if we do, then this stops us checking through all that smeg again.
					trigger_if = {
						limit = {
							any_in_list = {
								list = neighbouring_conversationalists_list
								count >= 1
							}
						}
						is_in_list = neighbouring_conversationalists_list
					}
				}
			}
			# Order by military strength for the most interesting realpolitik choice.
			order_by = max_military_strength
			# Grab the most suitable for later checks & randomisation.
			save_scope_as = conversationalist_other_ruler
			add_to_list = contending_characters_list
		}
		## If we didn't have multiple interesting categories, generate a backup.
		if = {
			limit = {
				calc_true_if = {
					amount <= 1
					NOT = { exists = scope:conversationalist_neighbour }
					NOT = { exists = scope:conversationalist_covassal }
					NOT = { exists = scope:conversationalist_vassal }
					NOT = { exists = scope:conversationalist_liege }
					NOT = { exists = scope:conversationalist_other_ruler }
				}
			}
			ordered_in_list = {
				list = potential_conversationalists_list
				limit = {
					NOR = {
						scope:conversationalist_neighbour ?= this
						scope:conversationalist_covassal ?= this
						scope:conversationalist_vassal ?= this
						scope:conversationalist_liege ?= this
						scope:conversationalist_other_ruler ?= this
					}
				}
				# Grab the most suitable for later checks & randomisation.
				save_scope_as = conversationalist_backup
				add_to_list = contending_characters_list
			}
		}
		# Ok, characters are assembled. Grab our favourite candidates.
		## Grab one.
		random_in_list = {
			list = contending_characters_list
			# This character isn't having a great time at the party, so we try to pick the less sociable char first.
			limit = { has_trait = shy }
			alternative_limit = {
				NOT = { has_trait = gregarious }
			}
			alternative_limit = { always = yes }
			save_scope_as = char_1
		}
		## Then another.
		random_in_list = {
			list = contending_characters_list
			limit = {
				NOT = { this = scope:char_1 }
				# No trait checks needed here — there's only one character remaining in the list now.
			}
			save_scope_as = char_2
		}
	}

	# Neighbouring ruler.
	option = {
		name = coronation_banquet.0031.a
		trigger = {
			OR = {
				scope:conversationalist_neighbour ?= scope:char_1
				scope:conversationalist_neighbour ?= scope:char_2
			}
		}

		# Become friends.
		coronation_banquet_0031_make_friend_effect = { TARGET = scope:conversationalist_neighbour }

		coronation_banquet_0031_social_climber_stress_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = { ai_sociability = 1 }
			opinion_modifier = { opinion_target = scope:conversationalist_neighbour }
		}
	}

	# Fellow vassal.
	option = {
		name = coronation_banquet.0031.b
		trigger = {
			OR = {
				scope:conversationalist_covassal ?= scope:char_1
				scope:conversationalist_covassal ?= scope:char_2
			}
		}

		# Become friends.
		coronation_banquet_0031_make_friend_effect = { TARGET = scope:conversationalist_covassal }

		coronation_banquet_0031_social_climber_stress_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = { ai_sociability = 1 }
			opinion_modifier = { opinion_target = scope:conversationalist_covassal }
		}
	}

	# Direct vassal.
	option = {
		name = coronation_banquet.0031.c
		trigger = {
			OR = {
				scope:conversationalist_vassal ?= scope:char_1
				scope:conversationalist_vassal ?= scope:char_2
			}
		}

		# Become friends.
		coronation_banquet_0031_make_friend_effect = { TARGET = scope:conversationalist_vassal }

		coronation_banquet_0031_social_climber_stress_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = { ai_sociability = 1 }
			opinion_modifier = { opinion_target = scope:conversationalist_vassal }
		}
	}

	# Liege.
	option = {
		name = coronation_banquet.0031.d
		trigger = {
			OR = {
				scope:conversationalist_liege ?= scope:char_1
				scope:conversationalist_liege ?= scope:char_2
			}
		}

		# Become friends.
		coronation_banquet_0031_make_friend_effect = { TARGET = scope:conversationalist_liege }

		coronation_banquet_0031_social_climber_stress_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = { ai_sociability = 1 }
			opinion_modifier = { opinion_target = scope:conversationalist_liege }
		}
	}

	# Distant ruler.
	option = {
		name = coronation_banquet.0031.e
		trigger = {
			OR = {
				scope:conversationalist_other_ruler ?= scope:char_1
				scope:conversationalist_other_ruler ?= scope:char_2
			}
		}

		# Become friends.
		coronation_banquet_0031_make_friend_effect = { TARGET = scope:conversationalist_other_ruler }

		coronation_banquet_0031_social_climber_stress_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = { ai_sociability = 1 }
			opinion_modifier = { opinion_target = scope:conversationalist_other_ruler }
		}
	}

	# Backup option.
	option = {
		name = coronation_banquet.0031.f
		trigger = {
			OR = {
				scope:conversationalist_backup ?= scope:char_1
				scope:conversationalist_backup ?= scope:char_2
			}
		}

		# Become friends.
		coronation_banquet_0031_make_friend_effect = { TARGET = scope:conversationalist_backup }

		coronation_banquet_0031_social_climber_stress_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = { ai_sociability = 1 }
			opinion_modifier = { opinion_target = scope:conversationalist_backup }
		}
	}

	# Recreation: this isn't the time for such ladder-climbing.
	option = {
		name = coronation_banquet.0031.g
		trigger = { has_activity_intent = reduce_stress_intent }
		custom_tooltip = available_because_intent_tt

		# Decent middling prestige.
		add_prestige = medium_prestige_gain

		# We give base stress loss for this'un too.
		stress_impact = {
			base = major_stress_impact_loss
			shy = medium_stress_impact_loss
			lazy = medium_stress_impact_loss
			gregarious = miniscule_stress_impact_gain
			ambitious = miniscule_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_sociability = -0.25
				ai_energy = -0.5
				ai_boldness = -1
			}
		}
	}

	# Mmm. They're not that interesting.
	option = {
		name = coronation_banquet.0031.h
		trigger = {
			NOT = { has_activity_intent = reduce_stress_intent }
		}

		# Consolation prestige.
		add_prestige = minor_prestige_gain

		stress_impact = {
			shy = minor_stress_impact_loss
			gregarious = miniscule_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = { ai_sociability = -2 }
		}
	}
}

##################################################
# And Another Thing
# by Ewan Cowhig Croft
# 0051 - 0060
##################################################

# Zealous same-faith chars don't mind hearing these things.
scripted_trigger coronation_banquet_0051_boring_zeal_trigger = {
	has_trait = zealous
	NOT = {
		faith = root.faith
		root = { has_trait = zealous }
	}
}

# Make sure a rakish character wouldn't get in legal trouble talking about this (fornication is included in adultery logic).
scripted_trigger coronation_banquet_0051_legal_rake_trigger = {
	has_trait = rakish
	save_temporary_scope_as = char_temp
	NOT = {
		trait_is_criminal_in_faith_trigger = {
			TRAIT = adulterer
			FAITH = scope:char_temp.faith
			GENDER_CHARACTER = scope:char_temp
		}
	}
}

# Profligates fall for someone else's scam, so paranoid profligates are immune to this *specific* form of money loss.
scripted_trigger coronation_banquet_0051_foolish_profligate_trigger = {
	has_trait = profligate
	NOT = { has_trait = paranoid }
}

# Pick someone with nothing interesting to say.
scripted_trigger coronation_banquet_0051_dolt_trigger = {
	# We don't want important characters.
	highest_held_title_tier <= tier_barony
	# Must be verifiably a yawn.
	## Filter out anyone who can probably hold an interesting conversation.
	NOR = {
		has_trait = gregarious
		has_trait = diplomat
		diplomacy >= high_skill_rating
		learning >= high_skill_rating
		# Shy characters will also never do this.
		has_trait = shy
	}
	## Filter out people who don't make sense or who you might listen to.
	NOR = {
		this = root
		root.intent_target ?= this
		has_any_good_relationship_with_character_trigger = { CHARACTER = root }
	}
	## Now, ensure they've got an actively boring quality to discuss.
	OR = {
		# Won't stop talking about work.
		has_trait = diligent
		# Won't stop talking at all, relentlessly.
		has_trait = patient
		# Won't stick to the same subject.
		has_trait = impatient
		# Doesn't see any of the obvious flaws in their idea.
		has_trait = arrogant
		# Idea makes no sense.
		has_trait = arbitrary
		# Boring religious talk.
		coronation_banquet_0051_boring_zeal_trigger = yes
		# Can't stick to an idea.
		has_trait = fickle
		# Idea is hyper-focused on disproportionately screwing someone over.
		has_trait = vengeful
		# Idea is long-winded.
		has_trait = poet
		# Stress traits want you to go in on their stress-related emporium.
		## Pub.
		has_trait = drunkard
		## Cake shop.
		has_trait = hashishiyah
		## Brothel.
		coronation_banquet_0051_legal_rake_trigger = yes
		## Some kind of isolation tower.
		has_trait = reclusive
		## Whipping. Place. Whiptorium? Whiplaza?
		has_trait = flagellant
		## It's someone else's idea and obviously a scam.
		coronation_banquet_0051_foolish_profligate_trigger = yes
		## Want to open a library for journals.
		### Honestly this one is kinda rad, I feel, but I guess I'm boring.
		has_trait = journaller
		## Gym.
		has_trait = athletic
	}
}

# Triggers for whether you get the option to invest in a specific stress trait pitch.
scripted_trigger coronation_banquet_0051_interested_stress_pitch_trait_drunkard_trigger = {
	has_trait = drunkard
	scope:stress_pitch ?= flag:drunkard
}
scripted_trigger coronation_banquet_0051_interested_stress_pitch_trait_hashishiyah_trigger = {
	has_trait = hashishiyah
	scope:stress_pitch ?= flag:hashishiyah
}
scripted_trigger coronation_banquet_0051_interested_stress_pitch_trait_rakish_trigger = {
	has_trait = rakish
	scope:stress_pitch ?= flag:rakish
}
scripted_trigger coronation_banquet_0051_interested_stress_pitch_trait_reclusive_trigger = {
	has_trait = reclusive
	scope:stress_pitch ?= flag:reclusive
}
scripted_trigger coronation_banquet_0051_interested_stress_pitch_trait_flagellant_trigger = {
	OR = {
		has_trait = flagellant
		# *sigh* And we acknowledge ulterior motives.
		has_trait = deviant
		any_secret = { secret_type = secret_deviant }
	}
	scope:stress_pitch ?= flag:flagellant
}
scripted_trigger coronation_banquet_0051_interested_stress_pitch_trait_profligate_trigger = {
	has_trait = profligate
	scope:stress_pitch ?= flag:profligate
}
scripted_trigger coronation_banquet_0051_interested_stress_pitch_trait_journaller_trigger = {
	has_trait = journaller
	scope:stress_pitch ?= flag:journaller
}
scripted_trigger coronation_banquet_0051_interested_stress_pitch_trait_athletic_trigger = {
	has_trait = athletic
	scope:stress_pitch ?= flag:athletic
}

# Stress for not being a dick to a boring, boring person.
scripted_effect coronation_banquet_0051_compassion_to_dolt_effect = {
	stress_impact = {
		compassionate = minor_stress_impact_loss
		patient = minor_stress_impact_loss
		calm = minor_stress_impact_loss
		callous = miniscule_stress_impact_gain
		sadistic = miniscule_stress_impact_gain
		impatient = miniscule_stress_impact_gain
		wrathful = miniscule_stress_impact_gain
	}
}

# Loss stress when indulging a stress coping trait.
scripted_effect coronation_banquet_0051_stress_trait_stress_effect = {
	stress_impact = {
		$STRESS_TRAIT$ = massive_stress_impact_loss
		trusting = miniscule_stress_impact_loss
		diligent = miniscule_stress_impact_loss
		paranoid = miniscule_stress_impact_gain
		lazy = miniscule_stress_impact_gain
	}
}

# You start a business based around a shared stress coping trait.
scripted_effect coronation_banquet_0051_start_business_together_effect = {
	# Up-front costs for the both of you.
	remove_short_term_gold = major_gold_value
	scope:dolt = { remove_short_term_gold = major_gold_value }
	# Inform that this may not bear fruit for many years.
	custom_tooltip = coronation_banquet.0051.business_venture.tt
	hidden_effect = {
		# Log that we're waiting on our last venture.
		add_character_flag = awaiting_coronation_banquet_0051_results_flag
		# Now, do a hidden duel for this'un.
		duel = {
			skill = stewardship
			value = dolt_stewardship_adjusted_difficulty_value
			# It goes well.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				# Weight down if this is a profligacy thing, as that's the surest-loss.
				modifier = {
					add = -10
					scope:stress_pitch ?= flag:profligate
				}
				# You always have a very, very slight shot.
				min = 2
				# Congrats!
				trigger_event = {
					id = coronation_banquet.0052
					years = { 15 25 }
				}
			}
			# It goes poorly.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				# Weight up if this is a profligacy thing, as that's the surest-loss.
				modifier = {
					add = 10
					scope:stress_pitch ?= flag:profligate
				}
				# This is not a well-structured proposition for either of you.
				min = 25
				# Better luck next time.
				trigger_event = {
					id = coronation_banquet.0053
					years = { 15 25 }
				}
			}
		}
	}
}

# Your business is incompatible with your faith.
scripted_effect coronation_banquet_0051_business_piety_consequences_effect = {
	if = {
		limit = { this ?= faith.religious_head }
		add_piety = medium_piety_loss
	}
	else = { add_piety = minor_piety_loss }
}

#	Someone is pitching questionable ideas at you, and you can go along with them or not, but they keep coming at you.
coronation_banquet.0051 = {
	type = activity_event
	title = coronation_banquet.0051.t
	desc = {
		desc = coronation_banquet.0051.desc.intro
		first_valid = {
			# Do we have a stress pitch to make, and thus special option shenanigans to account for?
			triggered_desc = {
				trigger = { exists = scope:stress_pitch }
				desc = {
					first_valid = {
						# Drunkard
						triggered_desc = {
							trigger = { scope:stress_pitch = flag:drunkard }
							desc = coronation_banquet.0051.desc.drunkard
						}
						# Hashishiyah
						triggered_desc = {
							trigger = { scope:stress_pitch = flag:hashishiyah }
							desc = coronation_banquet.0051.desc.hashishiyah
						}
						# Rakish
						triggered_desc = {
							trigger = { scope:stress_pitch = flag:rakish }
							desc = coronation_banquet.0051.desc.rakish
						}
						# Reclusive
						triggered_desc = {
							trigger = { scope:stress_pitch = flag:reclusive }
							desc = coronation_banquet.0051.desc.reclusive
						}
						# Flagellant
						triggered_desc = {
							trigger = { scope:stress_pitch = flag:flagellant }
							desc = coronation_banquet.0051.desc.flagellant
						}
						# Profligate
						triggered_desc = {
							trigger = { scope:stress_pitch = flag:profligate }
							desc = coronation_banquet.0051.desc.profligate
						}
						# Journaller
						triggered_desc = {
							trigger = { scope:stress_pitch = flag:journaller }
							desc = coronation_banquet.0051.desc.journaller
						}
						# Athletic
						triggered_desc = {
							trigger = { scope:stress_pitch = flag:athletic }
							desc = coronation_banquet.0051.desc.athletic
						}
					}
				}
			}
			# Nope? Right, random roll it.
			desc = {
				random_valid = {
					# Diligent
					triggered_desc = {
						trigger = {
							scope:dolt = { has_trait = diligent }
						}
						desc = coronation_banquet.0051.desc.diligent
					}
					# Patient
					triggered_desc = {
						trigger = {
							scope:dolt = { has_trait = patient }
						}
						desc = coronation_banquet.0051.desc.patient
					}
					# Impatient
					triggered_desc = {
						trigger = {
							scope:dolt = { has_trait = impatient }
						}
						desc = coronation_banquet.0051.desc.impatient
					}
					# Arrogant
					triggered_desc = {
						trigger = {
							scope:dolt = { has_trait = arrogant }
						}
						desc = coronation_banquet.0051.desc.arrogant
					}
					# Arbitrary
					triggered_desc = {
						trigger = {
							scope:dolt = { has_trait = arbitrary }
						}
						desc = coronation_banquet.0051.desc.arbitrary
					}
					# Zealous
					triggered_desc = {
						trigger = {
							scope:dolt = { coronation_banquet_0051_boring_zeal_trigger = yes }
						}
						desc = coronation_banquet.0051.desc.zealous
					}
					# Fickle
					triggered_desc = {
						trigger = {
							scope:dolt = { has_trait = fickle }
						}
						desc = coronation_banquet.0051.desc.fickle
					}
					# Vengeful
					triggered_desc = {
						trigger = {
							scope:dolt = { has_trait = vengeful }
						}
						desc = coronation_banquet.0051.desc.vengeful
					}
					# Poet
					triggered_desc = {
						trigger = {
							scope:dolt = { has_trait = poet }
						}
						desc = coronation_banquet.0051.desc.poet
					}
				}
			}
		}
		desc = coronation_banquet.0051.desc.outro
	}
	theme = feast_activity
	left_portrait = {
		character = root
		animation = boredom
	}
	right_portrait = {
		character = scope:dolt
		animation = admiration
	}

	cooldown = { years = 1 }

	trigger = {
		NOT = { has_character_flag = awaiting_coronation_banquet_0051_results_flag }
		scope:activity = {
			any_attending_character = { coronation_banquet_0051_dolt_trigger = yes }
		}
	}

	immediate = {
		# We need root saved for dumb loc stuff.
		save_scope_as = reference
		# Right, let's sort our dolt.
		## First, grab everyone applicable.
		scope:activity = {
			every_attending_character = {
				limit = { coronation_banquet_0051_dolt_trigger = yes }
				add_to_list = potential_boring_characters_list
			}
		}
		## Then sort through them to find the _least_ interesting person.
		ordered_in_list = {
			list = potential_boring_characters_list
			order_by = {
				# Grab the two major talky skills.
				value = diplomacy
				add = learning
				# Now, invert them to rank the chars with the worst scores highest.
				multiply = -1
			}
			save_scope_as = dolt
		}
		# Ok, now that we've got our dolt, let's check to see if they're going to pitch a stress-based endeavour to you.
		scope:dolt = {
			# We don't bother to if statement this, because we're going to random roll with a chance of nothing anyway, so we may as well just put the triggers right on the random_list entries.
			random_list = {
				# Drunkard
				20 = {
					trigger = { has_trait = drunkard }
					# Weight up a bit if root shares this quality.
					modifier = {
						add = 20
						root = { has_trait = drunkard }
					}
					save_scope_value_as = {
						name = stress_pitch
						value = flag:drunkard
					}
				}
				# Hashishiyah
				20 = {
					trigger = { has_trait = hashishiyah }
					# Weight up a bit if root shares this quality.
					modifier = {
						add = 20
						root = { has_trait = hashishiyah }
					}
					save_scope_value_as = {
						name = stress_pitch
						value = flag:hashishiyah
					}
				}
				# Rakish
				20 = {
					trigger = { coronation_banquet_0051_legal_rake_trigger = yes }
					# Weight up a bit if root shares this quality.
					modifier = {
						add = 20
						root = { coronation_banquet_0051_legal_rake_trigger = yes }
					}
					save_scope_value_as = {
						name = stress_pitch
						value = flag:rakish
					}
				}
				# Reclusive
				20 = {
					trigger = { has_trait = reclusive }
					# Weight up a bit if root shares this quality.
					modifier = {
						add = 20
						root = { has_trait = reclusive }
					}
					save_scope_value_as = {
						name = stress_pitch
						value = flag:reclusive
					}
				}
				# Flagellant
				20 = {
					trigger = { has_trait = flagellant }
					# Weight up a bit if root shares this quality.
					modifier = {
						add = 20
						root = { has_trait = flagellant }
					}
					save_scope_value_as = {
						name = stress_pitch
						value = flag:flagellant
					}
				}
				# Profligate
				20 = {
					trigger = { coronation_banquet_0051_foolish_profligate_trigger = yes }
					# Weight up a bit if root shares this quality.
					modifier = {
						add = 20
						root = { coronation_banquet_0051_foolish_profligate_trigger = yes }
					}
					save_scope_value_as = {
						name = stress_pitch
						value = flag:profligate
					}
				}
				# Journaller
				20 = {
					trigger = { has_trait = journaller }
					# Weight up a bit if root shares this quality.
					modifier = {
						add = 20
						root = { has_trait = journaller }
					}
					save_scope_value_as = {
						name = stress_pitch
						value = flag:journaller
					}
				}
				# Athletic
				20 = {
					trigger = { has_trait = athletic }
					# Weight up a bit if root shares this quality.
					modifier = {
						add = 20
						root = { has_trait = athletic }
					}
					save_scope_value_as = {
						name = stress_pitch
						value = flag:athletic
					}
				}
				# No stress coping pitch, so no effect.
				## If they've got 1 stress trait, we want a roughly 20% chance they'll bring that up, so we weight at 20:80.
				### If they have multiple stress traits, the numbers'll get progressively more stacked in favour of pitching such, but uhhh... clearly they have something to get off their chests.
				80 = {
					# We still need to check for the presence of some other boring quality so that we can fetch a desc key.
					trigger = {
						OR = {
							has_trait = diligent
							has_trait = patient
							has_trait = impatient
							has_trait = arrogant
							has_trait = arbitrary
							coronation_banquet_0051_boring_zeal_trigger = yes
							has_trait = fickle
							has_trait = vengeful
							has_trait = poet
						}
					}
				}
			}
		}
	}

	# Gently exit the conversation.
	option = {
		name = coronation_banquet.0051.a

		# Let's give this a go!
		duel = {
			skill = diplomacy
			value = high_skill_rating
			# You extricate yourself.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				min = 5
				desc = coronation_banquet.0051.a.tt.success
				send_interface_toast = {
					title = coronation_banquet.0051.a.tt.success
					left_icon = scope:dolt
					add_diplomacy_lifestyle_perk_points = 1
				}
			}
			# It never ends.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				min = 10
				desc = coronation_banquet.0051.a.tt.failure
				send_interface_toast = {
					title = coronation_banquet.0051.a.tt.failure
					left_icon = scope:dolt
					reverse_add_opinion = {
						target = scope:dolt
						modifier = friendliness_opinion
						opinion = 50
					}
				}
			}
		}

		coronation_banquet_0051_compassion_to_dolt_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_compassion = 1
				ai_sociability = -0.25
			}
		}
	}

	# Wrathful: By all the denizens of NegativeAfterLife, will you cease this prattle?
	option = {
		name = coronation_banquet.0051.b
		trigger = { has_trait = wrathful }
		trait = wrathful

		# Your firmness is notable.
		add_prestige = medium_prestige_gain
		# Scope:dolt is hurt.
		reverse_add_opinion = {
			target = scope:dolt
			modifier = hurt_opinion
			opinion = -40
		}
		# Every wrathful character at the gathering sees your point.
		scope:activity = {
			every_attending_character = {
				limit = {
					has_trait = wrathful
					NOR = {
						this = root
						this = scope:dolt
					}
				}
				custom = coronation_banquet.0051.b.custom.every_wrathful_guest
				add_opinion = {
					target = root
					modifier = respect_opinion
					opinion = 20
				}
			}
		}

		stress_impact = {
			callous = minor_stress_impact_loss
			sadistic = minor_stress_impact_loss
			impatient = minor_stress_impact_loss
			wrathful = major_stress_impact_loss
			patient = miniscule_stress_impact_gain
			compassionate = miniscule_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_compassion = -0.5
			}
		}
	}

	# Shut. Up.
	option = {
		name = coronation_banquet.0051.c
		trigger = {
			NOT = { has_trait = wrathful }
		}

		# Your firmness is notable.
		add_character_modifier = {
			modifier = ep2_wedding_ewan_0051_snooty_modifier
			years = 15
		}
		# Scope:dolt is hurt.
		reverse_add_opinion = {
			target = scope:dolt
			modifier = hurt_opinion
			opinion = -20
		}

		stress_impact = {
			callous = minor_stress_impact_loss
			sadistic = minor_stress_impact_loss
			impatient = minor_stress_impact_loss
			compassionate = miniscule_stress_impact_gain
			patient = miniscule_stress_impact_gain
			calm = miniscule_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_compassion = -0.5
			}
		}
	}

	# Lazy: fall asleep.
	option = {
		name = coronation_banquet.0051.d
		trigger = { has_trait = lazy }
		trait = lazy

		# Scope:dolt is hurt.
		add_opinion = {
			target = scope:dolt
			modifier = hurt_opinion
			opinion = -30
		}
		# Every lazy character at the gathering respects the hustle.
		scope:activity = {
			every_attending_character = {
				limit = {
					has_trait = lazy
					NOR = {
						this = root
						this = scope:dolt
					}
				}
				custom = coronation_banquet.0051.d.custom.every_lazy_guest
				reverse_add_opinion = {
					target = root
					modifier = respect_opinion
					opinion = 30
				}
			}
		}

		# Lotta stress loss for this one too.
		stress_impact = {
			lazy = major_stress_impact_loss
			compassionate = miniscule_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_energy = -1
			}
		}
	}

	# Drunkard: you buy a pub together.
	option = {
		name = coronation_banquet.0051.e
		trigger = {
			coronation_banquet_0051_interested_stress_pitch_trait_drunkard_trigger = yes
			NOT = { has_trait = lazy }
		}
		trait = drunkard

		# Roll the effect.
		coronation_banquet_0051_start_business_together_effect = yes

		coronation_banquet_0051_stress_trait_stress_effect = { STRESS_TRAIT = drunkard }
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 1
				ai_rationality = -0.75
			}
		}
	}

	# Hashishiyah: you buy a cake shop together.
	option = {
		name = coronation_banquet.0051.f
		trigger = {
			coronation_banquet_0051_interested_stress_pitch_trait_hashishiyah_trigger = yes
			NOT = { has_trait = lazy }
		}
		trait = hashishiyah

		# Roll the effect.
		coronation_banquet_0051_start_business_together_effect = yes

		coronation_banquet_0051_stress_trait_stress_effect = { STRESS_TRAIT = hashishiyah }
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 1
				ai_rationality = -0.75
			}
		}
	}

	# Rakish: you start a brothel together.
	option = {
		name = coronation_banquet.0051.g
		trigger = {
			coronation_banquet_0051_interested_stress_pitch_trait_rakish_trigger = yes
			NOT = { has_trait = lazy }
		}
		trait = rakish

		# Roll the effect.
		coronation_banquet_0051_start_business_together_effect = yes

		coronation_banquet_0051_stress_trait_stress_effect = { STRESS_TRAIT = rakish }
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 1
				ai_rationality = -0.75
			}
		}
	}

	# Reclusive: you start a private retreat together.
	option = {
		name = coronation_banquet.0051.h
		trigger = {
			coronation_banquet_0051_interested_stress_pitch_trait_reclusive_trigger = yes
			NOT = { has_trait = lazy }
		}
		trait = reclusive

		# Roll the effect.
		coronation_banquet_0051_start_business_together_effect = yes

		coronation_banquet_0051_stress_trait_stress_effect = { STRESS_TRAIT = reclusive }
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 1
				ai_rationality = -0.75
			}
		}
	}

	# Flagellant: you start a... whipping post field together. Apparently.
	option = {
		name = coronation_banquet.0051.i
		trigger = {
			coronation_banquet_0051_interested_stress_pitch_trait_flagellant_trigger = yes
			NOT = { has_trait = lazy }
		}
		trait = flagellant
		trait = deviant
		# Account for secret deviants.
		if = {
			limit = {
				any_secret = { secret_type = secret_deviant }
			}
			random_secret = {
				limit = { secret_type = secret_deviant }
				save_scope_as = secret
			}
			custom_tooltip = coronation_banquet.0051.i.tt.deviant
		}

		# Roll the effect.
		coronation_banquet_0051_start_business_together_effect = yes

		coronation_banquet_0051_stress_trait_stress_effect = { STRESS_TRAIT = flagellant }
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 1
				ai_rationality = -0.75
			}
		}
	}

	# Profligate: you go in on a scam together, but will generally get scammed.
	option = {
		name = coronation_banquet.0051.j
		trigger = {
			coronation_banquet_0051_interested_stress_pitch_trait_profligate_trigger = yes
			NOT = { has_trait = lazy }
		}
		trait = profligate

		# Roll the effect.
		coronation_banquet_0051_start_business_together_effect = yes

		coronation_banquet_0051_stress_trait_stress_effect = { STRESS_TRAIT = profligate }
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 1
				ai_rationality = -0.75
			}
		}
	}

	# Journaller: you start a library/scriptorium together.
	option = {
		name = coronation_banquet.0051.k
		trigger = {
			coronation_banquet_0051_interested_stress_pitch_trait_journaller_trigger = yes
			NOT = { has_trait = lazy }
		}
		trait = journaller

		# Roll the effect.
		coronation_banquet_0051_start_business_together_effect = yes

		coronation_banquet_0051_stress_trait_stress_effect = { STRESS_TRAIT = journaller }
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 1
				ai_rationality = -0.75
			}
		}
	}

	# Athletic: you start a gym together.
	option = {
		name = coronation_banquet.0051.l
		trigger = {
			coronation_banquet_0051_interested_stress_pitch_trait_athletic_trigger = yes
			NOT = { has_trait = lazy }
		}
		trait = athletic

		# Roll the effect.
		coronation_banquet_0051_start_business_together_effect = yes

		coronation_banquet_0051_stress_trait_stress_effect = { STRESS_TRAIT = athletic }
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 1
				ai_rationality = -0.75
			}
		}
	}

	# That's... very interesting...
	option = {
		name = coronation_banquet.0051.m
		trigger = {
			NOR = {
				has_trait = lazy
				coronation_banquet_0051_interested_stress_pitch_trait_drunkard_trigger = yes
				coronation_banquet_0051_interested_stress_pitch_trait_hashishiyah_trigger = yes
				coronation_banquet_0051_interested_stress_pitch_trait_rakish_trigger = yes
				coronation_banquet_0051_interested_stress_pitch_trait_reclusive_trigger = yes
				coronation_banquet_0051_interested_stress_pitch_trait_flagellant_trigger = yes
				coronation_banquet_0051_interested_stress_pitch_trait_profligate_trigger = yes
				coronation_banquet_0051_interested_stress_pitch_trait_journaller_trigger = yes
				coronation_banquet_0051_interested_stress_pitch_trait_athletic_trigger = yes
			}
		}

		# Try to play along as best you can.
		duel = {
			skill = intrigue
			value = extremely_high_skill_rating
			# You pull off your bold-faced lie.
			40 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				min = 5
				desc = coronation_banquet.0051.m.tt.success
				send_interface_toast = {
					title = coronation_banquet.0051.m.tt.success
					left_icon = scope:dolt
					add_intrigue_skill = 1
				}
			}
			# Some people appreciate your tact.
			60 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				min = 10
				desc = coronation_banquet.0051.m.tt.failure
				send_interface_toast = {
					title = coronation_banquet.0051.m.tt.failure
					left_icon = scope:dolt
					add_character_modifier = {
						modifier = ep2_wedding_ewan_0051_approachable_modifier
						years = 15
					}
				}
			}
		}

		coronation_banquet_0051_compassion_to_dolt_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_compassion = 0.5
				ai_sociability = 0.5
			}
		}
	}

	# Grin and bear it.
	option = {
		name = coronation_banquet.0051.n
		flavor = coronation_banquet.0051.n.tt

		# They appreciate you listening.
		reverse_add_opinion = {
			target = scope:dolt
			modifier = friendliness_opinion
			opinion = 40
		}
		# Try to give a hook - they're likely uninteresting (y'know, inherently), which is why we put this in the opt-out.
		if = {
			limit = {
				can_add_hook = {
					target = scope:dolt
					type = favor_hook
				}
			}
			add_hook = {
				target = scope:dolt
				type = favor_hook
			}
		}

		coronation_banquet_0051_compassion_to_dolt_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_compassion = 0.5
				ai_boldness = -1
			}
		}
	}
}

#	Investment success — your venture turned out to be worthwhile after all!
coronation_banquet.0052 = {
	type = character_event
	title = coronation_banquet.0052.t
	desc = {
		desc = coronation_banquet.0052.desc.intro
		# Is scope:dolt around?
		first_valid = {
			# Scope:dolt is dead.
			triggered_desc = {
				trigger = {
					scope:dolt = { is_alive = no }
				}
				desc = coronation_banquet.0052.desc.dolt_availability.dead
			}
			# Scope:dolt is imprisoned.
			triggered_desc = {
				trigger = {
					scope:dolt = { is_imprisoned = yes }
				}
				desc = coronation_banquet.0052.desc.dolt_availability.imprisoned
			}
			# Scope:dolt is available.
			desc = coronation_banquet.0052.desc.dolt_availability.free
		}
		desc = coronation_banquet.0052.desc.midtro
		# And what was your business again?
		first_valid = {
			# Drunkard
			triggered_desc = {
				trigger = { scope:stress_pitch = flag:drunkard }
				desc = coronation_banquet.0052.desc.drunkard
			}
			# Hashishiyah
			triggered_desc = {
				trigger = { scope:stress_pitch = flag:hashishiyah }
				desc = coronation_banquet.0052.desc.hashishiyah
			}
			# Rakish
			triggered_desc = {
				trigger = { scope:stress_pitch = flag:rakish }
				desc = coronation_banquet.0052.desc.rakish
			}
			# Reclusive
			triggered_desc = {
				trigger = { scope:stress_pitch = flag:reclusive }
				desc = coronation_banquet.0052.desc.reclusive
			}
			# Flagellant
			triggered_desc = {
				trigger = { scope:stress_pitch = flag:flagellant }
				desc = coronation_banquet.0052.desc.flagellant
			}
			# Profligate
			triggered_desc = {
				trigger = { scope:stress_pitch = flag:profligate }
				desc = coronation_banquet.0052.desc.profligate
			}
			# Journaller
			triggered_desc = {
				trigger = { scope:stress_pitch = flag:journaller }
				desc = coronation_banquet.0052.desc.journaller
			}
			# Athletic
			triggered_desc = {
				trigger = { scope:stress_pitch = flag:athletic }
				desc = coronation_banquet.0052.desc.athletic
			}
		}
		# Who's sending the letter?
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:dolt = {
						OR = {
							is_alive = no
							is_imprisoned = yes
						}
					}
				}
				desc = coronation_banquet.0052.desc.outro.dolt_unavailable
			}
			desc = coronation_banquet.0052.desc.outro
		}
	}
	theme = feast_activity
	left_portrait = {
		character = root
		animation = disbelief
	}
	right_portrait = {
		character = scope:dolt
		animation = happiness
	}
	override_background = { reference = tavern }

	trigger = {
		# Standard checks.
		is_available_adult = yes
	}

	on_trigger_fail = {
		trigger_event = {
			id = coronation_banquet.0052
			years = 1
		}
	}

	immediate = {
		# Clear the flag.
		remove_character_flag = awaiting_coronation_banquet_0051_results_flag
		# Cash for both of you!
		add_gold = massive_gold_value
		scope:dolt = {
			if = {
				limit = { is_alive = yes }
				add_gold = @coronation_banquet_0052_dolt_pay_out_value
			}
		}
		# Faith concerns with these iniquities.
		## We don't take off _too_ much for any of these — we're just trying to note them for responsiveness.
		### Unless you're HoF, in which case, that's a bit of a downer.
		## Some faiths would frown on a pub.
		if = {
			limit = {
				scope:stress_pitch = flag:drunkard
				faith_forbids_alcohol_trigger = yes
			}
			coronation_banquet_0051_business_piety_consequences_effect = yes
		}
		## Some faiths frown on sloth.
		else_if = {
			limit = {
				scope:stress_pitch = flag:hashishiyah
				# Diligent virtue excluded because you can definitely do work _and_ have a hashish indulging habit, but it's hard to see lots of people _on_ hashish as anything but a den of folks lazing around on cushions chatting about nothing in particular. The horror.
				faith = { trait_is_sin = lazy }
			}
			coronation_banquet_0051_business_piety_consequences_effect = yes
		}
		## Some faiths frown on lust.
		else_if = {
			limit = {
				scope:stress_pitch = flag:rakish
				faith = {
					OR = {
						trait_is_sin = lustful
						trait_is_virtue = chaste
					}
				}
			}
			coronation_banquet_0051_business_piety_consequences_effect = yes
		}
		## Some faiths frown on isolation.
		else_if = {
			limit = {
				scope:stress_pitch = flag:reclusive
				faith = {
					OR = {
						trait_is_sin = shy
						trait_is_virtue = gregarious
					}
				}
			}
			coronation_banquet_0051_business_piety_consequences_effect = yes
		}
		## Some faiths frown on boondoggles.
		else_if = {
			limit = {
				scope:stress_pitch = flag:profligate
				faith = { trait_is_virtue = greedy }
			}
			coronation_banquet_0051_business_piety_consequences_effect = yes
		}
		## Some faiths frown on non-gamer activities.
		else_if = {
			limit = {
				scope:stress_pitch = flag:athletic
				faith = { trait_is_virtue = lazy }
			}
			coronation_banquet_0051_business_piety_consequences_effect = yes
		}
	}

	# Greedy/Callous/Sadistic/Arbitrary: take scope:dolt's gold too.
	option = {
		name = coronation_banquet.0052.a
		trigger = {
			# You have some sway over scope:dolt.
			scope:dolt = {
				is_alive = yes
				any_liege_or_above = { this = root }
			}
			OR = {
				has_trait = greedy
				has_trait = callous
				has_trait = sadistic
				has_trait = arbitrary
			}
		}
		trait = greedy
		trait = callous
		trait = sadistic
		trait = arbitrary

		scope:dolt = {
			# Forcibly transfer the gold.
			pay_short_term_gold = {
				target = root
				gold = @coronation_banquet_0052_dolt_pay_out_value
			}
			# But be mad about it.
			add_opinion = {
				target = root
				modifier = cruelty_opinion
				opinion = -50
			}
		}

		stress_impact = {
			greedy = minor_stress_impact_loss
			callous = miniscule_stress_impact_loss
			sadistic = miniscule_stress_impact_loss
			arbitrary = miniscule_stress_impact_loss
			generous = medium_stress_impact_gain
			compassionate = medium_stress_impact_gain
			just = medium_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_greed = 1
				ai_honor = -1
			}
		}
	}

	# Arrogant: Of course, I'm a business genius.
	option = {
		name = coronation_banquet.0052.b
		trigger = { has_trait = arrogant }
		trait = arrogant

		# Scope:dolt appreciates that you believed in HerHim.
		scope:dolt = {
			if = {
				limit = { is_alive = yes }
				add_opinion = {
					target = root
					modifier = grateful_opinion
					opinion = 50
				}
			}
		}

		stress_impact = { arrogant = massive_stress_impact_loss }
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_honor = 1
				ai_greed = -1
			}
		}
	}

	# An unexpectedly pleasant surprise!
	option = {
		name = coronation_banquet.0052.c
		trigger = {
			NOT = { has_trait = arrogant }
		}

		# Scope:dolt appreciates that you believed in HerHim.
		scope:dolt = {
			if = {
				limit = { is_alive = yes }
				add_opinion = {
					target = root
					modifier = grateful_opinion
					opinion = 50
				}
			}
		}

		# No stress for notification option.
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_honor = 1
				ai_greed = -1
			}
		}
	}
}

#	Investment failure — semi-predictably, your venture dun goofed.
coronation_banquet.0053 = {
	type = character_event
	title = coronation_banquet.0053.t
	desc = {
		desc = coronation_banquet.0053.desc.intro
		# Is scope:dolt around?
		first_valid = {
			# Scope:dolt is dead.
			triggered_desc = {
				trigger = {
					scope:dolt = { is_alive = no }
				}
				desc = coronation_banquet.0053.desc.dolt_availability.dead
			}
			# Scope:dolt is imprisoned.
			triggered_desc = {
				trigger = {
					scope:dolt = { is_imprisoned = yes }
				}
				desc = coronation_banquet.0053.desc.dolt_availability.imprisoned
			}
			# Scope:dolt is available.
			desc = coronation_banquet.0053.desc.dolt_availability.free
		}
		desc = coronation_banquet.0053.desc.midtro
		# And what was your business again?
		first_valid = {
			# Drunkard
			triggered_desc = {
				trigger = { scope:stress_pitch = flag:drunkard }
				desc = coronation_banquet.0053.desc.drunkard
			}
			# Hashishiyah
			triggered_desc = {
				trigger = { scope:stress_pitch = flag:hashishiyah }
				desc = coronation_banquet.0053.desc.hashishiyah
			}
			# Rakish
			triggered_desc = {
				trigger = { scope:stress_pitch = flag:rakish }
				desc = coronation_banquet.0053.desc.rakish
			}
			# Reclusive
			triggered_desc = {
				trigger = { scope:stress_pitch = flag:reclusive }
				desc = coronation_banquet.0053.desc.reclusive
			}
			# Flagellant
			triggered_desc = {
				trigger = { scope:stress_pitch = flag:flagellant }
				desc = coronation_banquet.0053.desc.flagellant
			}
			# Profligate
			triggered_desc = {
				trigger = { scope:stress_pitch = flag:profligate }
				desc = coronation_banquet.0053.desc.profligate
			}
			# Journaller
			triggered_desc = {
				trigger = { scope:stress_pitch = flag:journaller }
				desc = coronation_banquet.0053.desc.journaller
			}
			# Athletic
			triggered_desc = {
				trigger = { scope:stress_pitch = flag:athletic }
				desc = coronation_banquet.0053.desc.athletic
			}
		}
		desc = coronation_banquet.0053.desc.outro
	}
	theme = feast_activity
	left_portrait = {
		character = root
		animation = disapproval
	}
	right_portrait = {
		character = scope:dolt
		animation = shame
	}
	override_background = { reference = tavern }

	trigger = {
		# Standard checks.
		is_available_adult = yes
	}

	on_trigger_fail = {
		trigger_event = {
			id = coronation_banquet.0053
			years = 1
		}
	}

	immediate = {
		# Clear the flag.
		remove_character_flag = awaiting_coronation_banquet_0051_results_flag
		# Troublesome to be reminded of.
		add_stress = medium_stress_gain
		scope:dolt = {
			if = {
				limit = { is_ai = yes }
				add_stress = massive_stress_gain
			}
		}
	}

	# Bring me that idiot in shackles!
	option = {
		name = {
			trigger = {
				scope:dolt = { is_alive = yes }
			}
			text = coronation_banquet.0053.a.alive
		}
		name = {
			trigger = {
				scope:dolt = { is_alive = no }
			}
			text = coronation_banquet.0053.a.dead
		}

		scope:dolt = {
			if = {
				limit = { is_alive = yes }
				# If you can imprison scope:dolt, you do.
				if = {
					limit = {
						is_imprisoned = no
						any_liege_or_above = { this = root }
					}
					rightfully_imprison_character_effect = {
						TARGET = scope:dolt
						IMPRISONER = root
					}
				}
				# Plus they're upset with your lack of understanding.
				add_opinion = {
					target = root
					modifier = cruelty_opinion
					opinion = -30
				}
			}
		}

		stress_impact = {
			vengeful = major_stress_impact_loss
			wrathful = miniscule_stress_impact_loss
			forgiving = medium_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_vengefulness = 1
				ai_compassion = -1
			}
		}
	}

	# This was probably to be expected.
	option = {
		name = coronation_banquet.0053.b

		# They're grateful for your understanding.
		scope:dolt = {
			if = {
				limit = { is_alive = yes }
				add_opinion = {
					target = root
					modifier = kindness_opinion
					opinion = 30
				}
			}
		}

		stress_impact = {
			forgiving = minor_stress_impact_loss
			wrathful = minor_stress_impact_gain
			vengeful = medium_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_compassion = 1
				ai_vengefulness = -1
			}
		}
	}
}

##################################################
# Oath in Moment
# by Ewan Cowhig Croft
# 0071 - 0080
##################################################

#	Your liege offers you a favour for your support.
coronation_banquet.0071 = {
	type = character_event
	title = coronation_banquet.0071.t
	desc = coronation_banquet.0071.desc
	theme = feast_activity
	left_portrait = {
		character = root
		animation = personality_bold
	}
	right_portrait = {
		character = scope:liege
		animation = admiration
	}

	trigger = {
		# Vassals only please.
		is_independent_ruler = no
		# Decent prestige level, as you can't be a nobody.
		prestige_level >= medium_prestige_level
		# Dynastic cooldowns.
		trigger_if = {
			limit = { exists = dynasty }
			dynasty = {
				OR = {
					# AI cooldown.
					AND = {
						root = { is_ai = yes }
						NOT = { has_variable = coronation_banquet_0071_ai_cooldown }
					}
					# Player cooldown.
					AND = {
						root = { is_ai = no }
						NOT = { has_variable = coronation_banquet_0071_player_cooldown }
					}
				}
			}
		}
		# If you're factioning, they won't give ye diddly.
		NOR = {
			is_a_faction_leader = yes
			is_a_faction_member = yes
		}
		# Must have a liege who...
		liege ?= {
			NOR = {
				has_imprisonment_reason = root
				has_banish_reason = root
				has_execute_reason = root
			}
			# ... has a prestige level no higher than yours.
			prestige_level <= root.prestige_level
			# ... really likes you.
			OR = {
				opinion = {
					target = root
					value >= 100
				}
				AND = {
					dynasty ?= { has_dynasty_perk = ep2_activities_legacy_2 }
					opinion = {
						target = root
						value >= 50
					}
				}
				has_trait = trusting
			}
			# ... juuuust let's double-check you haven't managed this whilst having a bad relationship.
			NOT = {
				has_any_bad_relationship_with_character_trigger = { CHARACTER = root }
			}
			# ... and is an AI.
			is_ai = yes
			# Plus, filter out stuff that'd look real weird.
			NOR = {
				# No crime reasons.
				has_imprisonment_reason = root
				has_banish_reason = root
				has_revoke_title_reason = root
				has_execute_reason = root
				has_divorce_reason = root
				# No terrible opinions you might've overridden.
				has_any_major_negative_opinion_against_character_trigger = { CHARACTER = root }
				# Paranoid lieges don't make themselves this vulnerable.
				has_trait = paranoid
			}
		}
		# No use if you already have a strong hook on 'em.
		NOT = { has_strong_hook = liege }
	}

	weight_multiplier = {
		base = 1

		# Weight up for the dynasty legacy that generally enables this.
		modifier = {
			# This number is deliberately high — it brings it up to about the standard weighting in the on_action, going from 1 to 100.
			add = 99
			dynasty ?= { has_dynasty_perk = ep2_activities_legacy_2 }
		}
	}

	immediate = {
		# Grab the liege immediately for mildly easier loc - we don't worry about a scripted trigger because we only have one liege who can have passed this gate.
		liege = { save_scope_as = liege }
		# We don't want to see this again for a century or so.
		if = {
			limit = { exists = dynasty }
			# AI get one cooldown...
			if = {
				limit = { is_ai = yes }
				set_variable = {
					name = coronation_banquet_0071_ai_cooldown
					value = yes
					years = 100
				}
			}
			# ... and the player gets another, so that the AI doesn't block them.
			set_variable = {
				name = coronation_banquet_0071_player_cooldown
				value = yes
				years = 100
			}
		}
	}

	# Sounds like a fair trade to me!
	option = {
		name = coronation_banquet.0071.a

		# You get your hook.
		add_hook = {
			type = liege_favour_strong_hook
			target = scope:liege
		}
		# Liege gains prestige!
		scope:liege = {
			add_prestige = major_prestige_gain
			add_opinion = {
				target = root
				modifier = grateful_opinion
				opinion = 30
			}
		}

		stress_impact = {
			humble = major_stress_impact_loss
			arbitrary = minor_stress_impact_gain
			arrogant = minor_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_rationality = 2
				ai_honor = 0.5
			}
		}
	}

	# Thank you, but no thank you.
	option = {
		name = coronation_banquet.0071.b

		# You gain prestige.
		add_prestige = major_prestige_gain
		# Plus dynasty prestige if you're not the same dynasty.
		if = {
			limit = {
				OR = {
					AND = {
						exists = liege.dynasty
						NOT = { dynasty ?= liege.dynasty }
					}
					AND = {
						exists = dynasty
						NOT = { exists = liege.dynasty }
					}
				}
			}
			dynasty = { add_dynasty_prestige = massive_dynasty_prestige_value }
		}
		# Liege loses a little opinion of you.
		reverse_add_opinion = {
			target = scope:liege
			modifier = disappointed_opinion
			opinion = -15
		}

		stress_impact = {
			arbitrary = minor_stress_impact_loss
			arrogant = minor_stress_impact_loss
			humble = medium_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_compassion = -0.5
				ai_energy = -0.75
			}
		}
	}
}

##################################################
# MURDER

##################################################
# Clear your Head
# by Ewan Cowhig Croft
# 0101 - 0110
##################################################

scripted_trigger coronation_events_ewan_0001_has_suitable_active_scheme_trigger = {
	scheme_type = murder
	scheme_target_character = scope:intent_target
}

scripted_effect coronation_events_ewan_0001_kill_intent_target_effect = {
	unknown_murder_effect = {
		VICTIM = scope:intent_target
		MURDERER = root
		REASON = death_mysterious
	}
}

scripted_effect coronation_events_ewan_0001_failure_effect = {
	add_prestige = medium_prestige_loss
	add_secret = {
		type = secret_murder_attempt
		target = scope:intent_target
	}
	reverse_add_opinion = {
		target = scope:intent_target
		modifier = suspicion_opinion
		opinion = -60
	}
}

scripted_effect coronation_events_ewan_0001_attempted_murder_stress_effect = {
	stress_impact = {
		brave = miniscule_stress_impact_loss
		vengeful = miniscule_stress_impact_loss
		lazy = minor_stress_impact_gain
		forgiving = medium_stress_impact_gain
		just = major_stress_impact_gain
		craven = major_stress_impact_gain
	}
}

#	Ambush your target when they go out for a walk.
coronation_banquet.0101 = {
	type = activity_event
	title = coronation_banquet.0101.t
	desc = {
		desc = coronation_banquet.0101.desc.intro
		first_valid = {
			# Push from high places.
			triggered_desc = {
				trigger = { scope:kill_locale = flag:tower }
				desc = coronation_banquet.0101.desc.high_place
			}
			# Drown in body of water.
			triggered_desc = {
				trigger = { scope:kill_locale = flag:water }
				desc = coronation_banquet.0101.desc.water
			}
			# Huck deadly critter.
			triggered_desc = {
				trigger = { scope:kill_locale = flag:critter }
				desc = coronation_banquet.0101.desc.critter
			}
			# Throw sharp rock.
			triggered_desc = {
				trigger = { scope:kill_locale = flag:rock }
				desc = coronation_banquet.0101.desc.rock
			}
		}
		desc = coronation_banquet.0101.desc.outro
	}
	theme = feast_activity
	left_portrait = {
		character = root
		animation = schadenfreude
	}
	right_portrait = {
		character = scope:intent_target
		animation = personality_bold
	}
	override_background = { reference = corridor_night }

	cooldown = { years = 1 }

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	trigger = {
		# Correct intent for vibes time.
		has_activity_intent = murder_attendee_intent
		# Some extra cautious validity checks.
		intent_target ?= {
			is_alive = yes
			NOT = { this = root }
		}
	}

	weight_multiplier = {
		base = 1

		# Some characters are more opportunistic.
		## Vengeful.
		modifier = {
			add = 0.25
			has_trait = vengeful
		}
		## Brave
		modifier = {
			add = 0.25
			has_trait = brave
		}
	}

	immediate = {
		# Nab our intent_target for loc & general ease.
		intent_target = { save_scope_as = intent_target }
		# Determine what our method of murder will be.
		random_list = {
			# Push from high place.
			100 = {
				trigger = {
					location_has_multi_story_buildings_trigger = { LOCATION = scope:activity.activity_location }
				}
				save_scope_value_as = {
					name = kill_locale
					value = flag:tower
				}
			}
			# Push into deep water.
			100 = {
				trigger = {
					scope:activity.activity_location = {
						OR = {
							#AGOT Modified
							#terrain = plains
							#terrain = farmlands
							#terrain = hills
							#terrain = oasis
							#terrain = jungle
							#terrain = forest
							#terrain = taiga
							#terrain = wetlands
							#terrain = steppe
							#terrain = floodplains
							agot_is_plains_terrain = yes
							agot_is_farmlands_terrain = yes
							agot_is_hills_terrain = yes
							agot_is_oasis_terrain = yes
							agot_is_jungle_terrain = yes
							agot_is_forest_terrain = yes
							agot_is_taiga_terrain = yes
							agot_is_wetlands_terrain = yes
							agot_is_steppe_terrain = yes
							agot_is_floodplains_terrain = yes
							agot_is_frozen_flats_terrain = yes
							agot_is_canyon_terrain = yes
							agot_is_cloudforest_terrain = yes
							agot_is_highlands_terrain = yes
							agot_is_taiga_bog_terrain = yes
							agot_is_the_bog_terrain = yes
							agot_is_urban_terrain = yes
							is_riverside_province = yes
							is_coastal = yes
						}
					}
				}
				save_scope_value_as = {
					name = kill_locale
					value = flag:water
				}
			}
			# Throw critter.
			100 = {
				trigger = {
					scope:activity.activity_location = {
						OR = {
							#AGOT Modified
							#terrain = desert
							#terrain = desert_mountains
							#terrain = jungle
							agot_is_desert_terrain = yes
							agot_is_desert_mountains_terrain = yes
							agot_is_jungle_terrain = yes
						}
					}
				}
				save_scope_value_as = {
					name = kill_locale
					value = flag:critter
				}
				set_local_venomous_creature_effect = yes
			}
		}
		# Did we fail to select an option? Hmm, boring locale. Ok, throw a rock.
		if = {
			limit = {
				NOT = { exists = scope:kill_locale }
			}
			save_scope_value_as = {
				name = kill_locale
				value = flag:rock
			}
		}
	}

	# Rolled Tower: firm push.
	option = {
		name = coronation_banquet.0101.a
		trigger = { scope:kill_locale = flag:tower }

		duel = {
			skill = intrigue
			target = scope:intent_target
			# Out they go!
			40 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				min = 5
				feast_events_ewan_0001_weight_down_for_tier_difference_modifier = yes
				feast_events_ewan_0001_weight_up_for_tier_difference_modifier = yes
				desc = coronation_banquet.0101.a.tt.success
				send_interface_toast = {
					title = coronation_banquet.0101.a.tt.success
					left_icon = scope:intent_target
					coronation_events_ewan_0001_kill_intent_target_effect = yes
				}
			}
			# They throw themselves to the side.
			60 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				min = 10
				feast_events_ewan_0001_weight_down_for_bodyguards_modifier = yes
				feast_events_ewan_0001_weight_up_for_bodyguards_modifier = yes
				desc = coronation_banquet.0101.a.tt.failure
				send_interface_toast = {
					title = coronation_banquet.0101.a.tt.failure
					left_icon = scope:intent_target
					coronation_events_ewan_0001_failure_effect = yes
				}
			}
		}

		coronation_events_ewan_0001_attempted_murder_stress_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 1
				ai_honor = -1
			}
		}
	}

	# Rolled Water: sturdy blow & firm push.
	option = {
		name = coronation_banquet.0101.b
		trigger = { scope:kill_locale = flag:water }

		duel = {
			skill = intrigue
			target = scope:intent_target
			# They're out, then they're under.
			40 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				min = 5
				feast_events_ewan_0001_weight_down_for_tier_difference_modifier = yes
				feast_events_ewan_0001_weight_up_for_tier_difference_modifier = yes
				desc = coronation_banquet.0101.b.tt.success
				send_interface_toast = {
					title = coronation_banquet.0101.b.tt.success
					left_icon = scope:intent_target
					coronation_events_ewan_0001_kill_intent_target_effect = yes
				}
			}
			#They go in, but they're still conscious.
			60 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				min = 10
				feast_events_ewan_0001_weight_down_for_bodyguards_modifier = yes
				feast_events_ewan_0001_weight_up_for_bodyguards_modifier = yes
				desc = coronation_banquet.0101.b.tt.failure
				send_interface_toast = {
					title = coronation_banquet.0101.b.tt.failure
					left_icon = scope:intent_target
					coronation_events_ewan_0001_failure_effect = yes
				}
			}
		}

		coronation_events_ewan_0001_attempted_murder_stress_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 1
				ai_honor = -1
			}
		}
	}

	# Rolled deadly critter: huck it.
	option = {
		name = coronation_banquet.0101.c
		trigger = { scope:kill_locale = flag:critter }

		duel = {
			skill = intrigue
			target = scope:intent_target
			# It's on them, and it's attacking.
			40 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				min = 5
				feast_events_ewan_0001_weight_down_for_tier_difference_modifier = yes
				feast_events_ewan_0001_weight_up_for_tier_difference_modifier = yes
				desc = coronation_banquet.0101.c.tt.success
				send_interface_toast = {
					title = coronation_banquet.0101.c.tt.success
					left_icon = scope:intent_target
					coronation_events_ewan_0001_kill_intent_target_effect = yes
				}
			}
			# The critter misses then flees.
			60 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				min = 10
				feast_events_ewan_0001_weight_down_for_bodyguards_modifier = yes
				feast_events_ewan_0001_weight_up_for_bodyguards_modifier = yes
				desc = coronation_banquet.0101.c.tt.failure
				send_interface_toast = {
					title = coronation_banquet.0101.c.tt.failure
					left_icon = scope:intent_target
					coronation_events_ewan_0001_failure_effect = yes
				}
			}
		}

		coronation_events_ewan_0001_attempted_murder_stress_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 1
				ai_honor = -1
			}
		}
	}

	# Fallback/Alt: throw rock.
	option = {
		name = coronation_banquet.0101.d
		trigger = { scope:kill_locale = flag:rock }

		duel = {
			skill = prowess
			value = high_skill_rating
			# You catch them on the temple.
			40 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				min = 5
				feast_events_ewan_0001_weight_down_for_tier_difference_modifier = yes
				feast_events_ewan_0001_weight_up_for_tier_difference_modifier = yes
				desc = coronation_banquet.0101.d.tt.success
				send_interface_toast = {
					title = coronation_banquet.0101.d.tt.success
					left_icon = scope:intent_target
					coronation_events_ewan_0001_kill_intent_target_effect = yes
				}
			}
			# You miss.
			60 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				min = 10
				feast_events_ewan_0001_weight_down_for_bodyguards_modifier = yes
				feast_events_ewan_0001_weight_up_for_bodyguards_modifier = yes
				desc = coronation_banquet.0101.d.tt.failure
				send_interface_toast = {
					title = coronation_banquet.0101.d.tt.failure
					left_icon = scope:intent_target
					coronation_events_ewan_0001_failure_effect = yes
				}
			}
		}

		coronation_events_ewan_0001_attempted_murder_stress_effect = yes
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = -0.5
				ai_honor = -1
			}
		}
	}

	# Simply gather information on HerHis habits and ticks.
	option = {
		name = coronation_banquet.0101.e

		# Do we already have a scheme against them? If so, add the modifier immediately.
		if = {
			limit = {
				any_scheme = { coronation_events_ewan_0001_has_suitable_active_scheme_trigger = yes }
			}
			random_scheme = {
				limit = { coronation_events_ewan_0001_has_suitable_active_scheme_trigger = yes }
				add_scheme_modifier = { type = feast_learnt_habits_modifier }
			}
		}
		# Otherwise, note that we notify them that they'll gain a bonus to murdering this character if they start in the next X years.
		else = {
			# If we've already got someone logged for this, warn that we'll overwrite them.
			if = {
				limit = { has_variable = feast_events_ewan_0001_bonus_value }
				custom_tooltip = coronation_banquet.0101.e.tt.bonus_to_murder_scheme.overwrite
			}
			# Set the variable.
			set_variable = {
				name = feast_events_ewan_0001_bonus_value
				value = scope:intent_target
				years = feast_events_ewan_0001_murder_scheme_bonus_time_to_use_value
			}
			# Inform the player.
			custom_tooltip = coronation_banquet.0101.e.tt.bonus_to_murder_scheme
		}

		stress_impact = {
			patient = miniscule_stress_impact_loss
			craven = miniscule_stress_impact_loss
			brave = minor_stress_impact_gain
			impatient = medium_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_rationality = 1
				ai_boldness = -0.5
			}
		}
	}

	# Go back to the hall and enjoy the feast.
	option = {
		name = coronation_banquet.0101.f

		# Show some face.
		add_prestige = minor_prestige_gain

		stress_impact = {
			craven = miniscule_stress_impact_loss
			just = miniscule_stress_impact_loss
			impatient = minor_stress_impact_gain
			brave = medium_stress_impact_gain
			vengeful = major_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_honor = 2
				ai_energy = -0.5
				ai_boldness = -1
			}
		}
	}
}











##################################################
# SEDUCE

##################################################
# Dinner and a Show
# by Ewan Cowhig Croft
# 0201 - 0210
##################################################

#	Position yourself opposite your intent_target, eat seductively.
##	"Seductively".
coronation_banquet.0201 = {
	type = activity_event
	title = coronation_banquet.0201.t
	desc = {
		desc = coronation_banquet.0201.desc.intro
		random_valid = {
			# Meat-eater options.
			## Snap a leg in tune to a pick-up line.
			triggered_desc = {
				trigger = {
					is_vegetarian_trigger = no
					scope:intent_target = { is_vegetarian_trigger = no }
				}
				desc = coronation_banquet.0201.desc.meat.dramatic_snap
			}
			## Sink your teeth into the succulent flesh.
			triggered_desc = {
				trigger = {
					is_vegetarian_trigger = no
					scope:intent_target = { is_vegetarian_trigger = no }
				}
				desc = coronation_banquet.0201.desc.meat.sink_teeth
			}
			## Lick the sauce off of a leg.
			triggered_desc = {
				trigger = {
					is_vegetarian_trigger = no
					scope:intent_target = { is_vegetarian_trigger = no }
				}
				desc = coronation_banquet.0201.desc.meat.lick
			}
			# Veggie options.
			## Running your finger along the curve of a vegetable.
			triggered_desc = {
				trigger = {
					OR = {
						is_vegetarian_trigger = yes
						scope:intent_target = { is_vegetarian_trigger = yes }
					}
				}
				desc = coronation_banquet.0201.desc.veggie.suggestive_gesture
			}
			## Taking a bite out of an especially juicy tuber.
			triggered_desc = {
				trigger = {
					OR = {
						is_vegetarian_trigger = yes
						scope:intent_target = { is_vegetarian_trigger = yes }
					}
				}
				desc = coronation_banquet.0201.desc.veggie.sink_teeth
			}
			## Let your eyes roll back.
			triggered_desc = {
				trigger = {
					OR = {
						is_vegetarian_trigger = yes
						scope:intent_target = { is_vegetarian_trigger = yes }
					}
				}
				desc = coronation_banquet.0201.desc.veggie.deep_bite
			}
		}
		desc = coronation_banquet.0201.desc.outro
	}
	theme = feast_activity
	left_portrait = {
		character = root
		animation = admiration
	}
	right_portrait = {
		character = scope:intent_target
		animation = shock
	}

	cooldown = { years = 1 }

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	trigger = {
		# Correct intent for vibes time.
		has_activity_intent = woo_attendee_intent
		# Some extra cautious validity checks.
		intent_target ?= {
			is_alive = yes
			NOR = {
				has_relation_lover = root
				this = root
			}
		}
	}

	weight_multiplier = {
		base = 1

		# Some characters are more brazen.
		## Lustful.
		modifier = {
			add = 0.25
			has_trait = lustful
		}
		## Seducer.
		modifier = {
			add = 0.25
			has_trait = seducer
		}
	}

	immediate = {
		# Nab our intent_target for loc & general ease.
		intent_target = { save_scope_as = intent_target }
	}

	# Slurp seductively.
	option = {
		name = coronation_banquet.0201.a

		# Duel to progress lover. We wait a little against to make this not automatically a better shot than seduction schemes.
		duel = {
			skill = intrigue
			target = scope:intent_target
			# Why ROOT.Char.GetFirstName...
			40 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				min = 5
				desc = coronation_banquet.0201.a.tt.success
				send_interface_toast = {
					title = coronation_banquet.0201.a.tt.success
					left_icon = scope:intent_target
					progress_towards_lover_effect = {
						CHARACTER = scope:intent_target
						REASON = seduced_at_feast
						OPINION = default_lover_opinion
					}
					# And a bonkin'.
					hidden_effect = {
						if = {
							limit = { has_relation_lover = scope:intent_target }
							had_sex_with_effect = {
								CHARACTER = scope:intent_target
								PREGNANCY_CHANCE = pregnancy_chance
							}
						}
					}
				}
			}
			# What _are_ you doing?
			60 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				min = 10
				desc = coronation_banquet.0201.a.tt.failure
				send_interface_toast = {
					title = coronation_banquet.0201.a.tt.failure
					left_icon = scope:intent_target
					reverse_add_opinion = {
						target = scope:intent_target
						modifier = disgusted_opinion
						opinion = -35
					}
				}
			}
		}

		stress_impact = {
			lustful = miniscule_stress_impact_loss
			gregarious = miniscule_stress_impact_loss
			shy = medium_stress_impact_gain
			chaste = major_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 1
				# This is, after all, an awkward situation you're putting them in.
				ai_compassion = -0.25
			}
		}
	}

	# Abort: show erudition instead!
	option = {
		name = coronation_banquet.0201.b

		duel = {
			skill = diplomacy
			target = scope:intent_target
			# Quite interesting, quite interesting.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				min = 5
				desc = coronation_banquet.0201.b.tt.success
				send_interface_toast = {
					title = coronation_banquet.0201.b.tt.success
					left_icon = scope:intent_target
					progress_towards_lover_effect = {
						CHARACTER = scope:intent_target
						REASON = seduced_at_feast
						OPINION = default_lover_opinion
					}
					# And a bonkin'.
					hidden_effect = {
						if = {
							limit = { has_relation_lover = scope:intent_target }
							had_sex_with_effect = {
								CHARACTER = scope:intent_target
								PREGNANCY_CHANCE = pregnancy_chance
							}
						}
					}
				}
			}
			# Gods you're dreary.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				min = 10
				desc = coronation_banquet.0201.b.tt.failure
				send_interface_toast = {
					title = coronation_banquet.0201.b.tt.failure
					left_icon = scope:intent_target
					reverse_add_opinion = {
						target = scope:intent_target
						modifier = bored_opinion
						opinion = -20
					}
				}
			}
		}

		stress_impact = {
			craven = miniscule_stress_impact_loss
			diplomat = miniscule_stress_impact_loss
			brave = minor_stress_impact_gain
			lustful = medium_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_rationality = 0.5
				ai_sociability = 0.5
			}
		}
	}

	# This is less... firey than I'd hoped...
	option = {
		name = coronation_banquet.0201.c

		# They're so, so glad you stopped.
		reverse_add_opinion = {
			target = scope:intent_target
			modifier = relieved_opinion
			opinion = 20
		}

		stress_impact = {
			craven = miniscule_stress_impact_loss
			chaste = miniscule_stress_impact_loss
			brave = minor_stress_impact_gain
			lustful = major_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				# It's just mercy.
				ai_compassion = 0.25
				ai_boldness = -0.75
			}
		}
	}
}












##################################################
# BEFRIEND

##################################################
# Stomach Rumbling
# by Ewan Cowhig Croft
# 0401 - 0410
##################################################

#	Bond with your intent_target over the terrible/excellent food.
coronation_banquet.0401 = {
	type = activity_event
	title = coronation_banquet.0401.t
	desc = {
		desc = coronation_banquet.0401.desc.intro
		first_valid = {
			# Scope:intent_target is arrogant or mean.
			triggered_desc = {
				trigger = {
					scope:intent_target = {
						OR = {
							has_trait = arrogant
							has_trait = callous
							has_trait = sadistic
							has_trait = gluttonous
							has_trait = brave
						}
						# Shy bois may be thinking it but they won't say it this openly.
						NOT = { has_trait = shy }
					}
				}
				desc = coronation_banquet.0401.desc.target_personality.flamboyant
			}
			# Scope:intent_target is humble or shy.
			triggered_desc = {
				trigger = {
					scope:intent_target = {
						OR = {
							has_trait = humble
							has_trait = compassionate
							has_trait = shy
							has_trait = temperate
							has_trait = craven
						}
					}
				}
				desc = coronation_banquet.0401.desc.target_personality.sedate
			}
			# Scope:intent_target is anyone else.
			desc = coronation_banquet.0401.desc.target_personality.fallback
		}
	}
	theme = feast_activity
	left_portrait = {
		character = root
		animation = admiration
	}
	right_portrait = {
		character = scope:intent_target
		animation = happiness
	}

	cooldown = { years = 1 }

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	trigger = {
		# Correct intent for vibes time.
		has_activity_intent = befriend_attendee_intent
		# Some extra cautious validity checks.
		intent_target ?= {
			is_alive = yes
			NOR = {
				has_relation_friend = root
				this = root
			}
		}
	}

	weight_multiplier = {
		base = 1

		# Some characters are more foody than others.
		## Gluttonous.
		modifier = {
			add = 0.25
			has_trait = gluttonous
		}
		## Arrogant.
		modifier = {
			add = 0.25
			has_trait = arrogant
		}
	}

	immediate = {
		# Nab our intent_target for loc & general ease.
		intent_target = { save_scope_as = intent_target }
	}

	# Yes, sadly it was just a poor choice, I think.
	option = {
		name = coronation_banquet.0401.a

		duel = {
			skill = diplomacy
			value = medium_skill_rating
			# You bond over the conversation.
			25 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				min = 5
				# Transfer the weight over from the partial success result if we're already potential friends.
				modifier = {
					add = 25
					has_relation_potential_friend = scope:intent_target
				}
				desc = coronation_banquet.0401.a.tt.success
				send_interface_toast = {
					title = coronation_banquet.0401.a.tt.success
					left_icon = scope:intent_target
					set_relation_friend = {
						target = scope:intent_target
						reason = befriended_at_feast
						province = scope:activity.activity_location
					}
				}
			}
			# You make a good impression but don't quite get the whole way.
			25 = {
				# Lock this option off if we're already potential friends.
				trigger = {
					NOT = { has_relation_potential_friend = scope:intent_target }
				}
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				min = 5
				desc = coronation_banquet.0401.a.tt.partial_success
				send_interface_toast = {
					title = coronation_banquet.0401.a.tt.partial_success
					left_icon = scope:intent_target
					set_relation_potential_friend = scope:intent_target
				}
			}
			# They like you, but no more than that.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				min = 10
				desc = coronation_banquet.0401.a.tt.failure
				send_interface_toast = {
					title = coronation_banquet.0401.a.tt.failure
					left_icon = scope:intent_target
					reverse_add_opinion = {
						target = scope:intent_target
						modifier = friendliness_opinion
						opinion = 30
					}
				}
			}
		}

		stress_impact = {
			gregarious = miniscule_stress_impact_loss
			humble = miniscule_stress_impact_loss
			vengeful = minor_stress_impact_gain
			arrogant = minor_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_sociability = 1
				ai_vengefulness = -0.25
			}
		}
	}

	# Host: You. _Do_ realise that this is my feast, yes?
	option = {
		name = coronation_banquet.0401.b
		trigger = { this = scope:activity.activity_host }

		# You shut 'em down quicksharp.
		add_prestige = medium_prestige_gain
		# But they ain't best pleased.
		reverse_add_opinion = {
			target = scope:intent_target
			modifier = overreaction_opinion
			opinion = -10
		}

		stress_impact = {
			arrogant = miniscule_stress_impact_loss
			vengeful = miniscule_stress_impact_loss
			forgiving = minor_stress_impact_gain
			shy = minor_stress_impact_gain
			humble = medium_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_vengefulness = 0.25
				ai_sociability = -0.25
			}
		}
	}

	# Guest: Loudly sing the meal's praises.
	option = {
		name = coronation_banquet.0401.c
		trigger = {
			NOR = {
				this = scope:activity.activity_host
				scope:intent_target = scope:activity.activity_host
			}
		}

		# The host is pleased by your sycophancy.
		add_prestige = minor_prestige_gain
		reverse_add_opinion = {
			target = scope:activity.activity_host
			modifier = pleased_opinion
			opinion = 25
		}
		# But scope:intent_target is a tad upset.
		reverse_add_opinion = {
			target = scope:intent_target
			modifier = annoyed_opinion
			opinion = -10
		}

		stress_impact = {
			arrogant = miniscule_stress_impact_loss
			fickle = miniscule_stress_impact_loss
			shy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_vengefulness = 0.25
				ai_sociability = -0.25
			}
		}
	}

	# Switch the subject to something less contentious.
	option = {
		name = coronation_banquet.0401.d

		# Some consolation prestige for defusing things.
		add_prestige = miniscule_prestige_gain

		stress_impact = {
			humble = miniscule_stress_impact_loss
			compassionate = miniscule_stress_impact_loss
			shy = minor_stress_impact_loss
			arrogant = minor_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_compassion = 1
				ai_vengefulness = -1
			}
		}
	}
}











##################################################
# MISCHIEF

##################################################
# A Mere Jest
# by Ewan Cowhig Croft
# 0601 - 0610
##################################################

scripted_effect coronation_events_ewan_0601_add_or_upgrade_mischievous_effect = {
	# What tier are we trying to skip in at?
	save_scope_value_as = {
		name = modifier_tier
		value = flag:$TIER$
	}
	# Right, now let's apply modifiers.
	## Already has a modifier.
	### t1.
	if = {
		limit = { has_character_modifier = feasts_mischievous_t1_modifier }
		### t1.
		if = {
			limit = { scope:modifier_tier = flag:t1 }
			# Reset the modifier.
			hidden_effect = {
				add_character_modifier = {
					modifier = feasts_mischievous_t1_modifier
					years = @prank_modifiers_default_duration_years_value
				}
			}
			# Some extra stress loss.
			add_stress = medium_stress_loss
		}
		### t2.
		else_if = {
			limit = { scope:modifier_tier = flag:t2 }
			# Remove the old modifier.
			hidden_effect = { remove_character_modifier = feasts_mischievous_t1_modifier }
			# Add the new one.
			add_character_modifier = {
				modifier = feasts_mischievous_t1_modifier
				years = @prank_modifiers_default_duration_years_value
			}
		}
		### t3.
		else_if = {
			limit = { scope:modifier_tier = flag:t3 }
			# Remove the old modifier.
			hidden_effect = { remove_character_modifier = feasts_mischievous_t1_modifier }
			# Add the new one.
			add_character_modifier = {
				modifier = feasts_mischievous_t3_modifier
				years = @prank_modifiers_default_duration_years_value
			}
		}
	}
	### t2.
	else_if = {
		limit = { has_character_modifier = feasts_mischievous_t2_modifier }
		### t1.
		if = {
			limit = { scope:modifier_tier = flag:t1 }
			# No modifier change, just have some extra stress loss.
			add_stress = minor_stress_loss
		}
		### t2.
		else_if = {
			limit = { scope:modifier_tier = flag:t2 }
			# Reset the modifier.
			hidden_effect = {
				add_character_modifier = {
					modifier = feasts_mischievous_t2_modifier
					years = @prank_modifiers_default_duration_years_value
				}
			}
			# Some extra stress loss.
			add_stress = medium_stress_loss
		}
		### t3.
		else_if = {
			limit = { scope:modifier_tier = flag:t3 }
			# Remove the old modifier.
			hidden_effect = { remove_character_modifier = feasts_mischievous_t2_modifier }
			# Add the new one.
			add_character_modifier = {
				modifier = feasts_mischievous_t3_modifier
				years = @prank_modifiers_default_duration_years_value
			}
		}
	}
	### t3.
	else_if = {
		limit = { has_character_modifier = feasts_mischievous_t3_modifier }
		### t1.
		if = {
			limit = { scope:modifier_tier = flag:t1 }
			# No modifier change, just have some extra stress loss.
			add_stress = minor_stress_loss
		}
		### t2.
		else_if = {
			limit = { scope:modifier_tier = flag:t2 }
			# No modifier change, just have some extra stress loss.
			add_stress = minor_stress_loss
		}
		### t3.
		else_if = {
			limit = { scope:modifier_tier = flag:t3 }
			# Reset the modifier.
			hidden_effect = {
				add_character_modifier = {
					modifier = feasts_mischievous_t3_modifier
					years = @prank_modifiers_default_duration_years_value
				}
			}
			# Some extra stress loss.
			add_stress = medium_stress_loss
		}
	}
	## Modifier-free.
	### t1.
	if = {
		limit = { scope:modifier_tier = flag:t1 }
		# Add the new modifier.
		add_character_modifier = {
			modifier = feasts_mischievous_t1_modifier
			years = @prank_modifiers_default_duration_years_value
		}
	}
	### t2.
	else_if = {
		limit = { scope:modifier_tier = flag:t2 }
		# Add the new modifier.
		add_character_modifier = {
			modifier = feasts_mischievous_t2_modifier
			years = @prank_modifiers_default_duration_years_value
		}
	}
	### t3.
	else_if = {
		limit = { scope:modifier_tier = flag:t3 }
		# Add the new modifier.
		add_character_modifier = {
			modifier = feasts_mischievous_t3_modifier
			years = @prank_modifiers_default_duration_years_value
		}
	}
}

#	Stuff a gross item (e.g., dead rat) in a refined foodstuff (e.g., jug of wine).
coronation_banquet.0601 = {
	type = activity_event
	title = coronation_banquet.0601.t
	desc = {
		desc = coronation_banquet.0601.desc.intro
		random_valid = {
			# Vegetarians in CK3 tend to be those with an ethical commitment to protecting life, so we avoid them taking one for a prank.
			triggered_desc = {
				trigger = { is_vegetarian_trigger = yes }
				desc = coronation_banquet.0601.desc.dead_rat
			}
			triggered_desc = {
				trigger = { is_vegetarian_trigger = yes }
				desc = coronation_banquet.0601.desc.humongous_beetle
			}
			triggered_desc = {
				trigger = { is_vegetarian_trigger = yes }
				desc = coronation_banquet.0601.desc.raw_eyeball
			}
			# Everyone can enjoy these, though.
			desc = coronation_banquet.0601.desc.used_sponge
			desc = coronation_banquet.0601.desc.rotten_vegetable
			desc = coronation_banquet.0601.desc.dodgy_mushroom
			desc = coronation_banquet.0601.desc.hank_of_hair
		}
	}
	theme = feast_activity
	left_portrait = {
		character = root
		animation = schadenfreude
	}

	cooldown = { years = 1 }

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	trigger = {
		# Correct intent for vibes time.
		has_activity_intent = sabotage_coronation_intent
	}

	weight_multiplier = {
		base = 1

		# Some characters are more brazen.
		## Arbitrary.
		modifier = {
			add = 0.25
			has_trait = arbitrary
		}
		## Fickle.
		modifier = {
			add = 0.25
			has_trait = fickle
		}
	}

	# Spoil the drinks.
	option = {
		name = coronation_banquet.0601.a

		duel = {
			skill = intrigue
			value = high_skill_rating
			# You're in and out like a shadow.
			35 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				min = 5
				desc = coronation_banquet.0601.a.tt.success
				send_interface_toast = {
					title = coronation_banquet.0601.a.tt.success
					coronation_events_ewan_0601_add_or_upgrade_mischievous_effect = { TIER = t3 }
				}
			}
			# You're caught.
			65 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				min = 10
				desc = coronation_banquet.0601.a.tt.failure
				send_interface_toast = {
					title = coronation_banquet.0601.a.tt.failure
					add_prestige = medium_prestige_loss
				}
			}
		}

		stress_impact = {
			base = massive_stress_impact_loss
			fickle = miniscule_stress_impact_loss
			arbitrary = miniscule_stress_impact_loss
			callous = miniscule_stress_impact_loss
			sadistic = minor_stress_impact_loss
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 2
				ai_compassion = -0.25
			}
		}
	}

	# Spoil a centre dish.
	option = {
		name = coronation_banquet.0601.b

		duel = {
			skill = intrigue
			value = high_skill_rating
			# You're in and out like a shadow.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				min = 5
				desc = coronation_banquet.0601.b.tt.success
				send_interface_toast = {
					title = coronation_banquet.0601.b.tt.success
					coronation_events_ewan_0601_add_or_upgrade_mischievous_effect = { TIER = t2 }
				}
			}
			# You're caught.
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				min = 10
				desc = coronation_banquet.0601.b.tt.failure
				send_interface_toast = {
					title = coronation_banquet.0601.b.tt.failure
					add_prestige = minor_prestige_loss
				}
			}
		}

		stress_impact = {
			base = major_stress_impact_loss
			fickle = miniscule_stress_impact_loss
			arbitrary = miniscule_stress_impact_loss
			callous = miniscule_stress_impact_loss
			sadistic = minor_stress_impact_loss
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 1
				ai_rationality = 0.25
				ai_compassion = -0.25
			}
		}
	}

	# Spoil a side dish.
	option = {
		name = coronation_banquet.0601.c

		duel = {
			skill = prowess
			value = high_skill_rating
			# You're in and out like a shadow.
			60 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				min = 5
				desc = coronation_banquet.0601.c.tt.success
				send_interface_toast = {
					title = coronation_banquet.0601.c.tt.success
					coronation_events_ewan_0601_add_or_upgrade_mischievous_effect = { TIER = t1 }
				}
			}
			# You're caught.
			40 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				min = 10
				desc = coronation_banquet.0601.c.tt.failure
				send_interface_toast = {
					title = coronation_banquet.0601.c.tt.failure
					add_prestige = minor_prestige_loss
				}
			}
		}

		stress_impact = {
			base = major_stress_impact_loss
			fickle = miniscule_stress_impact_loss
			arbitrary = miniscule_stress_impact_loss
			callous = miniscule_stress_impact_loss
			sadistic = minor_stress_impact_loss
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = -0.5
				ai_compassion = -0.25
			}
		}
	}

	# Chicken out.
	option = {
		name = coronation_banquet.0601.d

		# Consolation prestige.
		add_prestige = miniscule_prestige_gain

		stress_impact = {
			craven = miniscule_stress_impact_loss
			brave = minor_stress_impact_gain
			deceitful = medium_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_compassion = 1
				ai_boldness = -1
			}
		}
	}
}











##################################################
# RELAX

##################################################
# A Pleasing Atmosphere
# by Ewan Cowhig Croft
# 0801 - 0810
##################################################

#	Sit back and enjoy the vibes.
coronation_banquet.0801 = {
	type = activity_event
	title = coronation_banquet.0801.t
	desc = {
		desc = coronation_banquet.0801.desc.intro
		random_valid = {
			# Lustful
			triggered_desc = {
				trigger = { has_trait = lustful }
				desc = coronation_banquet.0801.desc.lustful
			}
			# Chaste
			triggered_desc = {
				trigger = { has_trait = chaste }
				desc = coronation_banquet.0801.desc.chaste
			}
			# Gluttonous
			triggered_desc = {
				trigger = { has_trait = gluttonous }
				desc = coronation_banquet.0801.desc.gluttonous
			}
			# Temperate
			triggered_desc = {
				trigger = { has_trait = temperate }
				desc = coronation_banquet.0801.desc.temperate
			}
			# Greedy
			triggered_desc = {
				trigger = { has_trait = greedy }
				desc = coronation_banquet.0801.desc.greedy
			}
			# Generous
			triggered_desc = {
				trigger = { has_trait = generous }
				desc = coronation_banquet.0801.desc.generous
			}
			# Lazy
			triggered_desc = {
				trigger = { has_trait = lazy }
				desc = coronation_banquet.0801.desc.lazy
			}
			# Diligent
			triggered_desc = {
				trigger = { has_trait = diligent }
				desc = coronation_banquet.0801.desc.diligent
			}
			# Wrathful
			triggered_desc = {
				trigger = { has_trait = wrathful }
				desc = coronation_banquet.0801.desc.wrathful
			}
			# Calm
			triggered_desc = {
				trigger = { has_trait = calm }
				desc = coronation_banquet.0801.desc.calm
			}
			# Patient
			triggered_desc = {
				trigger = { has_trait = patient }
				desc = coronation_banquet.0801.desc.patient
			}
			# Impatient
			triggered_desc = {
				trigger = { has_trait = impatient }
				desc = coronation_banquet.0801.desc.impatient
			}
			# Arrogant
			triggered_desc = {
				trigger = { has_trait = arrogant }
				desc = coronation_banquet.0801.desc.arrogant
			}
			# Humble
			triggered_desc = {
				trigger = { has_trait = humble }
				desc = coronation_banquet.0801.desc.humble
			}
			# Deceitful
			triggered_desc = {
				trigger = { has_trait = deceitful }
				desc = coronation_banquet.0801.desc.deceitful
			}
			# Honest
			triggered_desc = {
				trigger = { has_trait = honest }
				desc = coronation_banquet.0801.desc.honest
			}
			# Craven
			triggered_desc = {
				trigger = { has_trait = craven }
				desc = coronation_banquet.0801.desc.craven
			}
			# Brave
			triggered_desc = {
				trigger = { has_trait = brave }
				desc = coronation_banquet.0801.desc.brave
			}
			# Shy
			triggered_desc = {
				trigger = { has_trait = shy }
				desc = coronation_banquet.0801.desc.shy
			}
			# Gregarious
			triggered_desc = {
				trigger = { has_trait = gregarious }
				desc = coronation_banquet.0801.desc.gregarious
			}
			# Ambitious
			triggered_desc = {
				trigger = { has_trait = ambitious }
				desc = coronation_banquet.0801.desc.ambitious
			}
			# Content
			triggered_desc = {
				trigger = { has_trait = content }
				desc = coronation_banquet.0801.desc.content
			}
			# Arbitrary
			triggered_desc = {
				trigger = { has_trait = arbitrary }
				desc = coronation_banquet.0801.desc.arbitrary
			}
			# Just
			triggered_desc = {
				trigger = { has_trait = just }
				desc = coronation_banquet.0801.desc.just
			}
			# Cynical
			triggered_desc = {
				trigger = { has_trait = cynical }
				desc = coronation_banquet.0801.desc.cynical
			}
			# Zealous
			triggered_desc = {
				trigger = { has_trait = zealous }
				desc = coronation_banquet.0801.desc.zealous
			}
			# Paranoid
			triggered_desc = {
				trigger = { has_trait = paranoid }
				desc = coronation_banquet.0801.desc.paranoid
			}
			# Trusting
			triggered_desc = {
				trigger = { has_trait = trusting }
				desc = coronation_banquet.0801.desc.trusting
			}
			# Compassionate
			triggered_desc = {
				trigger = { has_trait = compassionate }
				desc = coronation_banquet.0801.desc.compassionate
			}
			# Callous
			triggered_desc = {
				trigger = { has_trait = callous }
				desc = coronation_banquet.0801.desc.callous
			}
			# Sadistic
			triggered_desc = {
				trigger = { has_trait = sadistic }
				desc = coronation_banquet.0801.desc.sadistic
			}
			# Stubborn
			triggered_desc = {
				trigger = { has_trait = stubborn }
				desc = coronation_banquet.0801.desc.stubborn
			}
			# Fickle
			triggered_desc = {
				trigger = { has_trait = fickle }
				desc = coronation_banquet.0801.desc.fickle
			}
			# Vengeful
			triggered_desc = {
				trigger = { has_trait = vengeful }
				desc = coronation_banquet.0801.desc.vengeful
			}
			# Forgiving
			triggered_desc = {
				trigger = { has_trait = forgiving }
				desc = coronation_banquet.0801.desc.forgiving
			}
		}
		desc = coronation_banquet.0801.desc.outro
	}
	theme = feast_activity
	left_portrait = {
		character = root
		animation = happiness
	}

	center_portrait = {
		character = scope:fellow_guest_1
		animation = toast_goblet
	}

	right_portrait = {
		character = scope:fellow_guest_2
		animation = personality_compassionate
	}

	cooldown = { years = 1 }

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	trigger = {
		# Correct intent for vibes time.
		has_activity_intent = reduce_stress_intent
	}

	immediate = {
		involved_activity = {
			random_attending_character = {
				limit = {
					NOT = { this = root }
					number_of_traits_in_common = {
						target = root
						value >= 1
					}
				}
				save_scope_as = fellow_guest_1
			}
			random_attending_character = {
				limit = {
					NOT = { this = root }
					NAND = {
						exists = scope:fellow_guest_1
						this = scope:fellow_guest_1
					}
					number_of_traits_in_common = {
						target = root
						value >= 1
					}
				}
				save_scope_as = fellow_guest_2
			}
		}
	}

	weight_multiplier = {
		base = 1

		# Some characters have a little more fun.
		## Gregarious.
		modifier = {
			add = 0.25
			has_trait = gregarious
		}
		## Reveller.
		modifier = {
			add = 0.25
			has_trait = lifestyle_reveler
		}
	}

	# Soak in the atmosphere.
	option = {
		name = coronation_banquet.0801.a

		# Effects handled in stress loss.

		stress_impact = { base = massive_stress_impact_loss }
		ai_chance = {
			# Higher base weight because the AI wants to lose stress when it selects this intent.
			base = 100
			ai_value_modifier = {
				# Since you have various reasons for enjoying what you like here, we go for rationality & boldness — sticking with what you like.
				ai_rationality = 0.5
				ai_boldness = -0.5
			}
		}
	}

	# Hang out with those you have something in common with.
	option = {
		name = coronation_banquet.0801.b
		# Make sure some other character does have at least one trait in common with us. Just in case.
		## Haha, they don't know I'm Arbitrary - Stubborn - Shy.
		trigger = {
			scope:activity = {
				any_attending_character = {
					number_of_traits_in_common = {
						target = root
						value >= 1
					}
				}
			}
		}

		scope:activity = {
			every_attending_character = {
				limit = {
					NOT = { this = root }
					number_of_traits_in_common = {
						target = root
						value >= 1
					}
				}
				custom = custom.every_activity_guest_with_trait_in_common
				add_opinion = {
					target = root
					modifier = friendliness_opinion
					opinion = 20
				}
			}
		}

		# Lil bit of stress loss here too, since however you cut it you're hanging out with folks you can get along with.
		stress_impact = {
			base = minor_stress_impact_loss
			gregarious = miniscule_stress_impact_loss
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_sociability = 0.5
				ai_boldness = -0.25

			}
		}
	}

	# Hob-knob with the most important people at the feast.
	option = {
		name = coronation_banquet.0801.c

		add_prestige = minor_prestige_gain

		stress_impact = {
			gregarious = miniscule_stress_impact_loss
			arrogant = miniscule_stress_impact_loss
			shy = medium_stress_impact_gain
			humble = medium_stress_impact_gain
		}
		ai_chance = {
			base = 1
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_energy = 0.5
			}
		}
	}
}

#####################
# A guest is impressed with your high learning!
# by Petter Vilberg
#####################
coronation_banquet.1001 = {
	type = activity_event
	title = coronation_banquet.1001.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { learning >= 20 }
				desc = coronation_banquet.1001.very_high_learning
			}
			triggered_desc = {
				trigger = { learning >= 15 }
				desc = coronation_banquet.1001.high_learning
			}
			triggered_desc = {
				trigger = { learning >= 8 }
				desc = coronation_banquet.1001.average_learning
			}
			triggered_desc = {
				desc = coronation_banquet.1001.low_learning
			}
		}
	}
	left_portrait = {
		character = scope:impressed_guest
		animation = admiration
	}
	right_portrait = {
		character = root
		animation = happiness
	}
	theme = feast_activity
	cooldown = { years = 1 }

	trigger = {
		NOT = { exists = local_var:had_1001}
		scope:activity = {
			any_attending_character = {
				feast_default_participant_trigger = yes
				learning < root.learning
			}
		}
	}

	immediate = {
		set_local_variable = {
			name = had_1001
			value = yes
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					feast_default_participant_trigger = yes
					learning < root.learning
				}
				save_scope_as = impressed_guest
			}
		}
	}

	option = { #Why, of course
		name = coronation_banquet.1001.a
		add_prestige = minor_prestige_gain
		scope:impressed_guest = {
			add_opinion = {
				target = root
				modifier = learned_at_feast_opinion
			}
		}
	}
}


#####################
# You get grumpy because the food is late
# by Petter Vilberg
#####################
scripted_trigger coronation_default_1002_annoyed_guest_trigger = {
	feast_default_participant_trigger = yes
	NOT = { has_trait = gluttonous }
	NOT = { has_trait = impatient }
	NOT = {
		has_opinion_modifier = {
			target = root
			modifier = annoying_glutton_at_feast_opinion
		}
	}
}

#Triggered by being Gluttonous
coronation_banquet.1002 = {
	type = activity_event
	title = coronation_banquet.1002.t
	desc = coronation_banquet.1002.desc
	theme = feast_activity
	left_portrait = {
		character = scope:other_guest
		animation = disgust
	}
	right_portrait = {
		character = root
		animation = anger
	}
	cooldown = { years = 1 }

	trigger = {
		NOT = { exists = local_var:had_1002 }
		not_hosting_a_murder_feast = yes
		has_trait = gluttonous
		NOT = { has_trait = patient }
		NOT = { has_character_modifier = feast_gratifying_complaints_modifier }
		scope:activity = {
			any_attending_character = { #There needs to exist someone who can get annoyed at you
				coronation_default_1002_annoyed_guest_trigger = yes
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = { #Wrathful characters are more likely to be angry
			add = 0.5
			has_trait = wrathful
		}
		modifier = { #Wrathful characters are more likely to be angry
			add = 0.5
			has_trait = impatient
		}
	}

	immediate = {
		set_local_variable = {
			name = had_1002
			value = yes
		}
		scope:activity = {
			random_attending_character = { #Find someone who can be annoyed at you
				limit = {
					coronation_default_1002_annoyed_guest_trigger = yes
				}
				save_scope_as = other_guest
			}
		}
	}


	option = {
		name = coronation_banquet.1002.a
		add_character_modifier = {
			modifier = feast_gratifying_complaints_modifier
			years = 5
		}
		scope:activity = {
			every_attending_character = {
				custom = coronation_banquet.1002.gluttons_and_impatients
				limit = {
					feast_default_participant_trigger = yes
					NOT = { this = scope:other_guest }
					OR = {
						has_trait = gluttonous
						has_trait = impatient
					}
				}
				add_opinion = {
					target = root
					modifier = complained_on_my_behalf_opinion
				}
			}
		}
		scope:other_guest = {
			add_opinion = {
				target = root
				modifier = annoying_glutton_at_feast_opinion
			}
		}
	}
}


#####################
# Enjoy Magnificent Food!
# by Petter Vilberg
#####################
coronation_banquet.1004 = {
	type = activity_event
	title = coronation_banquet.1004.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:activity = {
						AND = {
							has_activity_type = activity_wedding
							has_activity_option = {
								category = wedding_option_food
								option = wedding_food_good
							}
						}
					}
				}
				desc = coronation_banquet.1004.desc_exotic
			}
			triggered_desc = {
				trigger = {
					scope:activity = {
						AND = {
							has_activity_type = activity_wedding
							has_activity_option = {
								category = wedding_option_food
								option = wedding_food_normal
							}
						}
					}
				}
				desc = coronation_banquet.1004.desc_lavish
			}
			triggered_desc = {
				trigger = {
					scope:activity = {
						has_activity_option = {
							category = wedding_option_food
							option = wedding_food_bad
						}
					}
				}
				desc = coronation_banquet.1004.desc_meager
			}
			desc = coronation_banquet.1004.desc
		}
	}
	theme = feast_activity
	left_portrait = {
		character = root
		animation = happiness
	}
	cooldown = { years = 1 }

	trigger = {
		NOT = { exists = local_var:had_1004 }
		NOR = {
			has_trait = greedy
			has_trait = temperate
			has_trait = inappetetic
		}
		not_hosting_a_murder_feast = yes
	}

	immediate = {
		set_local_variable = {
			name = had_1004
			value = yes
		}
	}

	option = { #Amazing!
		name = {
			trigger = {
				scope:activity.activity_host = {
					has_royal_court = yes
					amenity_level = { type = court_food_quality value <= 1 }
				}
			}
			text = coronation_banquet.1004.a_meager
		}
		name = {
			text = coronation_banquet.1004.a
		}
		if = {
			limit = {
				scope:activity.activity_host = {
					has_royal_court = yes
					amenity_level = { type = court_food_quality value <= 1 }
				}
			}
			add_stress = minor_stress_gain
			if = {
				limit = { #Should never dip below this
					scope:activity.activity_host = {
						prestige >= 3000
					}
				}
				scope:activity.activity_host = {
					add_prestige = miniscule_prestige_loss
				}
			}
		}
		else = {
			add_stress = medium_stress_loss
			add_character_modifier = {
				modifier = feast_life_reaffirmed_modifier
				years = 5
			}
			if = {
				limit = { #We want this to be the sweet spot
					scope:activity.activity_host = {
						prestige < 2000
					}
				}
				scope:activity.activity_host = {
					add_prestige = miniscule_prestige_gain
				}
			}
		}
	}

	option = { #INCREDIBLE!
		name = {
			trigger = {
				scope:activity.activity_host = {
					has_royal_court = yes
					amenity_level = { type = court_food_quality value <= 1 }
				}
			}
			text = coronation_banquet.1004.b_meager
		}
		name = {
			text = coronation_banquet.1004.b
		}
		trigger = {
			OR = {
				has_trait = gluttonous
				has_trait = comfort_eater
			}
		}
		exclusive = yes
		if = {
			limit = {
				scope:activity.activity_host = {
					has_royal_court = yes
					amenity_level = { type = court_food_quality value <= 1 }
				}
			}
			add_stress = medium_stress_gain
			scope:activity.activity_host = {
				if = {
					limit = {
						NOT = { this = root }
					}
					if = {
						limit = { #Should never dip below this
							scope:activity.activity_host = {
								prestige >= 3000
							}
						}
						scope:activity.activity_host = {
							add_prestige = miniscule_prestige_loss
						}
					}
					add_opinion = {
						target = root
						modifier = feast_meager_food_glutton_opinion
					}
				}
			}
		}
		else = {
			stress_impact = {
				base = medium_stress_loss
				gluttonous = medium_stress_loss
				comfort_eater = medium_stress_loss
			}
			add_character_modifier = {
				modifier = feast_life_reaffirmed_modifier
				years = 5
			}
			scope:activity.activity_host = {
				add_prestige = minor_prestige_gain
				if = {
					limit = {
						NOT = { this = root }
					}
					add_opinion = {
						target = root
						modifier = feast_amazing_food_glutton_opinion
					}
				}
				hidden_effect = {
					random_spouse = {
						limit = {
							NOT = { this = root }
						}
						reverse_add_opinion = {
							target = root
							modifier = feast_amazing_food_glutton_opinion
						}
					}
				}
			}
		}
	}
}


#####################
# You're having a hard time socializing
# by Petter Vilberg
#####################
coronation_banquet.1005 = {
	type = activity_event
	title = coronation_banquet.1005.t
	desc = {
		desc = coronation_banquet.1005.desc
		triggered_desc = {
			trigger = {
				exists = scope:friendly_guest
			}
			desc = coronation_banquet.1005.desc_friendly_guest
		}
	}
	theme = feast_activity
	left_portrait = {
		character = root
		animation = stress
	}
	right_portrait = {
		character = scope:friendly_guest
		animation = personality_compassionate
	}
	cooldown = { years = 1 }

	trigger = {
		NOT = { exists = local_var:had_1005 }
		not_hosting_a_murder_feast = yes
		OR = {
			has_trait = shy
			has_trait = reclusive
		}
		NOT = { has_trait = lifestyle_reveler }
		scope:activity = {
			any_attending_character = {
				feast_default_participant_trigger = yes
				has_friendly_relationship_trigger = {
					CHARACTER = root
				}
			}
		}
	}

	weight_multiplier = {
		base = 1
	}

	immediate = {
		set_local_variable = {
			name = had_1005
			value = yes
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					feast_default_participant_trigger = yes
					has_friendly_relationship_trigger = {
						CHARACTER = root
					}
				}
				save_scope_as = friendly_guest
			}
		}
	}

	option = { #you try to get through the party alone
		name = coronation_banquet.1005.a
		add_prestige = medium_prestige_loss
		stress_impact = {
			base = minor_stress_impact_loss
			shy = minor_stress_impact_loss
			reclusive = minor_stress_impact_loss
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = -0.5
				ai_energy = -0.25
			}
		}
	}

	option = { #you have a friend at the party
		name = coronation_banquet.1005.b
		trigger = {
			exists = scope:friendly_guest
		}
		hidden_effect = {
			add_opinion = {
				modifier = friendly_interaction
				target = scope:friendly_guest
			}
		}
		add_prestige = medium_prestige_gain
		scope:friendly_guest = {
			add_opinion = {
				target = root
				modifier = friendly_interaction
			}
		}
		stress_impact = {
			craven = minor_stress_impact_gain
		}
		ai_chance = {
			base = 1000
		}
	}

	option = { #you make awkward attempts at social interaction
		name = coronation_banquet.1005.c
		add_prestige = medium_prestige_gain
		stress_impact = {
			craven = minor_stress_impact_gain
			shy = medium_stress_impact_gain
			reclusive = minor_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_energy = 0.25
			}
		}
	}
}


#####################
# Reveler in their element
# by Petter Vilberg
#####################

#Trigger for suitable compatriots
scripted_trigger coronation_default_1006_potentially_entertained_trigger = {
	feast_default_participant_trigger = yes
	is_adult = yes
	NOT = { has_relation_rival = root }
}

coronation_banquet.1006 = {
	type = activity_event
	title = coronation_banquet.1006.t
	desc = coronation_banquet.1006.desc
	theme = feast_activity
	left_portrait = {
		character = scope:guest_1
		animation = drink_goblet
	}
	center_portrait = {
		character = root
		animation = toast_goblet
	}
	right_portrait = {
		character = scope:guest_2
		animation = admiration
	}
	lower_left_portrait = scope:guest_3
	cooldown = { years = 1 }

	trigger = {
		NOT = { exists = local_var:had_1006 }
		has_trait = lifestyle_reveler
		not_hosting_a_murder_feast = yes
		scope:activity = {
			any_attending_character = {
				coronation_default_1006_potentially_entertained_trigger = yes
				count >= 3
			}
		}
	}

	immediate = {
		set_local_variable = {
			name = had_1006
			value = yes
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					coronation_default_1006_potentially_entertained_trigger = yes
				}
				weight = {
					base = 1
					modifier = {
						add = 10
						is_of_major_interest_to_root_trigger = yes
					}
					modifier = {
						add = 5
						is_of_minor_interest_to_root_trigger = yes
					}
				}
				save_scope_as = guest_1
				add_to_list = table_companions
			}
			random_attending_character = {
				limit = {
					coronation_default_1006_potentially_entertained_trigger = yes
					NOT = { this = scope:guest_1 }
				}
				weight = {
					base = 1
					modifier = {
						add = 10
						is_of_major_interest_to_root_trigger = yes
					}
					modifier = {
						add = 5
						is_of_minor_interest_to_root_trigger = yes
					}
				}
				save_scope_as = guest_2
				add_to_list = table_companions
			}
			random_attending_character = {
				limit = {
					coronation_default_1006_potentially_entertained_trigger = yes
					NOT = { this = scope:guest_1 }
					NOT = { this = scope:guest_2 }
				}
				weight = {
					base = 1
					modifier = {
						add = 10
						is_of_major_interest_to_root_trigger = yes
					}
					modifier = {
						add = 5
						is_of_minor_interest_to_root_trigger = yes
					}
				}
				save_scope_as = guest_3
				add_to_list = table_companions
			}
		}
	}

	option = {
		name = coronation_banquet.1006.a
		trigger = {
			has_trait = lifestyle_reveler
			has_trait_xp = {
				trait = lifestyle_reveler
				value < 50
			}
		}
		trait = lifestyle_reveler
		every_in_list = {
			list = table_companions
			custom = coronation_banquet.1006.table_companions
			add_opinion = {
				modifier = feast_life_of_the_party_opinion
				target = root
				opinion = 10
			}
		}
		stress_impact = {
			lifestyle_reveler = medium_stress_loss
			gregarious = medium_stress_loss
		}
	}

	option = {
		name = coronation_banquet.1006.b
		trigger = {
			has_trait = lifestyle_reveler
			has_trait_xp = {
				trait = lifestyle_reveler
				value >= 50
			}
			has_trait_xp = {
				trait = lifestyle_reveler
				value < 100
			}
		}
		trait = lifestyle_reveler
		every_in_list = {
			list = table_companions
			custom = coronation_banquet.1006.table_companions
			add_opinion = {
				modifier = feast_life_of_the_party_opinion
				target = root
				opinion = 20
			}
		}
		stress_impact = {
			lifestyle_reveler = medium_stress_loss
			gregarious = medium_stress_loss
		}
	}

	option = {
		name = coronation_banquet.1006.c
		trigger = {
			has_trait = lifestyle_reveler
			has_trait_xp = {
				trait = lifestyle_reveler
				value >= 100
			}
		}
		trait = lifestyle_reveler
		every_in_list = {
			list = table_companions
			custom = coronation_banquet.1006.table_companions
			add_opinion = {
				modifier = feast_life_of_the_party_opinion
				target = root
				opinion = 30
			}
		}
		stress_impact = {
			lifestyle_reveler = major_stress_loss
			gregarious = medium_stress_loss
		}
	}
}


#####################
# Two Gluttons eat immensely
# by Petter Vilberg
#####################

scripted_trigger coronation_default_1007_glutton_trigger = {
	feast_default_participant_trigger = yes
	has_trait = gluttonous
}

coronation_banquet.1007 = {
	type = activity_event
	title = coronation_banquet.1007.t
	desc = coronation_banquet.1007.desc
	theme = feast_activity
	left_portrait = {
		character = root
		animation = happiness
	}
	right_portrait = {
		character = scope:other_glutton
		animation = ecstasy
	}
	cooldown = { years = 1 }

	trigger = {
		NOT = { exists = local_var:had_1007 }
		not_hosting_a_murder_feast = yes
		has_trait = gluttonous
		scope:activity = {
			any_attending_character = {
				coronation_default_1007_glutton_trigger = yes
			}
		}
	}

	immediate = {
		set_local_variable = {
			name = had_1007
			value = yes
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					coronation_default_1007_glutton_trigger = yes
				}
				weight = {
					base = 1
					interesting_feast_participant_modifier = yes
				}
				save_scope_as = other_glutton
			}
		}
	}

	option = { #What an impressive eater!
		name = coronation_banquet.1007.a
		reverse_add_opinion = {
			target = scope:other_glutton
			modifier = respect_opinion
			opinion = 20
		}
		add_opinion = {
			target = scope:other_glutton
			modifier = respect_opinion
			opinion = 20
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_honor = 0.5
			}
		}
	}

	option = { #I'll eat them under the table!
		name = coronation_banquet.1007.b
		add_internal_flag = dangerous
		reverse_add_opinion = {
			target = scope:other_glutton
			modifier = respect_opinion
			opinion = 40
		}
		random = {
			chance = 20
			increase_wounds_effect = {
				REASON = ate_themselves_to_death
			}
		}
		ai_chance = {
			base = 20
			ai_value_modifier = {
				ai_greed = 1
				ai_rationality = -0.5
				ai_boldness = 0.5
			}
			modifier = {
				factor = 0.2
				has_trait_rank = {
					trait = wounded
					rank > 2
				}
			}
		}
	}
}



#####################
# Accidentally spill secrets about yourself
# by Petter Vilberg
#####################
scripted_trigger coronation_default_1008_secret_recipient_trigger = {
	feast_default_participant_trigger = yes
	is_adult = yes
	save_temporary_scope_as = secret_recipient_check
	root = {
		any_secret = {
			NOT = { is_known_by = scope:secret_recipient_check }
		}
	}
}

coronation_banquet.1008 = {
	type = activity_event
	title = coronation_banquet.1008.t
	desc = coronation_banquet.1008.desc
	theme = feast_activity
	left_portrait = {
		character = root
		animation = wedding_drunk
	}
	right_portrait = {
		character = scope:secret_recipient
		animation = schadenfreude
	}
	cooldown = { years = 2 }

	trigger = {
		NOT = { exists = local_var:had_1008 }
		drinks_alcohol_trigger = yes
		scope:activity = {
			any_attending_character = {
				coronation_default_1008_secret_recipient_trigger = yes
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			add = 1
			has_trait = drunkard
		}
		modifier = {
			add = -0.9
			has_trait = temperate
		}
	}

	immediate = {
		set_local_variable = {
			name = had_1008
			value = yes
		}
		scope:activity = {
			random_attending_character = {
				limit = { coronation_default_1008_secret_recipient_trigger = yes }
				weight = {
					base = 1
					interesting_feast_participant_modifier = yes
				}
				save_scope_as = secret_recipient
			}
		}
		random_secret = {
			limit = { NOT = { is_known_by = scope:secret_recipient } }
			save_scope_as = secret_to_reveal
		}
	}

	option = {
		name = coronation_banquet.1008.a
		flavor = coronation_banquet.1008.a.flavor
		scope:secret_to_reveal = {
			reveal_to = scope:secret_recipient
		}
		stress_impact = {
			contrite = medium_stress_impact_loss
		}
	}
}

#####################
# Dislike the host, deface a displayed Court Artifact
# by Filippa Gannholm Kirsten
#####################
scripted_effect coronation_default_1020_gold_amount_based_on_rarity_effect = {
	#Illustrious court artifact
	if = {
		limit = {
			scope:feast_target_artifact = { rarity = illustrious }
		}
		pay_short_term_gold = {
			target = scope:feast_host
			gold = {
				value = major_gold_value
				multiply = 0.25
			}
		}
	}
	#Famed court artifact
	else_if = {
		limit = {
			scope:feast_target_artifact = { rarity = famed }
		}
		pay_short_term_gold = {
			target = scope:feast_host
			gold = {
				value = medium_gold_value
				multiply = 0.5
			}
		}
	}
	#Masterwork court artifact
	else_if = {
		limit = {
			scope:feast_target_artifact = { rarity = masterwork }
		}
		pay_short_term_gold = {
			target = scope:feast_host
			gold = {
				value = minor_gold_value
				multiply = 1
			}
		}
	}
	#Common and worse
	else = {
		pay_short_term_gold = {
			target = scope:feast_host
			gold = {
				value = tiny_gold_value
				multiply = 1
			}
		}
	}
}

scripted_effect set_worsened_relation_coronation_default_1020_effect = {
	if = {
		limit = {
			can_set_relation_potential_rival_trigger = { CHARACTER = scope:feast_host }
		}
		set_relation_potential_rival = scope:feast_host
	}
	else_if = {
		limit = {
			can_set_relation_rival_trigger = { CHARACTER = scope:feast_host }
		}
		set_relation_rival = {
			target = scope:feast_host
			reason = rival_artifact_defaced
		}
	}
	else_if = {
		limit = {
			has_relation_rival = scope:feast_host
			can_set_relation_nemesis_trigger = { CHARACTER = scope:feast_host }
		}
		set_relation_nemesis = {
			reason = nemesis_artifact_defaced
			copy_reason = rival
			target = scope:feast_host
		}
	}
}

coronation_banquet.1020 = {
	type = activity_event
	title = coronation_banquet.1020.t
	desc = coronation_banquet.1020.desc
	theme = feast_activity
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = {
				OR = {
					has_trait = just
					has_trait = honest
				}
			}
			animation = worry
		}
		animation = scheme
	}
	#Show the court artifact
	artifact = {
		target = scope:feast_target_artifact
		position = lower_center_portrait
		trigger = { exists = scope:feast_target_artifact }
	}

	trigger = {
		NOT = { exists = local_var:had_1020 }
		is_ai = no
		has_dlc_feature = royal_court #Court Artifacts
		#Does the host have a court artifact on display?
		NOT = { this = scope:activity.activity_host }
		scope:activity.activity_host = {
			is_ai = yes
			any_character_artifact = {
				ep1_artifact_is_court_artifact_trigger = yes
				is_equipped = yes
			}
		}
		#Do we dislike the host?
		opinion = {
			target = scope:activity.activity_host
			value < 0
		}
	}
	#More likely if we're potential rival, rivals or nemesis
	weight_multiplier = {
		base = 1
		modifier = {
			has_relation_nemesis = scope:activity.activity_host
			factor = 2
		}
		modifier = {
			has_relation_rival = scope:activity.activity_host
			factor = 1.5
		}
		modifier = {
			has_relation_potential_rival = scope:activity.activity_host
			factor = 1.25
		}
	}

	immediate = {
		set_local_variable = {
			name = had_1020
			value = yes
		}
		#Let's set our court artifact to-be defaced
		scope:activity.activity_host = {
			random_character_artifact = {
				limit = {
					ep1_artifact_is_court_artifact_trigger = yes
					is_equipped = yes
				}
				save_scope_as = feast_target_artifact
			}
			#For easy access
			save_scope_as = feast_host
		}
		scope:activity = {
			every_attending_character = {
				if = {
					limit = {
						feast_default_participant_trigger = yes
						OR = {
							has_relation_nemesis = scope:feast_host
							has_relation_rival = scope:feast_host
							has_relation_potential_rival = scope:feast_host
							opinion = {
								target = scope:feast_host
								value < 0
							}
						}
						NOR = {
							has_relation_nemesis = root
							has_relation_rival = root
							this = root
						}
					}
					add_to_list = guests_who_dislike_host
					root = {
						if = {
							limit = {
								NOT = { exists = var:num_unhappy_guests }
							}
							set_variable = {
								name = num_unhappy_guests
								value = 1
							}
						}
						else = {
							change_variable = {
								name = num_unhappy_guests
								add = 1
							}
						}
					}
				}
			}
		}
		#Some randomization for flavor
		random_list = {
			50 = {
				add_character_flag = feast_default_1020_scratch_up_artifact
			}
			50 = {
				add_character_flag = feast_default_1020_knock_over_artifact
			}
		}

	}

	#Let's deface!
	option = {
		name = {
			text = {
				first_valid = {
					#I'll spill something on it!
					triggered_desc = {
						trigger = {
							has_trait = drunkard
						}
						desc = coronation_banquet.1020.a_drunkard
					}
					#I'll _deface_ it
					triggered_desc = {
						trigger = {
							has_trait = lustful #Distastefully defaced someone else's artifact
						}
						desc = coronation_banquet.1020.a_lustful
					}
					#I'll knock it over
					triggered_desc = {
						trigger = {
							has_character_flag = feast_default_1020_knock_over_artifact
						}
						desc = coronation_banquet.1020.a_knock_over
					}
					#I'll scratch it up good
					triggered_desc = {
						trigger = {
							has_character_flag = feast_default_1020_scratch_up_artifact
						}
						desc = coronation_banquet.1020.a_scratch
					}
				}
			}
		}
		duel = {
			skill = prowess
			value = scope:feast_host.intrigue
			#We defaced it, scot-free!
			40 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 5
				}
				min = 10
				desc = coronation_banquet.1020.a.tt_success
				#Let the player know what's going on
				send_interface_toast = {
					title = coronation_banquet.1020.tt
					left_icon = root
					#A tasty modifier
					add_character_modifier = {
						modifier = feast_sneakily_defaced_artifact_modifier
						years = 5
					}
				}
			}
			#We were spotted and fined
			40 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -5
				}
				#If the host is clever, make it easier to get caught
				modifier = {
					factor = {
						value = scope:feast_host.intrigue
						divide = {
							value = 10
						}
					}
				}
				desc = coronation_banquet.1020.a.tt_fined
				#Let the player know what's going on
				send_interface_toast = {
					title = coronation_banquet.1020.tt
					left_icon = root
					right_icon = scope:feast_host
					#Pay up
					coronation_default_1020_gold_amount_based_on_rarity_effect = yes
					#Opinion loss
					reverse_add_opinion = {
						target = scope:feast_host
						modifier = annoyed_opinion
						opinion = -15
					}
				}
			}
			#We were spotted and imprisoned :(
			20 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -10
				}
				#If the host is clever, make it easier to get caught
				modifier = {
					factor = {
						value = scope:feast_host.intrigue
						divide = {
							value = 20
						}
					}
				}
				#If the host is prone to anger or strongly dislikes you
				modifier = {
					scope:feast_host = {
						OR = {
							has_trait = vengeful
							has_trait = callous
							has_trait = sadistic
							has_trait = wrathful
							has_trait = irritable
							opinion = {
								target = root
								value < -20
							}
						}
					}
					add = 40
				}
				#Shouldn't really happen if the host likes you
				trigger = {
					scope:feast_host = {
						NOR = {
							has_relation_soulmate = root
							has_relation_lover = root
							has_relation_best_friend = root
							has_relation_friend = root
						}
						opinion = {
							target = root
							value < 0
						}
					}
				}
				desc = coronation_banquet.1020.a.tt_imprisoned
				#Your sadistic feast host imprisons you
				rightfully_imprison_character_less_verbose_effect = {
					TARGET = root
					IMPRISONER = scope:feast_host
				}
				#Let the player know what's going on
				send_interface_toast = {
					title = coronation_banquet.1020.tt
					left_icon = root
					right_icon = scope:feast_host
					#If we're not already rivals
					set_worsened_relation_coronation_default_1020_effect = yes
					#Opinion loss
					reverse_add_opinion = {
						target = scope:feast_host
						modifier = angry_opinion
						opinion = -30
					}
				}
			}
		}
		#Damage the artifact
		scope:feast_target_artifact = {
			add_durability = {
				value = artifact_max_durability
				multiply = {
					value = {
						integer_range = {
							min = 20
							max = 40
						}
					}
					multiply = -0.01
				}
			}
		}
		stress_impact = {
			just = minor_stress_impact_gain
			honest = minor_stress_impact_gain
			craven = medium_stress_impact_gain
			paranoid = major_stress_impact_gain
			#We like breaking things
			sadistic = minor_stress_impact_loss
			vengeful = minor_stress_impact_loss
		}
		#People who dislike the host appreciates what you did
		if = {
			#If the list isn't empty
			limit = {
				any_in_list = {
					list = guests_who_dislike_host
					count > 0
				}
			}
			if = {
				limit = {
					any_in_list = {
						list = guests_who_dislike_host
						count >= 5
					}
				}
				custom_tooltip = coronation_banquet.1020.tt_guests
			}
			else = {
				#For localization
				custom_description = {
					text = spiteful_guests_liked_defacing
					object = root
				}
				#To display all applicable guests
				show_as_tooltip = {
					every_in_list = {
						list = guests_who_dislike_host
						save_temporary_scope_as = current_guest
						scope:current_guest = {
							add_opinion = {
								target = root
								modifier = pleased_opinion
								opinion = 20
							}
						}
					}
				}
			}
		}
	}

	#No I don't want to
	option = {
		name = coronation_banquet.1020.b
		stress_impact = {
			sadistic = minor_stress_impact_gain
			vengeful = minor_stress_impact_gain
		}
	}

	after = {
		if = {
			limit = { has_character_flag = feast_default_1020_knock_over_artifact }
			remove_character_flag = feast_default_1020_knock_over_artifact
		}
		if = {
			limit = { has_character_flag = feast_default_1020_scratch_up_artifact }
			remove_character_flag = feast_default_1020_scratch_up_artifact
		}
		if = {
			limit = { exists = var:num_unhappy_guests }
			remove_variable = num_unhappy_guests
		}
	}
}

# BANQUET EVENTS

##################################################
# A Kindred Spirit
# by Claudia Baldassi
# coronation_banquet.1040
##################################################

# You make a new friend

coronation_banquet.1040 = {
	type = activity_event
	title = coronation_banquet.1040.t
	desc = coronation_banquet.1040.desc
	theme = wedding_banquet_activity
	center_portrait = {
		character = root
		animation = laugh
	}
	right_portrait = {
		character = scope:new_friend
		animation = personality_content
	}

	cooldown = { years = 1 }

	trigger = {
		scope:activity = {
			any_attending_character = {
				OR = {
					has_relation_potential_friend = root
					AND = {
						has_any_good_relationship_with_root_trigger = no
						has_any_bad_relationship_with_root_trigger = no
					}
				}
				is_ai = yes
				is_adult = yes
				NOT = { has_character_flag = busy_in_banquet_event }
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			is_ai = yes
			factor = 0.1
		}
	}

	immediate = {
		add_character_flag = busy_in_banquet_event
		scope:activity = {
			random_attending_character = {
				limit = {
					OR = {
						has_relation_potential_friend = root
						AND = {
							has_any_good_relationship_with_root_trigger = no
							has_any_bad_relationship_with_root_trigger = no
						}
					}
					is_ai = yes
					is_adult = yes
					NOT = { has_character_flag = busy_in_banquet_event }
				}
				save_scope_as = new_friend
			}
		}
		scope:new_friend = { add_character_flag = busy_in_banquet_event }
	}

	#Option A:
	option = {
		name = coronation_banquet.1040.a
		scope:activity = {
			add_activity_log_entry = {
				key = wedding_kindred_log
				tags = { good }
				score = 50
				character = root
				target = scope:new_friend

				# Effect
				root = {
					set_relation_friend = { reason = friend_coronation_enjoyable_chat target = scope:new_friend }
					reverse_add_opinion = {
						target = scope:new_friend
						modifier = friendliness_opinion
						opinion = 20
					}
				}
			}
		}
		stress_impact = {
			shy = minor_stress_impact_gain
			reclusive = minor_stress_impact_gain
			paranoid = minor_stress_impact_gain
			trusting = medium_stress_impact_loss
			gregarious = major_stress_impact_loss
		}

		ai_chance = {
			base = 100
			modifier = {
				has_trait = shy
				add = -50
			}
			modifier = {
				has_trait = reclusive
				add = -75
			}
			modifier = {
				has_trait = paranoid
				add = -75
			}
		}
	}

	#Option B:
	option = {
		name = coronation_banquet.1040.b
		reverse_add_opinion = {
			target = scope:new_friend
			modifier = unfriendly_opinion
			opinion = -15
		}
		stress_impact = {
			gregarious = medium_stress_impact_gain
			reclusive = major_stress_impact_loss
			paranoid = major_stress_impact_loss
		}
		ai_chance = {
			base = 100
			modifier = {
				has_trait = gregarious
				add = -75
			}
		}
	}
	after = {
		remove_character_flag = busy_in_banquet_event
		scope:new_friend = { remove_character_flag = busy_in_banquet_event }
	}
}

##################################################
# A Fiery Dance
# by Claudia Baldassi
# coronation_banquet.1050
##################################################

# Someone catches fire from the torches
coronation_banquet.1050 = {
	type = activity_event
	title = coronation_banquet.1050.t
	desc = coronation_banquet.1050.desc
	theme = wedding_banquet_activity
	left_portrait = {
		character = root
		animation = fear
	}
	center_portrait = {
		trigger = {
			exists = scope:extra_victim_1
		}
		character = scope:extra_victim_1
		animation = shock
	}
	right_portrait = {
		character = scope:victim
		animation = pain
	}
	lower_center_portrait = scope:other_victim
	lower_right_portrait = scope:extra_victim_2

	cooldown = { years = 15 }

	trigger = {

		scope:activity = {
			NOT = {
				has_variable = has_had_event_1050
			}
		}

		scope:activity = {
			has_activity_option = {
				category = wedding_option_entertainment
				option = wedding_entertainment_good
			}
		}
		scope:activity = {
			any_attending_character = {
				is_adult = yes
				NOT = {
					this = root
				}
				is_ai = yes
				NOT = { has_character_flag = busy_in_banquet_event }
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			is_ai = yes
			factor = 0.1
		}
	}

	immediate = {
		scope:activity = {
			set_variable = has_had_event_1050
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					is_adult = yes
					NOT = {
						this = root
					}
					is_ai = yes
					NOT = { has_character_flag = busy_in_banquet_event }
				}
				save_scope_as = 1050_victim
				increase_wounds_effect = { REASON = burned }
				add_character_flag = busy_in_banquet_event
			}
		}
		add_character_flag = busy_in_banquet_event
		if = {
			limit = {
				scope:activity = {
					any_attending_character = {
						coronation_extra_victim_valid_trigger = yes
						save_temporary_scope_as = extra_victim_1
					}
				}
				scope:activity = {
					any_attending_character = {
						coronation_extra_victim_valid_trigger = yes
						NOT = { this = scope:extra_victim_1 }
					}
				}
			}
			scope:activity = {
				random_attending_character = {
					limit = {
						coronation_extra_victim_valid_trigger = yes
					}
					save_scope_as = extra_victim_1
					add_character_flag = busy_in_banquet_event
				}
				random_attending_character = {
					limit = {
						coronation_extra_victim_valid_trigger = yes
						NOT = { this = scope:extra_victim_1 }
					}
					save_scope_as = extra_victim_2
					add_character_flag = busy_in_banquet_event
				}
			}
		}
		if = {
			limit = {
				scope:activity = {
					any_attending_character = {
						coronation_extra_victim_valid_trigger = yes
						NOR = {
							this = scope:extra_victim_1
							this = scope:extra_victim_2
						}
					}
				}
			}
			scope:activity = {
				random_attending_character = {
					limit = {
						coronation_extra_victim_valid_trigger = yes
						NOR = {
							this = scope:extra_victim_1
							this = scope:extra_victim_2
						}
					}
					save_scope_as = other_victim
					add_character_flag = busy_in_banquet_event
				}
			}
		}
	}

	#Option A: try to save them
	option = {
		name = coronation_banquet.1050.a
		duel = {
			skill = prowess
			value = decent_skill_rating
			40 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = coronation_banquet.1050.a.success
				send_interface_toast = {
					title = coronation_banquet.1050.a.success.tt
					left_icon = scope:1050_victim
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_dance_rescue_log
							tags = { good }
							score = 25
							character = root
							target = scope:1050_victim

							# Effect
							root = {
								reverse_add_opinion = {
									target = scope:1050_victim
									modifier = grateful_opinion
									opinion = 30
								}
								if = {
									limit = {
										can_add_hook = {
											type = indebted_hook
											target = scope:1050_victim
										}
									}
									add_hook = {
										type = indebted_hook
										target = scope:1050_victim
									}
								}
								if = {
									limit = {
										has_activity_intent = woo_attendee_intent
										intent_target = scope:1050_victim
									}
									progress_towards_lover_effect = {
										REASON = lover_coronation_saved_from_flames
										CHARACTER = scope:1050_victim
										OPINION = default_lover_opinion
									}
								}
								else_if = {
									limit = {
										has_activity_intent = diplomatic_intent
										intent_target = scope:1050_victim
									}
									create_alliance = {
										target = scope:1050_victim
										allied_through_owner = root
										allied_through_target = scope:1050_victim
									}
									scope:1050_victim = {
										add_opinion = {
											target = root
											modifier = event_negotiated_alliance_opinion
										}
									}
								}
							}
						}
					}
				}
			}
			60 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = coronation_banquet.1050.a.failure
				send_interface_toast = {
					title = coronation_banquet.1050.a.failure.tt
					left_icon = scope:1050_victim
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_dance_rescue_fail_log
							tags = { bad }
							score = 25
							character = root
							target = scope:1050_victim

							# Effect
							root = {
								increase_wounds_effect = { REASON = burned }
								scope:1050_victim = {
									increase_wounds_effect = { REASON = burned }
								}
							}
						}
					}
				}
			}
		}
		stress_impact = {
			craven = massive_stress_impact_gain
		}
		ai_chance = {
			base = 50
			modifier = {
				has_trait = brave
				add = 100
			}
			modifier = {
				has_trait = craven
				add = -100
			}
		}
	}

	#Option B: call for help
	option = {
		name = coronation_banquet.1050.b
		random_list = {
			50 = {
				#Saved!
				desc = coronation_banquet.1050.b.1
				modifier = {
					scope:activity = {
						has_activity_option = {
							category = coronation_option_pomp
							option = coronation_pomp_humble
						}
					}
					add = -25
				}
				modifier = {
					scope:activity = {
						has_activity_option = {
							category = coronation_option_pomp
							option = coronation_pomp_grandiose
						}
					}
					add = 25
				}
				send_interface_toast = {
					title = coronation_banquet.1050.b.1.tt
					left_icon = scope:1050_victim
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_dance_saved_log
							tags = { good }
							score = 25
							character = scope:1050_victim
						}

						root = {
							reverse_add_opinion = {
								target = scope:1050_victim
								modifier = grateful_opinion
								opinion = 15
							}
							if = {
								limit = {
									can_add_hook = {
										type = indebted_hook
										target = scope:1050_victim
									}
								}
								add_hook = {
									type = indebted_hook
									target = scope:1050_victim
								}
							}
						}
					}
				}
			}
			50 = {
				#Keeps burning!
				desc = coronation_banquet.1050.b.2
				send_interface_toast = {
					title = coronation_banquet.1050.b.2.tt
					left_icon = scope:1050_victim
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_dance_saved_fail_log
							tags = { bad }
							score = 25
							character = scope:1050_victim

							# Effect
							scope:1050_victim = {
								increase_wounds_effect = { REASON = burned }
							}
						}
					}
				}
			}
		}
		ai_chance = {
			base = 50
		}
	}

	#Option C: FIRE!
	option = {
		name = coronation_banquet.1050.c
		trigger = {
			exists = scope:extra_victim_1
			exists = scope:extra_victim_2
		}
		scope:activity = {
			add_activity_log_entry = {
				key = wedding_dance_disaster_log
				tags = { bad }
				score = 25
				character = scope:1050_victim

				# Effect
				scope:extra_victim_1 = {
					increase_wounds_effect = { REASON = burned }
				}
				scope:extra_victim_2 = {
					increase_wounds_effect = { REASON = burned }
				}

				root = { add_dread = medium_dread_gain }
			}
		}
		stress_impact = {
			compassionate = major_stress_impact_gain
			callous = medium_stress_impact_loss
			vengeful = major_stress_impact_loss
			sadistic = massive_stress_impact_loss
			torturer = massive_stress_impact_loss
		}
		ai_chance = {
			base = 30
			modifier = {
				has_trait = sadistic
				add = 70
			}
			modifier = {
				has_trait = callous
				add = 20
			}
			modifier = {
				has_trait = compassionate
				add = -70
			}
		}
	}

	#Option D: panic
	option = {
		name = coronation_banquet.1050.d
		trigger = { exists = scope:other_victim }
		random = {
			chance = 30
			send_interface_toast = {
				title = coronation_banquet.1050.d.tt.2
				left_icon = scope:other_victim
				scope:activity = {
					add_activity_log_entry = {
						key = wedding_dance_knocked_log
						tags = { bad }
						score = 25
						character = root
						target = scope:other_victim

						# Effect
						root = { custom_tooltip = coronation_banquet.1050.d.tt }
						scope:other_victim = {
							increase_wounds_effect = { REASON = burned }
						}
					}
				}
			}

		}
		stress_impact = {
			brave = massive_stress_impact_gain
		}
		ai_chance = {
			base = 50
			modifier = {
				has_trait = craven
				add = 100
			}
			modifier = {
				has_trait = brave
				add = -100
			}
		}
	}
	after = {
		remove_character_flag = busy_in_banquet_event
		scope:1050_victim = { remove_character_flag = busy_in_banquet_event }
		if = {
			limit = { exists = scope:other_victim }
			scope:other_victim = { remove_character_flag = busy_in_banquet_event }
		}
		if = {
			limit = { exists = scope:extra_victim_1 }
			scope:extra_victim_1 = { remove_character_flag = busy_in_banquet_event }
		}
		if = {
			limit = { exists = scope:extra_victim_2 }
			scope:extra_victim_2 = { remove_character_flag = busy_in_banquet_event }
		}
	}
}

##################################################
# An Exotic Show
# by Claudia Baldassi
# coronation_banquet.1070
##################################################

# Showing off exotic animals can go very well or very wrong

coronation_banquet.1070 = {
	type = activity_event
	title = coronation_banquet.1070.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					root = scope:host
				}
				desc = coronation_banquet.1070.desc_host
			}
			desc = coronation_banquet.1070.desc_guest
		}
		desc = coronation_banquet.1070.desc_mid
		first_valid = {
			triggered_desc = {	#Everyone is impressed
				trigger = {
					has_character_flag = 1070_exotic_fiends_good
				}
				desc = coronation_banquet.1070.desc_good
			}
			desc = coronation_banquet.1070.desc_bad #The animals are out of control!
		}
		triggered_desc = {
			trigger = {
				exists = scope:1070_target
				has_character_flag = 1070_exotic_fiends_bad
			}
			desc = coronation_banquet.1070.desc_bad_target
		}
	}
	theme = wedding_banquet_activity
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = {
				has_character_flag = 1070_exotic_fiends_bad
			}
			animation = shock
		}
		triggered_animation = {
			trigger = {
				has_character_flag = 1070_exotic_fiends_good
			}
			animation = personality_bold
		}
	}
	right_portrait = {
		trigger = {
			exists = scope:1070_target
			has_character_flag = 1070_exotic_fiends_bad
		}
		character = scope:1070_target
		animation = fear
	}

	lower_right_portrait = scope:m_hunt

	cooldown = { years = 5 }

	trigger = {

		scope:activity = {
			has_activity_option = {
				category = wedding_option_entertainment
				option = wedding_entertainment_good
			}
		}
		scope:activity = {
			NOT = { has_variable = has_had_event_1070 }
		}
		scope:host = {
			has_character_modifier = hunt_captive_beast_modifier
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			scope:host = { has_trait = arrogant }
			add = 1
		}
		modifier = {
			scope:host = { has_trait = humble }
			add = -1
		}
		modifier = {
			is_ai = no
			factor = 2
		}
	}

	immediate = {
		add_character_flag = busy_in_banquet_event
		scope:activity = { set_variable = has_had_event_1070 }
		scope:host = {
			if = {
				limit = {
					employs_court_position = master_of_hunt_court_position
					any_court_position_holder = {
						type = master_of_hunt_court_position
						is_ai = yes
						is_adult = yes
						involved_activity = root.involved_activity
						NOT = { has_character_flag = busy_in_banquet_event }
					}
				}
				random_court_position_holder = {
					type = master_of_hunt_court_position
					limit = {
						is_ai = yes
						is_adult = yes
						involved_activity = root.involved_activity
						NOT = { has_character_flag = busy_in_banquet_event }
					}
					save_scope_as = m_hunt
					add_character_flag = busy_in_banquet_event
				}
			}
		}
		if = {
			limit = {
				OR = {
					has_activity_intent = murder_attendee_intent
					has_activity_intent = woo_attendee_intent
					has_activity_intent = diplomatic_intent
				}
			}
			intent_target = { save_scope_as = 1070_target }
		}
		random_list = {
			50 = {	# all goes well
				modifier = {
					scope:host = {
						employs_court_position = master_of_hunt_court_position
					}
					add = 15
				}
				modifier = {
					exists = scope:m_hunt
					add = 15
				}
				modifier = {
					scope:host = {
						has_trait = lifestyle_hunter
					}
					add = 25
				}
				modifier = {
					scope:host = {
						has_trait = diligent
					}
					add = 20
				}
				modifier = {
					scope:activity = {
						has_activity_option = {
							category = coronation_option_pomp
							option = coronation_pomp_grandiose
						}
					}
					add = 20
				}
				modifier = {
					scope:activity = {
						has_activity_option = {
							category = coronation_option_pomp
							option = coronation_pomp_appropriate
						}
					}
					add = 5
				}
				add_character_flag = 1070_exotic_fiends_good
			}
			50 = {	# a beast escapes!
				modifier = {
					scope:activity = {
						has_activity_option = {
							category = coronation_option_pomp
							option = coronation_pomp_humble
						}
					}
					add = 30
				}
				modifier = {
					scope:host = {
						has_trait = arrogant
					}
					add = 20
				}
				modifier = {
					scope:host = {
						has_trait = lazy
					}
					add = 15
				}
				add_character_flag = 1070_exotic_fiends_bad
				if = {
					limit = {
						this = scope:host
					}
					stress_impact = {
						arrogant = major_stress_impact_gain
						ambitious = major_stress_impact_gain
						diligent = medium_stress_impact_gain
						paranoid = medium_stress_impact_gain
					}
				}
			}
		}
	}

	#Option A: a worthy show
	option = {
		name = coronation_banquet.1070.a
		trigger = { has_character_flag = 1070_exotic_fiends_good }
		scope:activity = {
			every_attending_character = {
				custom = custom.every_attending_character
				limit = {
					NOT = { this = scope:host }
				}
				add_opinion = {
					target = scope:host
					modifier = wedding_good_entertainment_opinion
				}
			}
		}
		scope:activity = {
			add_activity_log_entry = {
				key = wedding_beasts_entertain_log
				tags = { good }
				score = 20
				character = scope:host

				# Effect
				scope:host = { add_prestige = medium_prestige_gain }
			}
		}
		stress_impact = {
			base = minor_stress_impact_loss
		}
		ai_chance = {
			base = 100
		}
	}

	#Option E: I can do better
	option = {
		name = coronation_banquet.1070.e
		flavor = coronation_banquet.1070.e.tt
		trigger = {
			has_character_flag = 1070_exotic_fiends_good
		}
		scope:activity = {
			every_attending_character = {
				custom = custom.every_attending_character
				limit = {
					NOT = { this = scope:host }
				}
				add_opinion = {
					target = scope:host
					modifier = wedding_good_entertainment_opinion
				}
			}
		}
		duel = {
			skill = prowess
			value = high_skill_rating
			# Success: you make the beasts do your bid!
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = coronation_banquet.1070.e.success
				send_interface_toast = {
					title = coronation_banquet.1070.e.tt.success
					left_icon = root
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_beasts_charm_success_log
							tags = { good }
							score = 20
							character = root

							# Effect
							root = {
								add_character_modifier = {
									modifier = ep2_beastmaster_modifier
									years = 20
								}
								add_prestige = medium_prestige_gain
							}
						}
						every_attending_character = {
							custom = custom.every_attending_character
							limit = {
								NOT = { this = root }
							}
							add_opinion = {
								target = root
								modifier = impressed_opinion
								opinion = 25
							}
						}
					}
					root = {
						stress_impact = {
							base = minor_stress_impact_loss
							brave = medium_stress_impact_loss
							gregarious = medium_stress_impact_loss
							arrogant = major_stress_impact_loss
							ambitious = major_stress_impact_loss
						}
					}
				}
			}
			# Failure: the beasts disagree with you
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = coronation_banquet.1070.e.failure
				send_interface_toast = {
					title = coronation_banquet.1070.e.tt.failure
					left_icon = root
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_beasts_charm_failure_log
							tags = { bad }
							score = 20
							character = root

							# Effect
							root = {
								random_list = {
									20 = {
										custom_tooltip = coronation_banquet.1070.e.tt.failure_1
										scope:activity = {
											every_attending_character = {
												custom = custom.every_attending_character
												limit = {
													NOT = { this = root }
												}
												add_opinion = {
													target = root
													modifier = laughingstock_opinion
												}
											}
										}
									}
									50 = {
										increase_wounds_effect = { REASON = wild_animal }
									}
									30 = {
										trigger = {
											NOT = { has_trait = maimed }
										}
										add_trait = maimed
									}
									30 = {
										trigger = {
											NOT = { has_trait = one_eyed }
										}
										add_trait = one_eyed
									}
									30 = {
										trigger = {
											NOT = { has_trait = one_legged }
										}
										add_trait = one_legged
									}
								}
							}
						}
					}
				}
				stress_impact = {
					arrogant = medium_stress_impact_gain
					ambitious = medium_stress_impact_gain
					stubborn = medium_stress_impact_gain
					lazy = major_stress_impact_gain
					content = major_stress_impact_gain
				}
			}
		}
		ai_chance = {
			base = 100
			modifier = {
				has_trait = arrogant
				add = 75
			}
			modifier = {
				has_trait = ambitious
				add = 50
			}
			modifier = {
				has_trait = stubborn
				add = 50
			}
			modifier = {
				has_trait = lazy
				add = -75
			}
			modifier = {
				has_trait = content
				add = -50
			}
		}
	}

	#Option B: jump in to save the day!
	option = {
		name = coronation_banquet.1070.b
		trigger = {
			has_character_flag = 1070_exotic_fiends_bad
			NOT = { exists = scope:1070_target }
		}
		duel = {
			skill = prowess
			value = high_skill_rating
			# Success: you calm down the beasts
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = coronation_banquet.1070.b.success
				send_interface_toast = {
					title = coronation_banquet.1070.b.tt.success
					left_icon = root
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_beasts_calmed_success_log
							tags = { good }
							score = 20
							character = root

							# Effect
							root = {
								add_character_modifier = {
									modifier = ep2_beastmaster_modifier
									years = 20
								}
							}
						}
						every_attending_character = {
							custom = custom.every_attending_character
							limit = {
								NOT = { this = root }
							}
							add_opinion = {
								target = root
								modifier = impressed_opinion
								opinion = 25
							}
						}
					}
					root = {
						stress_impact = {
							base = minor_stress_impact_loss
							ambitious = medium_stress_impact_loss
							lifestyle_hunter = medium_stress_impact_loss
							brave = major_stress_impact_loss
							gregarious = major_stress_impact_loss
							arrogant = major_stress_impact_loss
						}
					}
				}
			}
			# Failure: the beasts disagree with you
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = coronation_banquet.1070.b.failure
				send_interface_toast = {
					title = coronation_banquet.1070.e.tt.failure
					left_icon = root
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_beasts_calmed_failure_log
							tags = { good }
							score = 20
							character = root

							# Effect
							root = {
								random_list = {
									50 = {
										increase_wounds_effect = { REASON = wild_animal }
									}
									30 = {
										trigger = {
											NOT = { has_trait = maimed }
										}
										add_trait = maimed
									}
									30 = {
										trigger = {
											NOT = { has_trait = one_eyed }
										}
										add_trait = one_eyed
									}
									30 = {
										trigger = {
											NOT = { has_trait = one_legged }
										}
										add_trait = one_legged
									}
								}
							}
						}
						every_attending_character = {
							custom = custom.every_attending_character
							limit = {
								NOT = { this = scope:host }
							}
							add_opinion = {
								target = scope:host
								modifier = wedding_scary_entertainment_opinion
							}
						}
					}
					stress_impact = {
						arrogant = medium_stress_impact_gain
						ambitious = medium_stress_impact_gain
						lifestyle_hunter = medium_stress_impact_gain
						lazy = medium_stress_impact_gain
						craven = major_stress_impact_gain
					}
				}
			}
		}
		ai_chance = {
			base = 100
			modifier = {
				has_trait = arrogant
				add = 50
			}
			modifier = {
				has_trait = brave
				add = 75
			}
			modifier = {
				has_trait = compassionate
				add = 25
			}
			modifier = {
				has_trait = lifestyle_hunter
				add = 25
			}
			modifier = {
				hunt_lifestyle_track_greater_equal_trigger = { TRACK = hunter GREATER_EQUAL = 50 }
				add = 25
			}
			modifier = {
				hunt_lifestyle_track_greater_equal_trigger = { TRACK = hunter GREATER_EQUAL = 100 }
				add = 25
			}
			modifier = {
				has_trait = lazy
				add = -75
			}
			modifier = {
				has_trait = craven
				add = -100
			}
		}
	}

	#Option G: jump in to save the intent target!
	option = {
		name = coronation_banquet.1070.g
		trigger = {
			has_character_flag = 1070_exotic_fiends_bad
			exists = scope:1070_target
			NOT = { has_activity_intent = murder_attendee_intent }
		}
		duel = {
			skill = prowess
			value = high_skill_rating
			# Success: you calm down the beasts
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = coronation_banquet.1070.g.success
				send_interface_toast = {
					title = coronation_banquet.1070.g.tt.success
					left_icon = scope:1070_target
					set_relation_friend = { reason = friend_coronation_saved_from_beasts target = scope:1070_target }
					if = {
						limit = { has_activity_intent = woo_attendee_intent }
						progress_towards_lover_effect = {
							REASON = friend_coronation_saved_from_beasts
							CHARACTER = scope:1070_target
							OPINION = default_lover_opinion
						}
					}
					else_if = {
						limit = {
							has_activity_intent = diplomatic_intent
							intent_target = scope:1070_target
						}
						add_hook = {
							type = indebted_hook
							target = scope:1070_target
						}
						create_alliance = {
							target = scope:1070_target
							allied_through_owner = root
							allied_through_target = scope:1070_target
						}
						scope:1070_target = {
							add_opinion = {
								target = root
								modifier = event_negotiated_alliance_opinion
							}
						}
						complete_activity_intent = yes
					}
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_beasts_rescue_success_log
							tags = { good }
							score = 20
							character = root
							target = scope:1070_target

							# Effect
							root = {
								add_character_modifier = {
									modifier = ep2_beastmaster_modifier
									years = 20
								}
							}
							scope:1070_target = {
								add_opinion = {
									target = root
									modifier = grateful_opinion
									opinion = 40
								}
							}
						}
						every_attending_character = {
							custom = custom.every_attending_character
							limit = {
								NOR = {
									this = root
									this = scope:1070_target
								}
							}
							add_opinion = {
								target = root
								modifier = impressed_opinion
								opinion = 25
							}
						}
					}
					root = {
						stress_impact = {
							base = minor_stress_impact_loss
							ambitious = medium_stress_impact_loss
							lifestyle_hunter = medium_stress_impact_loss
							brave = major_stress_impact_loss
							gregarious = major_stress_impact_loss
							arrogant = major_stress_impact_loss
						}
					}
				}
			}
			# Failure: the beasts disagree with you
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = coronation_banquet.1070.g.failure
				send_interface_toast = {
					title = coronation_banquet.1070.g.tt.failure
					left_icon = root
					right_icon = scope:1070_target
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_beasts_rescue_failure_log
							tags = { bad }
							score = 20
							character = root
							target = scope:1070_target

							# Effect
							root = {
								random_list = {
									50 = {
										increase_wounds_effect = { REASON = wild_animal }
									}
									30 = {
										trigger = {
											NOT = { has_trait = maimed }
										}
										add_trait = maimed
									}
									30 = {
										trigger = {
											NOT = { has_trait = one_eyed }
										}
										add_trait = one_eyed
									}
									30 = {
										trigger = {
											NOT = { has_trait = one_legged }
										}
										add_trait = one_legged

									}
								}
							}
							scope:1070_target = { increase_wounds_effect = { REASON = wild_animal } }
						}
						every_attending_character = {
							custom = custom.every_attending_character
							limit = {
								NOT = { this = scope:host }
							}
							add_opinion = {
								target = scope:host
								modifier = wedding_scary_entertainment_opinion
							}
						}
					}
					stress_impact = {
						arrogant = medium_stress_impact_gain
						ambitious = medium_stress_impact_gain
						lifestyle_hunter = medium_stress_impact_gain
						lazy = medium_stress_impact_gain
						craven = major_stress_impact_gain
					}
				}
			}
		}
		ai_chance = {
			base = 100
			modifier = {
				has_trait = arrogant
				add = 50
			}
			modifier = {
				has_trait = brave
				add = 75
			}
			modifier = {
				has_trait = compassionate
				add = 25
			}
			modifier = {
				has_trait = lifestyle_hunter
				add = 25
			}
			modifier = {
				hunt_lifestyle_track_greater_equal_trigger = { TRACK = hunter GREATER_EQUAL = 50 }
				add = 25
			}
			modifier = {
				hunt_lifestyle_track_greater_equal_trigger = { TRACK = hunter GREATER_EQUAL = 100 }
				add = 25
			}
			modifier = {
				has_trait = lazy
				add = -75
			}
			modifier = {
				has_trait = craven
				add = -100
			}
		}
	}

	#Option H: let the beasts kill your target
	option = {
		name = coronation_banquet.1070.h
		trigger = {
			has_character_flag = 1070_exotic_fiends_bad
			exists = scope:1070_target
			has_activity_intent = murder_attendee_intent
		}
		custom_tooltip = available_because_intent_tt
		scope:1070_target = {
			duel = {
				skill = prowess
				value = high_skill_rating
				# Success: they survive
				40 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = 3.5
						min = -49
					}
					desc = coronation_banquet.1070.h.survive
					root = {
						send_interface_toast = {
							title = coronation_banquet.1070.h.tt.survive
							left_icon = scope:1070_target
							stress_impact = {
								ambitious = minor_stress_impact_gain
								callous = minor_stress_impact_gain
								deceitful = medium_stress_impact_gain
								arrogant = medium_stress_impact_gain
								deceitful = medium_stress_impact_gain
								vengeful = medium_stress_impact_gain
								sadistic = major_stress_impact_gain
							}
						}
					}
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_beasts_murder_survive_log
							tags = { intent murder }
							score = 50
							character = scope:1070_target
						}
					}
				}
				# Failure: the beasts kill them
				60 = {
					compare_modifier = {
						value = scope:duel_value
						multiplier = -3.5
						min = -49
					}
					desc = coronation_banquet.1070.h.kill
					root = {
						complete_activity_intent = yes
						send_interface_toast = {
							title = coronation_banquet.1070.h.tt.kill
							left_icon = scope:1070_target
							scope:activity = {
								add_activity_log_entry = {
									key = wedding_beasts_murder_kill_log
									tags = { intent murder }
									score = 50
									character = scope:1070_target

									# Effect
									scope:1070_target = {
										 death = { death_reason = death_wild_animal }
									}
								}
								every_attending_character = {
									custom = custom.every_attending_character
									limit = {
										NOT = { this = scope:host }
									}
									add_opinion = {
										target = scope:host
										modifier = wedding_scary_entertainment_opinion
									}
								}
							}
							stress_impact = {
								compassionate = major_stress_impact_gain
								ambitious = minor_stress_impact_loss
								callous = minor_stress_impact_loss
								deceitful = medium_stress_impact_loss
								arrogant = medium_stress_impact_loss
								deceitful = medium_stress_impact_loss
								vengeful = medium_stress_impact_loss
								sadistic = major_stress_impact_loss
							}
						}
					}
				}
			}
		}
		ai_chance = {
			base = 100
			modifier = {
				has_trait = compassionate
				add = -75
			}
			modifier = {
				has_trait = lazy
				add = 25
			}
			modifier = {
				has_trait = craven
				add = 100
			}
			modifier = {
				has_trait = deceitful
				add = 100
			}
		}
	}

	#Option C: call master of hunt
	option = {
		name = coronation_banquet.1070.c
		trigger = {
			has_character_flag = 1070_exotic_fiends_bad
			exists = scope:m_hunt
			this = scope:host
		}
		duel = {
			skill = prowess
			value = average_skill_rating
			50 = {
				#Master of hunt knows what they are doing
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = coronation_banquet.1070.c.success
				send_interface_toast = {
					title = coronation_banquet.1070.c.tt.success
					left_icon = scope:m_hunt
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_beasts_calmed_success_log
							tags = { good }
							score = 20
							character = scope:m_hunt

							# Effect
							scope:m_hunt = {
								add_character_modifier = {
									modifier = ep2_beastmaster_modifier
									years = 20
								}
							}
						}
						every_attending_character = {
							custom = custom.every_attending_character
							limit = {
								NOT = { this = scope:host }
							}
							add_opinion = {
								target = scope:host
								modifier = wedding_good_entertainment_opinion
							}
						}
					}
					stress_impact = {
						base = minor_stress_impact_loss
					}
				}
			}
			50 = {
				#Why are you paying this guy again??
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = coronation_banquet.1070.c.failure
				send_interface_toast = {
					title = coronation_banquet.1070.c.tt.failure
					left_icon = scope:m_hunt
					scope:host = {
						remove_character_modifier = hunt_captive_beast_modifier
					}
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_beasts_master_failure_log
							tags = { bad }
							score = 20
							character = scope:m_hunt

							# Effect
							scope:m_hunt = { increase_wounds_effect = { REASON = wild_animal } }
						}
						every_attending_character = {
							custom = custom.every_attending_character
							limit = {
								NOT = { this = scope:host }
							}
							add_opinion = {
								target = scope:host
								modifier = wedding_scary_entertainment_opinion
							}
						}
					}
					stress_impact = {
						greedy = medium_stress_impact_gain
						arrogant = medium_stress_impact_gain
					}
				}
			}
		}
		ai_chance = {
			base = 100
		}
	}

	#Option F: GUARDS!!
	option = {
		name = coronation_banquet.1070.f
		trigger = {
			has_character_flag = 1070_exotic_fiends_bad
			this = scope:host
			NOT = { exists = scope:m_hunt }
		}
		scope:host = {
			remove_character_modifier = hunt_captive_beast_modifier
		}
		scope:activity = {
			add_activity_log_entry = {
				key = wedding_beasts_guards_log
				tags = { bad }
				score = 10
				character = scope:host
			}
			every_attending_character = {
				custom = custom.every_attending_character
				limit = {
					NOT = { this = scope:host }
				}
				add_opinion = {
					target = scope:host
					modifier = wedding_scary_entertainment_opinion
				}
			}
		}
		ai_chance = {
			base = 100
		}
	}

	#Option D: run and hide!
	option = {
		name = coronation_banquet.1070.d
		flavor = coronation_banquet.1070.d.tt
		trigger = {
			has_character_flag = 1070_exotic_fiends_bad
			NOT = { this = scope:host }
		}
		scope:activity = {
			add_activity_log_entry = {
				key = wedding_beasts_fled_log
				tags = { bad }
				score = 10
				character = scope:host
			}
			every_attending_character = {
				custom = custom.every_attending_character
				limit = {
					NOT = { this = scope:host }
				}
				add_opinion = {
					target = scope:host
					modifier = wedding_scary_entertainment_opinion
				}
			}
			every_attending_character = {
				custom = custom.every_attending_character
				limit = {
					NOT = { this = root }
				}
				add_opinion = {
					target = root
					modifier = coward_opinion
				}
			}
		}
		stress_impact = {
			compassionate = medium_stress_impact_gain
			brave = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				has_trait = callous
				add = 50
			}
			modifier = {
				has_trait = shy
				add = 75
			}
			modifier = {
				has_trait = reclusive
				add = 150
			}
		}
	}

	after = {
		remove_character_flag = busy_in_banquet_event
		if = {
			limit = {
				exists = scope:m_hunt
			}
			scope:m_hunt = { remove_character_flag = busy_in_banquet_event }
		}
	}
}

##################################################
# A Friend Is Monopolizing Your Attention
# by Luke Bean
# coronation_banquet.1310
##################################################

coronation_banquet.1310 = {
	type = activity_event
	title = coronation_banquet.1310.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					this = scope:host
				}
				desc = coronation_banquet.1310.desc_host
			}
			desc = coronation_banquet.1310.desc_guest
		}
	}

	theme = wedding_banquet_activity
	left_portrait = {
		character = root
		animation = laugh
	}
	center_portrait = {
		character = scope:other_guest
		animation = disapproval
	}
	right_portrait = {
		character = scope:friend
		animation = wedding_drunk
	}

	cooldown = { years = 10 }

	trigger = {
		scope:activity = {
			any_attending_character = {
				coronation_1310_friend_trigger = yes
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			has_trait = shy
			add = 1
		}
		modifier = {
			has_trait = lifestyle_reveler
			add = 1
		}
		modifier = {
			has_activity_intent = reduce_stress_intent
			add = 1
		}
		modifier = {
			is_ai = yes
			factor = 0.1
		}
	}

	immediate = {
		scope:activity = {
			random_attending_character = {
				limit = {
					coronation_1310_friend_trigger = yes
				}
				save_scope_as = friend
			}
		}
		scope:activity.special_guest:coronation_target = {
			save_scope_as = coronation_target
		}
		random_list = {
			100 = {
				trigger = {
					scope:activity = {
						any_attending_character = {
							NOT = {
								any_relation = { type = friend this = root }
								any_relation = { type = friend this = scope:friend }
								this = root
								this = scope:friend
							}
							is_adult = yes
							is_ai = yes
							OR = {
								is_close_family_of = scope:coronation_target
							}
						}
					}
				}
				scope:activity = {
					random_attending_character = {
						limit = {
							NOT = {
								any_relation = { type = friend this = root }
								any_relation = { type = friend this = scope:friend }
								this = root
								this = scope:friend
							}
							is_adult = yes
							is_ai = yes
							OR = {
								is_close_family_of = scope:coronation_target
							}
						}
						save_scope_as = other_guest
					}
				}
			}
			1 = {
				scope:activity = { random_attending_character = { save_scope_as = other_guest } }
			}
		}
	}

	# What a joy to have FRIEND here with me!
	option = {
		name = coronation_banquet.1310.a
		scope:activity = {
			add_activity_log_entry = {
				key = wedding_banquet_bond_log
				tags = { good }
				score = 25
				character = root
				target = scope:friend

				# Effect
				root = {
					if = {
						limit = {
							can_set_relation_best_friend_trigger = { CHARACTER = scope:friend }
						}
						set_relation_best_friend = { reason = best_friend_great_time_at_coronation copy_reason = friend target = scope:friend }
					}
					if = {
						limit = {
							this = scope:host
						}
						reverse_add_opinion = {
							target = scope:other_guest
							modifier = insult_opinion
							opinion = -30
						}
					}
					stress_impact = {
						base = medium_stress_impact_loss
					}
				}
			}
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_honor = -0.1
			}
			modifier = {
				has_trait = lustful
				add = -15
			}
			modifier = {
				has_trait = gregarious
				add = -25
			}
		}
	}

	# OTHER GUEST, come join us!
	option = {
		name = coronation_banquet.1310.b
		random_list = {
			50 = { #Third person befriends you both
				desc = coronation_banquet.1310.b.newfriends
				compatibility_modifier = {
					who = scope:friend
					compatibility_target = scope:other_guest
					multiplier = 3
					max = 50
					min = -30
				}
				send_interface_toast = {
					title = coronation_banquet.1310.b.newfriends
					left_icon = scope:other_guest
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_cannot_escape_friends_log
							tags = { good }
							score = 25
							character = root
							target = scope:other_guest

							# Effect
							root = {
								if = {
									limit = {
										can_set_relation_friend_trigger = { CHARACTER = scope:other_guest }
									}
									set_relation_friend = {
										reason = friend_great_time_at_coronation
										target = scope:other_guest
										province = root.location
									}
								}
								stress_impact = {
									gregarious = medium_stress_impact_loss
								}
							}
							scope:friend = {
								if = {
									limit = {
										can_set_relation_friend_trigger = { CHARACTER = scope:other_guest }
									}
									set_relation_friend = {
										reason = friend_great_time_at_coronation
										target = scope:other_guest
										province = root.location
									}
								}
							}
						}
					}
				}
			}
			50 = { #Everyone has a good time
				desc = coronation_banquet.1310.b.goodtime
				compatibility_modifier = {
					who = scope:friend
					compatibility_target = scope:other_guest
					multiplier = 2
					max = 35
					min = -35
				}
				send_interface_toast = {
					title = coronation_banquet.1310.b.goodtime
					left_icon = scope:other_guest
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_cannot_escape_goodtime_log
							tags = { betrothal }
							score = 25
							character = root
							target = scope:other_guest

							# Effect
							root = {
								reverse_add_opinion = {
									target = scope:other_guest
									modifier = friendliness_opinion
									opinion = 30
								}
								reverse_add_opinion = {
									target = scope:friend
									modifier = friendliness_opinion
									opinion = 30
								}
								stress_impact = {
									gregarious = minor_stress_impact_loss
								}
							}
						}
					}
				}
			}
			40 = { #Everyone has a bad time
				desc = coronation_banquet.1310.b.badtime
				compatibility_modifier = {
					who = scope:friend
					compatibility_target = scope:other_guest
					multiplier = -3
					max = 60
					min = -9
				}
				send_interface_toast = {
					title = coronation_banquet.1310.b.badtime
					left_icon = scope:other_guest
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_cannot_escape_badtime_log
							tags = { betrothal }
							score = 25
							character = root
							target = scope:other_guest

							#Effect
							if = {
								limit = {
									scope:friend = { can_set_relation_rival_trigger = { CHARACTER = scope:other_guest } }
								}
								scope:friend = {
									set_relation_rival = {
										target = scope:other_guest
										reason = rival_bad_time_at_coronation
									}
								}
							}
							root = {
								stress_impact = {
									base = minor_stress_impact_gain
								}
							}
						}
					}
				}
			}
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_sociability = 0.5
			}
			modifier = {
				has_trait = gregarious
				add = 20
			}
			modifier = {
				has_trait = shy
				add = -75
			}
		}
	}

	# Let's sneak out so we can talk properly!
	option = {
		name = coronation_banquet.1310.c
		scope:activity = {
			add_activity_log_entry = {
				key = wedding_cannot_escape_sneak_log
				tags = { betrothal }
				score = 25
				character = root
				target = scope:friend

				# Effect
				root = {
					if = {
						limit = { NOT = { has_trait = confider } }
						add_trait = confider
					}
					else = {
						add_stress = major_stress_impact_loss
					}
				}
				scope:other_guest = {
					if = {
						limit = {
							this = scope:host
						}
						progress_towards_rival_effect = {
							REASON = rival_dishonored_coronation_banquet
							CHARACTER = root
							OPINION = 0
						}
					}
					else = {
						add_opinion = {
							target = root
							modifier = insult_opinion
							opinion = -30
						}
					}
				}
			}
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_sociability = -0.5
			}
			modifier = {
				has_trait = shy
				add = 20
			}
			modifier = {
				has_trait = gregarious
				add = -50
			}
		}
	}

	option = { # You must excuse me, my friend.
		name = coronation_banquet.1310.d
		flavor = coronation_banquet.1310.d.tt
		scope:activity = {
			add_activity_log_entry = {
				key = wedding_cannot_escape_excuse_log
				tags = { betrothal }
				score = 25
				character = root
				target = scope:other_guest

				# Effect
				scope:other_guest = {
					progress_towards_friend_effect = {
						REASON = friend_great_time_at_coronation
						CHARACTER = root
						OPINION = 0
					}
				}
			}
		}
		stress_impact = {
			gregarious = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_honor = 0.5
			}
			modifier = {
				has_trait = gregarious
				add = -20
			}
		}
	}
}

######################################
# A Rival Seeks Forgiveness
# by Luke Bean
# coronation_banquet.1320
######################################

coronation_banquet.1320 = {
	type = activity_event
	title = coronation_banquet.1320.t
	desc = {
		desc = coronation_banquet.1320.desc_intro
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:role = flag:guest
					scope:rival_role = flag:host
				}
				desc = coronation_banquet.1320.desc_guest_vs_host
			}
			desc = coronation_banquet.1320.desc_guest_vs_guest
		}
		desc = coronation_banquet.1320.desc_outro
	}
	theme = wedding_banquet_activity
	left_portrait = {
		character = root
		animation = personality_cynical
	}
	right_portrait = {
		character = scope:rival
		animation = shame
	}

	cooldown = { years = 10 }

	trigger = {
		scope:activity = {
			any_attending_character = {
				coronation_1320_forgiving_rival_trigger = yes
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			OR = {
				root = scope:host
				scope:host = {
					coronation_1320_forgiving_rival_trigger = yes
				}
			}
			add = 5 # Very, very likely to happen if one rival invited and the other accepted
		}
		modifier = {
			root = scope:activity.special_guest:coronation_target
			add = 3 # Much more likely to happen on the occasion of one of the rivals' weddings
		}
		modifier = {
			has_trait = forgiving ### More likely to happen if the rival thinks root is the sort of person who might forgive them
			add = 1
		}
		modifier = {
			scope:activity = {
				any_attending_character = {
					coronation_1320_forgiving_rival_trigger = yes
					has_trait = forgiving
				}
			}
			add = 1
		}
		modifier = {
			scope:activity = {
				any_attending_character = {
					coronation_1320_forgiving_rival_trigger = yes
					has_trait = humble
				}
			}
			add = 1
		}
		modifier = {
			scope:activity = {
				any_attending_character = {
					coronation_1320_forgiving_rival_trigger = yes
					has_trait = compassionate
				}
			}
			add = 1
		}
		modifier = {
			scope:activity = {
				any_attending_character = {
					coronation_1320_forgiving_rival_trigger = yes
					has_trait = zealous
					faith = { trait_is_virtue = forgiving }
				}
			}
			add = 1
		}
	}

	immediate = {
		scope:activity = {
			random_attending_character = {
				limit = {
					coronation_1320_forgiving_rival_trigger = yes
					OR = {
						has_trait = forgiving
						has_trait = humble
						has_trait = compassionate
						AND = {
							has_trait = zealous
							faith = { trait_is_virtue = forgiving }
						}
					}
				}
				alternative_limit = {
					coronation_1320_forgiving_rival_trigger = yes
				}
				save_scope_as = rival
			}
		}
		if = {
			limit = {
				root = scope:host
			}
			save_scope_value_as = {
				name = role
				value = flag:host
			}
		}
		else = {
			save_scope_value_as = {
				name = role
				value = flag:guest
			}
		}
		if = {
			limit = {
				scope:rival = scope:host
			}
			save_scope_value_as = {
				name = rival_role
				value = flag:host
			}
		}
		else = {
			save_scope_value_as = {
				name = rival_role
				value = flag:guest
			}
		}
	}

	# Embrace RIVAL and let bygones be bygones!
	option = {
		name = coronation_banquet.1320.a
		scope:activity = {
			add_activity_log_entry = {
				key = wedding_embraced_rival_log
				tags = { rival }
				score = 25
				character = root
				target = scope:rival

				#Effect
				root = {
					remove_relation_rival = scope:rival
					random_list = {
						80 = {
							send_interface_toast = {
								title = coronation_banquet.1320.a.friendliness
								left_icon = scope:rival
								reverse_add_opinion = {
									target = scope:rival
									modifier = friendliness_opinion
									opinion = 30
								}
							}
						}
						20 = {
							compatibility_modifier = {
								who = root
								compatibility_target = scope:rival
								multiplier = 3
								max = 50
								min = -30
							}
							send_interface_toast = {
								title = coronation_banquet.1320.a.friend
								left_icon = scope:rival
								set_relation_friend = { reason = friend_reconciled_at_coronation target = scope:rival }
							}
						}
					}
				}
			}
		}
		stress_impact = {
			vengeful = medium_stress_impact_gain
			arrogant = medium_stress_impact_gain
			forgiving = massive_stress_impact_loss
			compassionate = major_stress_impact_loss
			gregarious = minor_stress_impact_loss
			humble = minor_stress_impact_loss
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_honor = -0.2
				ai_compassion = 0.5
				ai_sociability = 0.2
			}
			modifier = {
				has_trait = vengeful
				add = -100
			}
			modifier = {
				has_trait = arrogant
				add = -50
			}
			modifier = {
				has_trait = forgiving
				add = 100
			}
		}
	}

	# Hurl a DISH in RIVAL's face.
	option = {
		name = coronation_banquet.1320.b
		scope:activity = {
			add_activity_log_entry = {
				key = wedding_dished_rival_log
				tags = { rival }
				score = 25
				character = root
				target = scope:rival

				# Effect
				root = {
					add_dread = minor_dread_gain
				}
			}
		}
		random_list = {
			100 = {
				desc = coronation_banquet.1310.b.nowound
				send_interface_toast = {
					title = coronation_banquet.1310.b.nowound
					left_icon = scope:rival
					reverse_add_opinion = {
						target = scope:rival
						modifier = angry_opinion
						opinion = -50
					}
				}
			}
			30 = {
				desc = coronation_banquet.1310.b.wound
				trigger = {
					can_set_relation_nemesis_trigger = { CHARACTER = scope:rival }
				}
				send_interface_toast = {
					title = coronation_banquet.1310.b.wound
					left_icon = scope:rival
					scope:rival = { increase_wounds_effect = { REASON = fight } }
					set_relation_nemesis = { reason = nemesis_spurned_reconciliation_at_coronation target = scope:rival }
				}
			}
			30 = {
				desc = coronation_banquet.1310.b.wound
				trigger = {
					NOT = { can_set_relation_nemesis_trigger = { CHARACTER = scope:rival } }
				}
				send_interface_toast = {
					title = coronation_banquet.1310.b.wound
					left_icon = scope:rival
					scope:rival = { increase_wounds_effect = { REASON = fight } }
				}
			}
		}
		if = {
			limit = {
				has_activity_intent = sabotage_coronation_intent
			}
			stress_impact = {
				base = minor_stress_impact_loss
				vengeful = major_stress_impact_loss
			}
		}
		else = {
			stress_impact = {
				vengeful = medium_stress_impact_loss
				arrogant = medium_stress_impact_loss
				forgiving = massive_stress_impact_gain
				compassionate = major_stress_impact_gain
				gregarious = minor_stress_impact_gain
				humble = minor_stress_impact_gain
			}
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_honor = -0.5
				ai_compassion = -0.5
			}
			modifier = {
				has_trait = wrathful
				add = 30
			}
			modifier = {
				has_trait = impatient
				add = 30
			}
		}
	}

	# What's forgiveness worth to you?
	option = {
		name = coronation_banquet.1320.c

		duel = {
			target = scope:rival
			skill = diplomacy
			25 = {
				desc = coronation_banquet.1310.c.hook
				trigger = {
					can_add_hook = {
						target = scope:rival
						type = favor_hook
					}
				}
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
				}
				send_interface_toast = {
					title = coronation_banquet.1310.c.hook
					left_icon = scope:rival
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_hooked_rival_log
							tags = { rival }
							score = 25
							character = root
							target = scope:rival

							# Effect
							root = {
								remove_relation_rival = scope:rival
								add_hook = {
									target = scope:rival
									type = favor_hook
								}
							}
						}
					}
				}
			}
			30 = {
				desc = coronation_banquet.1310.c.apology
				compare_modifier = {
					value = scope:duel_value
					multiplier = 2
				}
				send_interface_toast = {
					title = coronation_banquet.1310.c.apology
					left_icon = scope:rival
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_apology_rival_log
							tags = { rival }
							score = 25
							character = root
							target = scope:rival

							# Effect
							root = {
								remove_relation_rival = scope:rival
								add_prestige = medium_prestige_value
							}
						}
					}
				}
			}
			35 = {
				desc = coronation_banquet.1310.c.refusal
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
				}
				send_interface_toast = {
					title = coronation_banquet.1310.c.refusal
					left_icon = scope:rival
					scope:activity = {
						add_activity_log_entry = {
							key = wedding_refusal_rival_log
							tags = { rival }
							score = 25
							character = root
							target = scope:rival

							# Effect
							root = {
								reverse_add_opinion = {
									target = scope:rival
									modifier = angry_opinion
									opinion = -50
								}
							}
						}
					}
				}
			}
		}

		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_rationality = 1
			}
			modifier = {
				has_trait = ambitious
				add = 10
			}
		}
	}

	#Ignore RIVAL until they leave.
	option = {
		name = coronation_banquet.1320.d
		add_prestige = minor_prestige_gain
		scope:rival = { add_prestige = minor_prestige_loss }
		reverse_add_opinion = {
			target = scope:rival
			modifier = angry_opinion
			opinion = -20
		}
		if = {
			limit = {
				has_activity_intent = reduce_stress_intent
			}
			stress_impact = {
				base = minor_stress_impact_loss
			}
		}
		ai_chance = {
			base = 80
			modifier = {
				has_activity_intent = reduce_stress_intent
				add = 50
			}
			ai_value_modifier = {
				ai_energy = -0.5
			}
		}
	}
}

############################
## Wedding Banquet Events
## 2000-2999
## by Veronica Pazos
############################

# Diplomatic Intent: You ask a friend of your target's for info about them

coronation_banquet.2000 = {
	type = activity_event
	title = coronation_banquet.2000.t
	desc = {
		desc = coronation_banquet.2000.desc.intro
		random_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						intent_target = {
							coronation_2000_is_lustful = yes
						}
						AND = {
							intent_target = {
								coronation_2000_is_lustful = no
							}
							scope:target_friend = {
								coronation_2000_is_fishy = yes
							}
						}
					}
				}
				desc = coronation_banquet.2000.desc.lustful
			}
			triggered_desc = {
				trigger = {
					OR = {
						intent_target = {
							coronation_2000_is_nerd = yes
						}
						AND = {
							intent_target = {
								coronation_2000_is_nerd = no
							}
							scope:target_friend = {
								coronation_2000_is_fishy = yes
							}
						}
					}
				}
				desc = coronation_banquet.2000.desc.nerd
			}
			triggered_desc = {
				trigger = {
					OR = {
						intent_target = {
							coronation_2000_is_valiant = yes
						}
						AND = {
							intent_target = {
								coronation_2000_is_valiant = no
							}
							scope:target_friend = {
								coronation_2000_is_fishy = yes
							}
						}
					}
				}
				desc = coronation_banquet.2000.desc.valiant
			}
			triggered_desc = {
				trigger = {
					OR = {
						intent_target = {
							coronation_2000_is_social = yes
						}
						AND = {
							intent_target = {
								coronation_2000_is_social = no
							}
							scope:target_friend = {
								coronation_2000_is_fishy = yes
							}
						}
					}
				}
				desc = coronation_banquet.2000.desc.social
			}
			triggered_desc = {
				trigger = {
					OR = {
						intent_target = {
							coronation_2000_is_fishy = yes
						}
						AND = {
							intent_target = {
								coronation_2000_is_fishy = no
							}
							scope:target_friend = {
								coronation_2000_is_fishy = yes
							}
						}
					}
				}
				desc = coronation_banquet.2000.desc.fishy
			}
		}
	}
	theme = wedding_banquet_activity
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = {
				coronation_2000_is_fishy = yes
			}
			animation = scheme
		}
		animation = admiration
	}
	right_portrait = {
		character = scope:target_friend
		animation = drink_goblet
	}
	lower_center_portrait = scope:diplo_target

	cooldown = { years = 5 }

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	trigger = {
		has_activity_intent = diplomatic_intent
		intent_target = { #there's something we can say of them
			is_alive = yes
			OR = {
				coronation_2000_is_valiant = yes
				coronation_2000_is_nerd = yes
				coronation_2000_is_social = yes
				coronation_2000_is_fishy = yes
				coronation_2000_is_lustful = yes
			}
		}
		scope:activity = { #there's someone that knows the person
			any_attending_character = {
				coronation_2000_valid_friend = yes
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			factor = 2
			scope:activity = { #there's a guy that's best friends with target
				any_attending_character = {
					has_relation_best_friend = root.intent_target
				}
			}
		}
		modifier = {
			factor = 1.5
			scope:activity = { #their soulmate is around
				any_attending_character = {
					has_relation_soulmate = root.intent_target
				}
			}
		}
	}

	immediate = {
		scope:activity = { #there's someone that knows the person
			random_attending_character = {
				limit = {
					coronation_2000_valid_friend = yes
				}
				save_scope_as = target_friend
			}
		}
		intent_target = { save_scope_as = diplo_target }
	}

	#Awesome, let's go!
	option = {
		name = coronation_banquet.2000.a
		custom_tooltip = coronation_banquet.2000.a.tt
		trigger_event = coronation_banquet.2001
		stress_impact = {
			lazy = medium_stress_impact_gain
			patient = medium_stress_impact_gain
			shy = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				OR = {
					has_trait = lazy
					has_trait = patient
					has_trait = shy
				}
			}
		}
	}

	#Are they... lying?
	option = {
		name = coronation_banquet.2000.b
		duel = {
			skill = intrigue
			target = scope:target_friend
			50 = { #they were lying, you catch them
				desc = coronation_banquet.2000.b.success
				show_chance = no
				modifier = {
					add = 20
					scope:target_friend = {
						coronation_2000_is_fishy = yes
					}
				}
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = 5
				}
				send_interface_toast = {
					title = coronation_banquet.2000.b.success
					left_icon = root
					custom_tooltip = coronation_banquet.2000.b.success.tt
					set_variable = {
						name = wbanquet_friend_insight_var
						value = scope:diplo_target
					}
					add_intrigue_skill = 1
					if = {
						limit = { has_lifestyle = intrigue_lifestyle }
						add_intrigue_lifestyle_xp = minor_lifestyle_experience
					}
				}
			}
			50 = { #they weren't lying
				desc = coronation_banquet.2000.b.failure
				show_chance = no
				modifier = {
					add = 50
					scope:target_friend = {
						has_trait = honest
					}
				}
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = 5
				}
				send_interface_toast = {
					title = coronation_banquet.2000.b.failure
					left_icon = scope:target_friend
					scope:target_friend = {
						add_opinion = {
							target = root
							modifier = insult_opinion
							opinion = -5
						}
					}
				}
			}
		}
		stress_impact = {
			reclusive = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = reclusive
			}
		}
	}
}

coronation_banquet.2001 = {
	type = activity_event
	title = coronation_banquet.2001.t
	desc = coronation_banquet.2001.desc
	theme = wedding_banquet_activity
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = {
				coronation_2000_is_fishy = yes
			}
			animation = scheme
		}
		animation = admiration
	}
	right_portrait = {
		character = scope:diplo_target
		triggered_animation = {
			trigger = {
				drinks_alcohol_trigger = yes
			}
			animation = drink_goblet
		}
		animation = happiness
	}

	lower_center_portrait = scope:target_friend

	#Lustful
	option = {
		name = coronation_banquet.2001.a
		set_local_variable = coronation_lustful_var
		ai_chance = {
			base = 100
			modifier = {
				factor = 2
				coronation_2000_is_lustful = yes
			}
		}
	}

	#Nerd
	option = {
		# name = {
		# 	trigger = {
		# 		NOT = { has_trait = dull }
		# 		capital_province = {
		# 			geographical_region = world_europe
		# 		}
		# 	}
		# 	text = coronation_banquet.2001.b
		# }
		name = coronation_banquet.2001.b.dull
		flavor = {
			triggered_desc = {
				trigger = {
					NOT = { has_trait = dull }
				}
				desc = coronation_banquet.2001.b.flavor
			}
		}
		set_local_variable = coronation_nerd_var
		ai_chance = {
			base = 100
			modifier = {
				factor = 2
				coronation_2000_is_nerd = yes
			}
		}
	}

	#Valiant
	option = {
		name = coronation_banquet.2001.c
		set_local_variable = coronation_valiant_var
		ai_chance = {
			base = 100
			modifier = {
				factor = 2
				coronation_2000_is_valiant = yes
			}
		}
	}

	#Social
	option = {
		name = coronation_banquet.2001.d
		set_local_variable = coronation_social_var
		ai_chance = {
			base = 100
			modifier = {
				factor = 2
				coronation_2000_is_social = yes
			}
		}
	}

	#Fishy
	option = {
		name = coronation_banquet.2001.e
		set_local_variable = coronation_fishy_var
		ai_chance = {
			base = 100
			modifier = {
				factor = 2
				coronation_2000_is_fishy = yes
			}
		}
	}

	after = {
		scope:diplo_target = {
			hidden_effect = {
				if = {
					limit = {
						OR = {
							AND = {
								coronation_2000_is_lustful = yes
								has_local_variable = coronation_lustful_var
							}
							AND = {
								coronation_2000_is_nerd = yes
								has_local_variable = coronation_nerd_var
							}
							AND = {
								coronation_2000_is_valiant = yes
								has_local_variable = coronation_valiant_var
							}
							AND = {
								coronation_2000_is_social = yes
								has_local_variable = coronation_social_var
							}
							AND = {
								coronation_2000_is_fishy = yes
								has_local_variable = coronation_fishy_var
							}
						}
					}
					set_local_variable = coronation_2000_got_it_right
				}
			}
		}
		random_list = {
			5 = {
				trigger = {
					scope:diplo_target = { activity_wedding_diplomatic_intent_impressible_target = yes }
				}
				desc = coronation_banquet.2000.after.subjugate
				show_chance = no
				send_interface_toast = {
					title = coronation_banquet.2000.after.subjugate
					left_icon = scope:diplo_target
					custom_tooltip = {
						text = coronation_banquet.2000.after.subjugate.tt
						complete_activity_intent = yes
						create_title_and_vassal_change = {
							type = swear_fealty
							save_scope_as = title_change
							add_claim_on_loss = no
						}
						scope:diplo_target = {
							change_liege = {
								liege = root
								change = scope:title_change
							}
						}
						resolve_title_and_vassal_change = scope:title_change
					}
				}
			}
			10 = {
				desc = coronation_banquet.2000.after.alliance
				show_chance = no
				send_interface_toast = {
					title = coronation_banquet.2000.after.alliance
					left_icon = scope:diplo_target
					custom_tooltip = {
						text = coronation_banquet.2000.after.alliance.tt
						complete_activity_intent = yes
						create_alliance = {
							target = scope:diplo_target
							allied_through_owner = root
							allied_through_target = scope:diplo_target
						}
						scope:diplo_target = {
							add_opinion = {
								target = root
								modifier = event_negotiated_alliance_opinion
							}
						}
					}
				}
			}
			10 = {
				desc = coronation_banquet.2000.after.friends
				show_chance = no
				send_interface_toast = {
					title = coronation_banquet.2000.after.friends
					left_icon = scope:diplo_target
					progress_towards_friend_effect = {
						CHARACTER = scope:diplo_target
						OPINION = 15
						REASON = friend_coronation
					}
				}
			}
			20 = { #only possible if you messed up
				trigger = {
					NOT = { has_local_variable = coronation_2000_got_it_right }
				}
				desc = coronation_banquet.2000.after.insult
				show_chance = no
				send_interface_toast = {
					title = coronation_banquet.2000.after.insult.short
					left_icon = scope:diplo_target
					reverse_add_opinion = {
						target = scope:diplo_target
						modifier = insult_opinion
						opinion = -10
					}
				}
			}
		}
	}
}

############################
## Coronation Ceremony Events
## 4000-4999
## by Veronica Pazos
############################

# Host: Gain Renown Intent - Bring a white animal to the Banquet to flex (it's painted)

coronation_banquet.2010 = {
	type = activity_event
	title = coronation_banquet.2010.t
	desc = coronation_banquet.2010.desc.intro
	theme = wedding_banquet_activity
	left_portrait = {
		character = root
		animation = personality_rational
	}

	cooldown = { years = 5 }

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	trigger = {
		this = scope:host #you're the host
		has_activity_intent = diplomatic_intent
		intent_target = { coronation_2010_impressed = yes }
	}

	weight_multiplier = {
		base = 1
		modifier = {
			factor = 2
			has_trait = deceitful
		}
		modifier = {
			factor = 0.5
			has_trait = honest
		}
	}

	immediate = {
		select_local_animal_effect = { TYPE = big } # Save scope to limit possible animals: any/big/small/dangerous/harmless/prowling
		intent_target = {
			add_to_list = coronation_2010_impressed_list
			save_scope_as = diplo_target
		}
		if = {
			limit = {
				scope:activity = { #there's someone else to impress
					any_attending_character = {
						feast_default_adult_participant_trigger = yes
						NOR = {
							this = root
							this = root.intent_target
						}
						coronation_2010_impressed = yes
					}
				}
			}
			scope:activity = {
				every_attending_character = {
					limit = {
						feast_default_adult_participant_trigger = yes
						NOR = {
							this = root
							this = root.intent_target
						}
						coronation_2010_impressed = yes
					}
					add_to_list = coronation_2010_impressed_list
				}
			}
		}
	}

	#Yeah
	option = {
		name = coronation_banquet.2010.a
		custom_tooltip = coronation_banquet.2010.a.tt
		every_in_list = {
			list = coronation_2010_impressed_list
			custom = coronation_banquet.2010.impressed_list
			add_opinion = {
				modifier = wbanquet_white_animal_opinion
				target = root
				opinion = 20
			}
		}
		#Does anyone suspect?
		hidden_effect = {
			if = {
				limit = {
					scope:diplo_target = {
						OR = {
							has_trait = cynical
							has_trait = callous
						}
						has_any_good_relationship_with_root_trigger = no
					}
				}
				random_list = {
					50 = { #they don't notice
						remove_variable = animal_type
						if = {
							limit = {
								scope:diplo_target = { activity_wedding_diplomatic_intent_impressible_target = yes }
							}
							send_interface_toast = {
								title = coronation_banquet.2000.after.subjugate
								left_icon = scope:diplo_target
								custom_tooltip = {
									text = coronation_banquet.2000.after.subjugate.tt
									complete_activity_intent = yes
									create_title_and_vassal_change = {
										type = swear_fealty
										save_scope_as = title_change
										add_claim_on_loss = no
									}
									scope:diplo_target = {
										change_liege = {
											liege = root
											change = scope:title_change
										}
									}
									resolve_title_and_vassal_change = scope:title_change
								}
							}
						}
					}
					50 = { #they do
						trigger_event = coronation_banquet.2011
					}
				}
			}
			else_if = {
				limit = {
					scope:activity = {
						any_attending_character = {
							feast_default_adult_participant_trigger = yes
							OR = {
								has_trait = cynical
								has_trait = callous
							}
							has_any_good_relationship_with_root_trigger = no
						}
					}
				}
				random_list = {
					50 = { #they don't notice
						remove_variable = animal_type
					}
					50 = { #they do
						trigger_event = coronation_banquet.2011
					}
				}
			}
		}
		remove_short_term_gold = minor_gold_value
		stress_impact = {
			greedy = medium_stress_impact_gain
			honest = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				short_term_gold <= minor_gold_value
			}
			modifier = {
				factor = 0
				OR = {
					has_trait = greedy
					has_trait = honest
				}
			}
		}
	}

	#Nah
	option = {
		name = coronation_banquet.2010.b
		remove_variable = animal_type
		stress_impact = {
			gallant = medium_stress_impact_gain
			gregarious = medium_stress_impact_gain
			lifestyle_reveler = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				OR = {
					has_trait = gallant
					has_trait = gregarious
					has_trait = lifestyle_reveler
				}
			}
			modifier = {
				factor = 1.25
				has_trait = deceitful
			}
		}
	}
}

# Follow up: You get called out

coronation_banquet.2011 = {
	type = activity_event
	title = coronation_banquet.2011.t
	desc = coronation_banquet.2011.desc
	theme = wedding_banquet_activity
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = {
				OR = {
					has_trait = arrogant
					has_trait = wrathful
					has_trait = vengeful
					has_trait = callous
					has_trait = brave
				}
			}
			animation = anger
		}
		animation = stress
	}
	right_portrait = {
		character = scope:doubting_guest
		animation = schadenfreude
	}

	immediate = {
		scope:activity = {
			random_attending_character = {
				limit = {
					OR = {
						has_trait = cynical
						has_trait = callous
					}
					has_any_good_relationship_with_root_trigger = no
				}
				save_scope_as = doubting_guest
			}
		}
	}

	#Confess
	option = {
		name = coronation_banquet.2011.a
		add_prestige = minor_prestige_loss
		add_piety = minor_piety_gain
		scope:doubting_guest = {
			add_opinion = {
				target = root
				opinion = 10
				modifier = pleased_opinion
			}
		}
		stress_impact = {
			arrogant = medium_stress_impact_gain
			ambitious = medium_stress_impact_gain
			deceitful = major_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				OR = {
					has_trait = greedy
					has_trait = honest
				}
			}
		}
	}

	#Double down
	option = {
		name = coronation_banquet.2011.b
		duel = { #they believe you
			skill = intrigue
			target = scope:doubting_guest
			50 = {
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				modifier = {
					factor = 2
					scope:doubting_guest = {
						OR = {
							has_trait = trusting
							has_trait = loyal
						}
					}
				}
				desc = coronation_banquet.2011.b.success
				send_interface_toast = {
					left_icon = scope:doubting_guest
					title = coronation_banquet.2011.b.success
					custom_tooltip = coronation_banquet.wedding_intent.success.tt
					complete_activity_intent = yes
				}
			}
			50 = { #they don't
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = coronation_banquet.2011.b.failure
				send_interface_toast = {
					left_icon = scope:doubting_guest
					title = coronation_banquet.2011.b.failure
					scope:doubting_guest = {
						add_opinion = {
							target = root
							opinion = -10
							modifier = annoyed_opinion
						}
					}
				}
			}
		}
		stress_impact = {
			trusting = medium_stress_impact_gain
			just = medium_stress_impact_gain
			honest = major_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				OR = {
					has_trait = honest
					has_trait = trusting
					has_trait = just
				}
			}
		}
	}

	after = {
		remove_variable = animal_type
	}
}

# Someone is dangerously close to a well of wine

coronation_banquet.2020 = {
	type = activity_event
	title = coronation_banquet.2020.t
	desc = coronation_banquet.2020.desc
	theme = wedding_banquet_activity
	left_portrait = {
		character = root
		triggered_animation = {
			trigger = {
				OR = {
					has_activity_intent = sabotage_coronation_intent
					has_trait = callous
					has_trait = sadistic
					has_trait = deceitful
				}
			}
			animation = scheme
		}
		animation = worry
	}
	right_portrait = {
		character = scope:drunk_guest
		animation = drink_goblet
	}

	cooldown = { years = 5 }

	trigger = {
		NOT = { this = scope:host }
		scope:activity = {
			any_attending_character = {
				coronation_2020_would_fall_trigger = yes
			}
			has_activity_option = {
				category = wedding_option_food
				option = wedding_food_good
			}
			NOT = {
				has_variable = has_had_2020_event
			}
		}
		scope:activity = { NOT = { has_variable = coronation_2020_well_var } }
	}

	weight_multiplier = {
		base = 1
		modifier = {
			factor = 2
			has_activity_intent = sabotage_coronation_intent
		}
		modifier = {
			factor = 2
			scope:activity = {
				any_attending_character = {
					has_trait = drunkard
				}
			}
		}
		modifier = {
			is_ai = yes
			factor = 0.1
		}
	}

	immediate = {
		scope:activity = {
			set_variable = coronation_2020_well_var
			random_attending_character = {
				limit = {
					coronation_2020_would_fall_trigger = yes
				}
				weight = {
					base = 1
					modifier = {
						add = 50
						has_trait = drunkard
					}
				}
				save_scope_as = drunk_guest
			}
			set_variable = has_had_2020_event
		}
	}

	#Tell them
	option = {
		name = coronation_banquet.2020.a
		duel = {
			skill = diplomacy
			target = scope:drunk_guest
			50 = { #they listen to you
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = coronation_banquet.2020.a.success
				send_interface_toast = {
					left_icon = scope:drunk_guest
					title = coronation_banquet.2020.a.success
					progress_towards_friend_effect = {
						REASON = friend_wbanquet_saved_from_well
						CHARACTER = scope:drunk_guest
						OPINION = 20
					}
					add_piety = minor_piety_gain
				}
			}
			50 = { #they fall down
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = coronation_banquet.2020.a.failure
				send_interface_toast = {
					left_icon = scope:drunk_guest
					title = coronation_banquet.2020.a.failure
					scope:drunk_guest = {
						add_prestige = minor_prestige_loss
						increase_wounds_effect = { REASON = fall }
					}
				}
			}
		}
		stress_impact = {
			deceitful = medium_stress_impact_gain
			callous = medium_stress_impact_gain
			sadistic = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				OR = {
					has_trait = deceitful
					has_trait = callous
					has_trait = sadistic
				}
			}
		}
	}

	#Don't
	option = {
		name = coronation_banquet.2020.b
		random_list = {
			50 = { #they don't fall
				desc = coronation_banquet.2020.b.success
				send_interface_toast = {
					left_icon = scope:drunk_guest
					title = coronation_banquet.2020.b.success
					#nothing happens
				}
			}
			50 = { #they fall down
				modifier = {
					factor = 2
					scope:drunk_guest = { has_trait = drunkard }
				}
				desc = coronation_banquet.2020.a.failure
				send_interface_toast = {
					left_icon = scope:drunk_guest
					title = coronation_banquet.2020.a.failure
					add_stress = major_stress_impact_loss
					scope:drunk_guest = {
						add_prestige = minor_prestige_loss
						increase_wounds_effect = { REASON = fall }
					}
				}
			}
		}
		stress_impact = {
			compassionate = major_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				has_trait = compassionate
			}
		}
	}

	#Sabotage Coronation Intent - Push them
	option = {
		name = coronation_banquet.2020.c
		trigger = {
			OR = {
				has_activity_intent = sabotage_coronation_intent
				AND = {
					has_activity_intent = murder_attendee_intent
					intent_target = scope:drunk_guest
				}
			}
		}
		custom_tooltip = available_because_intent_tt
		duel = {
			skill = prowess
			target = scope:drunk_guest
			50 = { #you push them
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
					min = -49
				}
				desc = coronation_banquet.2020.c.success
				send_interface_toast = {
					left_icon = scope:drunk_guest
					title = coronation_banquet.2020.c.success
					custom_tooltip = coronation_banquet.wedding_intent.success.tt
					add_stress = major_stress_impact_loss
					scope:drunk_guest = {
						add_prestige = minor_prestige_loss
						increase_wounds_effect = { REASON = fall }
					}
					complete_activity_intent = yes
				}
			}
			50 = { #they kick you back
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = coronation_banquet.2020.c.failure
				send_interface_toast = {
					left_icon = root
					right_icon = scope:drunk_guest
					title = coronation_banquet.2020.c.failure
					increase_wounds_effect = { REASON = fight }
				}
			}
			10 = { #they die
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
					min = -49
				}
				desc = coronation_banquet.2020.c.death
				send_interface_toast = {
					left_icon = root
					right_icon = scope:drunk_guest
					title = coronation_banquet.2020.c.death
					scope:drunk_guest = {
						death = { death_reason = death_accident }
					}
					known_murder_effect = {
						VICTIM = scope:drunk_guest
						MURDERER = root
						EXPOSER = root
					}
				}
			}
		}
		stress_impact = {
			calm = medium_stress_impact_gain
			forgiving = medium_stress_impact_gain
			compassionate = major_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 0
				OR = {
					has_trait = calm
					has_trait = forgiving
					has_trait = compassionate
				}
			}
		}
	}
}

###############################
## Legitimization Intent Events
## (During Banquet)
## 2030-2039
## By BWWalker01
###############################

# Legitimization Intent - Asking the King/Queen to legitimize during banquet
coronation_banquet.2030 = {
	type = activity_event
	title = coronation.1120.t
	desc = coronation_banquet.2030.desc.intro
	theme = wedding_banquet_activity
	left_portrait = {
		character = root
		animation = flirtation
	}
	right_portrait = {
		character = scope:coronation_target
		animation = personality_rational
	}
	center_portrait = {
		character = scope:bastard_scope
		animation = throne_room_bow_1
	}

	cooldown = { years = 1 }

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:activity = {
			NOT = {
				has_variable = has_had_bastard_intent_1000_event
			}
		}
		NOT = {
			this = scope:activity.special_guest:coronation_target
		}
		has_activity_intent = legitimize_bastard_intent #you're trying to legitimize someone
		intent_target = { is_alive = yes } #they're not dead yet
	}

	weight_multiplier = {
		base = 1
	}

	immediate = {
		intent_target = { save_scope_as = bastard_scope }
		scope:activity.special_guest:coronation_target = {
			save_scope_as = coronation_target
		}
		scope:activity = {
			set_variable = has_had_bastard_intent_1000_event
		}
		root = {
			save_scope_as = asking_guest
		}
		scope:activity.activity_location = {
			barony = {
				save_scope_as = activity_barony
			}
		}
	}

	#Go for it
	option = {
		name = coronation.1120.a
		show_as_tooltip = {
			duel = {
				skill = diplomacy
				target = scope:coronation_target
				20 = {	# success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 4.0
						min = -49
					}
					opinion_modifier = {
						who = scope:coronation_target
						opinion_target = scope:asking_guest
						multiplier = 2.5
					}
					opinion_modifier = {
						who = scope:coronation_target
						opinion_target = scope:bastard_scope
						multiplier = 0.25
					}
					modifier = {
						add = 100
						scope:asking_guest = {
							has_relation_friend = scope:coronation_target
						}
					}
					modifier = {
						NOT = { scope:asking_guest = scope:coronation_target }
						add = {
							value = scope:asking_guest.prestige_level
							multiply = 50
						}
					}
					modifier = {
						add = 250
						scope:asking_guest = {
							has_relation_best_friend = scope:coronation_target
						}
					}
					modifier = {
						add = -1000
						scope:asking_guest = {
							has_relation_rival = scope:coronation_target
						}
					}
					modifier = {
						add = 50
						scope:coronation_target = {
							trait_compatibility = {
								target = scope:bastard_scope
								value >= high_positive_trait_compatibility
							}
						}
					}
					modifier = {
						add = 100
						scope:asking_guest = {
							is_powerful_vassal_of = scope:coronation_target
						}
					}
					modifier = {
						add = 50
						scope:asking_guest = {
							is_councillor_of = scope:coronation_target
						}
					}
					desc = coronation.1120.a.success
					send_interface_toast = {
						title = coronation.1120.a.success
						left_icon = scope:coronation_target
						right_icon = scope:bastard_scope
						scope:activity = {
							add_activity_log_entry = {
								key = coronation_bastard_intent_1000_log_success
								character = root
								target = scope:coronation_target

								# Effect
								root = {
									stress_impact = {
										arrogant = minor_stress_impact_gain
									}

									legitimize_bastard_interaction_opinions_effect = {
										BASTARD = scope:bastard_scope
										HOUSE_HEAD = root.top_liege
										LEGITIMIZER = root
									}
									custom_tooltip = coronation.1121.request_favor_tt
								}
							}
						}
					}
					complete_activity_intent = yes
				}
				80 = {	# fail
					compare_modifier = {
						value = scope:duel_value
						multiplier = -3.5
						min = -49
					}
					desc = coronation.1120.a.failure
					send_interface_toast = {
						title = coronation.1120.a.failure
						left_icon = scope:coronation_target
						add_prestige = minor_prestige_loss
						scope:coronation_target = {
							add_opinion = {
								target = root
								modifier = annoyed_opinion
								opinion = -10
							}
						}
					}
				}
			}
		}
		scope:asking_guest = {
			add_character_flag = asking_guest
		}
		scope:bastard_scope = {
			add_character_flag = bastard_scope
		}
		scope:coronation_target = {
			trigger_event = coronation_banquet.2031
		}
		stress_impact = {
			craven = medium_stress_impact_gain
			patient = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				add = -50
				OR = {
					has_trait = craven
					has_trait = patient
				}
			}
			modifier = {
				add = 50
				has_trait = ambitious
			}
			modifier = {
				add = 50
				scope:asking_guest = { has_hook = scope:coronation_target }
			}
		}
	}

	#Go for it with hook
	option = {
		name = coronation.1120.b
		trigger = {
			has_usable_hook = scope:coronation_target
		}
		show_as_tooltip = {
			send_interface_toast = {
				title = coronation.1120.a.success
				left_icon = scope:coronation_target
				right_icon = scope:bastard_scope
				scope:activity = {
					add_activity_log_entry = {
						key = coronation_bastard_intent_1000_log_success
						character = root
						target = scope:coronation_target

						# Effect
						root = {
							stress_impact = {
								arrogant = minor_stress_impact_gain
							}

							legitimize_bastard_interaction_opinions_effect = {
								BASTARD = scope:bastard_scope
								HOUSE_HEAD = root.top_liege
								LEGITIMIZER = root
							}
						}
					}
				}
			}
			complete_activity_intent = yes
			scope:asking_guest = {
				use_hook = scope:coronation_target
			}
		}
		scope:asking_guest = {
			add_character_flag = asking_guest
		}
		scope:bastard_scope = {
			add_character_flag = bastard_scope
		}
		scope:coronation_target = {
			trigger_event = coronation_banquet.2031
			add_character_flag = was_hooked
		}
		stress_impact = {
			craven = medium_stress_impact_gain
			patient = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100
			modifier = {
				add = 50
				OR = {
					has_trait = craven
					has_trait = patient
				}
			}
			modifier = {
				factor = 1.5
				scope:asking_guest = { has_hook = scope:coronation_target }
			}
			modifier = {
				factor = 1.25
				has_trait = ambitious
			}
			modifier = {
				factor = 1.25
				NOT = {
					scope:asking_guest = {
						has_relation_friend = scope:coronation_target
					}
				}
			}
			modifier = {
				factor = 2
				scope:asking_guest = {
					has_relation_rival = scope:coronation_target
				}
			}
		}
	}

	#Nahhh
	option = {
		name = coronation.1120.c
		scope:activity = {
			remove_variable = has_had_bastard_intent_1000_event
		}
		ai_chance = {
			base = 100
			modifier = {
				factor = 1.25
				OR = {
					has_trait = callous
					has_trait = sadistic
				}
			}
			modifier = {
				factor = 0
				scope:coronation_target = {
					trait_compatibility = {
						target = scope:bastard_scope
						value >= high_positive_trait_compatibility
					}
				}
			}
		}
	}
}

# Legitimization Intent - Host responds to request during banquet
coronation_banquet.2031 = {
	type = activity_event
	title = coronation.1120.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:coronation_target = {
						NOT = {
							has_character_flag = was_hooked
						}
					}
				}
				desc = coronation_banquet.2031.desc
			}
			triggered_desc = {
				trigger = {
					scope:coronation_target = {
						has_character_flag = was_hooked
					}
				}
				desc = coronation_banquet.2031.desc_hooked
			}
		}
	}
	theme = wedding_banquet_activity
	left_portrait = {
		character = scope:asking_guest
		animation = flirtation
	}
	right_portrait = {
		character = scope:coronation_target
		animation = personality_rational
	}
	center_portrait = {
		character = scope:bastard_scope
		animation = throne_room_bow_1
	}

	cooldown = { years = 1 }

	widget = {
		gui = "event_window_widget_activity_intent"
		container = "custom_widgets_container"
	}

	trigger = {
		scope:activity = {
			has_variable = has_had_bastard_intent_1000_event
		}
		root = scope:activity.special_guest:coronation_target
	}

	weight_multiplier = {
		base = 1
	}

	immediate = {
		if = {
			limit = {
				scope:activity = {
					any_attending_character = {
						has_character_flag = asking_guest
						has_activity_intent = legitimize_bastard_intent
						this.intent_target = { is_alive = yes }
					}
				}
			}
			scope:activity = {
				random_attending_character = {
					limit = {
						has_character_flag = asking_guest
						has_activity_intent = legitimize_bastard_intent
						this.intent_target = { is_alive = yes }
					}
					save_scope_as = asking_guest
				}
			}
		}
		if = {
			limit = {
				scope:activity = {
					any_attending_character = {
						has_character_flag = bastard_scope
						this = scope:asking_guest.intent_target
					}
				}
			}
			scope:activity = {
				random_attending_character = {
					limit = {
						has_character_flag = bastard_scope
						this = scope:asking_guest.intent_target
					}
					save_scope_as = bastard_scope
				}
			}
		}
		root = {
			save_scope_as = coronation_target
		}
	}

	#Player agrees
	option = {
		name = {
			trigger = {
				NOT = {
					scope:coronation_target = {
						has_character_flag = was_hooked
					}
				}
			}
			text = coronation.1121.a
		}
		name = {
			trigger = {
				scope:coronation_target = {
					has_character_flag = was_hooked
				}
			}
			text = coronation.1121.a_hooked
		}
		trigger = {
			root = {
				NOT = { is_ai = yes }
			}
		}
		send_interface_toast = {
			title = coronation.1120.a.success
			left_icon = root
			right_icon = scope:bastard_scope
			scope:activity = {
				add_activity_log_entry = {
					key = coronation_bastard_intent_1000_log_success
					character = scope:coronation_target
					target = scope:bastard_scope

					# Effect
					root = {
						stress_impact = {
							callous = minor_stress_impact_gain
						}

						legitimize_bastard_interaction_opinions_effect = {
							BASTARD = scope:bastard_scope
							HOUSE_HEAD = scope:coronation_target
							LEGITIMIZER = scope:asking_guest
						}
						if = {
							limit = {
								scope:coronation_target = {
									has_character_flag = was_hooked
								}
							}
							scope:asking_guest = {
								use_hook = scope:coronation_target
							}
						}
					}
				}
			}
		}
		hidden_effect = {
			if = {
				limit = {
					scope:asking_guest = { has_activity_intent = legitimize_bastard_intent }
				}
				scope:asking_guest = {
					complete_activity_intent = yes
				}
			}
		}
	}

	#AI
	option = {
		name = coronation.1121.a
		trigger = {
			scope:coronation_target = {
				is_ai = yes
			}
			NOT = {
				scope:coronation_target = {
					has_character_flag = was_hooked
				}
			}
		}
		scope:asking_guest = {
			duel = {
				skill = diplomacy
				target = scope:coronation_target
				20 = {	# success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 4.0
						min = -49
					}
					opinion_modifier = {
						who = scope:coronation_target
						opinion_target = scope:asking_guest
						multiplier = 2.5
					}
					opinion_modifier = {
						who = scope:coronation_target
						opinion_target = scope:bastard_scope
						multiplier = 0.25
					}
					modifier = {
						add = 100
						scope:asking_guest = {
							has_relation_friend = scope:coronation_target
						}
					}
					modifier = {
						NOT = { scope:asking_guest = scope:coronation_target }
						add = {
							value = scope:asking_guest.prestige_level
							multiply = 50
						}
					}
					modifier = {
						add = 250
						scope:asking_guest = {
							has_relation_best_friend = scope:coronation_target
						}
					}
					modifier = {
						add = -1000
						scope:asking_guest = {
							has_relation_rival = scope:coronation_target
						}
					}
					modifier = {
						add = 50
						scope:coronation_target = {
							trait_compatibility = {
								target = scope:bastard_scope
								value >= high_positive_trait_compatibility
							}
						}
					}
					modifier = {
						add = 100
						scope:asking_guest = {
							is_powerful_vassal_of = scope:coronation_target
						}
					}
					modifier = {
						add = 50
						scope:asking_guest = {
							is_councillor_of = scope:coronation_target
						}
					}
					desc = coronation.1120.a.success
					send_interface_toast = {
						title = coronation.1120.a.success
						left_icon = scope:coronation_target
						right_icon = scope:bastard_scope
						scope:activity = {
							add_activity_log_entry = {
								key = coronation_bastard_intent_1000_log_success
								character = scope:asking_guest
								target = scope:coronation_target

								# Effect
								scope:asking_guest = {
									stress_impact = {
										arrogant = minor_stress_impact_gain
									}
									hidden_effect = {
										complete_activity_intent = yes
									}
									legitimize_bastard_interaction_opinions_effect = {
										BASTARD = scope:bastard_scope
										HOUSE_HEAD = scope:coronation_target
										LEGITIMIZER = scope:asking_guest
									}
								}
							}
						}
					}
				}
				80 = {	# fail
					compare_modifier = {
						value = scope:duel_value
						multiplier = -3.5
						min = -49
					}
					send_interface_toast = {
						title = coronation.1120.a.failure
						left_icon = scope:coronation_target
						add_prestige = minor_prestige_loss
						scope:coronation_target = {
							add_opinion = {
								target = scope:asking_guest
								modifier = annoyed_opinion
								opinion = -10
							}
						}
					}
				}
			}
		}
	}

	#AI Hooked
	option = {
		name = coronation.1121.a
		trigger = {
			scope:coronation_target = {
				is_ai = yes
				has_character_flag = was_hooked
			}
		}
		send_interface_toast = {
			title = coronation.1120.a.success
			left_icon = scope:coronation_target
			right_icon = scope:bastard_scope
			scope:activity = {
				add_activity_log_entry = {
					key = coronation_bastard_intent_1000_log_success
					character = scope:asking_guest
					target = scope:coronation_target

					# Effect
					scope:asking_guest = {
						stress_impact = {
							arrogant = minor_stress_impact_gain
						}
						hidden_effect = {
							complete_activity_intent = yes
						}
						legitimize_bastard_interaction_opinions_effect = {
							BASTARD = scope:bastard_scope
							HOUSE_HEAD = scope:coronation_target
							LEGITIMIZER = scope:asking_guest
						}
					}
				}
			}
		}
	}

	#Agree Player
	option = {
		name = coronation.1121.b
		trigger = {
			root = {
				NOT = { is_ai = yes }
			}
			NOR = {
				scope:coronation_target = { has_character_flag = was_hooked }
				scope:coronation_target = { has_hook = scope:asking_guest }
				scope:asking_guest = { has_hook = scope:coronation_target }
			}
		}
		send_interface_toast = {
			title = coronation.1120.a.success
			left_icon = root
			right_icon = scope:bastard_scope
			scope:activity = {
				add_activity_log_entry = {
					key = coronation_bastard_intent_1000_log_success
					character = scope:coronation_target
					target = scope:bastard_scope

					# Effect
					root = {
						stress_impact = {
							callous = minor_stress_impact_gain
						}

						legitimize_bastard_interaction_opinions_effect = {
							BASTARD = scope:bastard_scope
							HOUSE_HEAD = scope:coronation_target
							LEGITIMIZER = scope:asking_guest
						}

						add_hook = {
							type = favor_hook
							target = scope:asking_guest
						}
					}
				}
			}
		}
		hidden_effect = {
			if = {
				limit = {
					scope:asking_guest = { has_activity_intent = legitimize_bastard_intent }
				}
				scope:asking_guest = {
					complete_activity_intent = yes
				}
			}
		}
	}

	#Nahhh
	option = {
		name = coronation.1121.c
		trigger = {
			scope:coronation_target = {
				NOT = { is_ai = yes }
				NOT = { scope:coronation_target = { has_character_flag = was_hooked } }
			}
		}
		send_interface_toast = {
			title = coronation.1120.a.failure
			left_icon = scope:asking_guest
			scope:asking_guest = {
				add_prestige = minor_prestige_loss
				add_opinion = {
					target = scope:coronation_target
					modifier = annoyed_opinion
					opinion = -10
				}
			}
		}
		ai_chance = {
			base = 100
		}
	}

	after = {
		scope:asking_guest = { remove_character_flag = asking_guest }
		scope:bastard_scope = { remove_character_flag = bastard_scope }
		if = {
			limit = {
				scope:coronation_target = { has_character_flag = was_hooked }
			}
			scope:coronation_target = { remove_character_flag = was_hooked }
		}
	}
}

#################################
# "TARGET" TRIGGERED EVENTS
# 2000-2999
#################################

#####################
# Someone throws up on you
# by Petter Vilberg
#####################
scripted_trigger coronation_default_2005_drunk_trigger = {
	feast_default_participant_trigger = yes
	OR = {
		NOT = { has_trait = temperate }
		has_trait = drunkard
	}
}

coronation_banquet.2005 = {
	type = activity_event
	title = coronation_banquet.2005.t
	desc = coronation_banquet.2005.desc
	theme = feast_activity
	center_portrait = {
		character = scope:drunk
		animation = wedding_drunk
	}
	right_portrait = {
		character = root
		animation = disgust
	}
	cooldown = { years = 2 }

	trigger = {
		NOT = { exists = local_var:had_2005 }
		scope:activity = {
			any_attending_character = {
				coronation_default_2005_drunk_trigger = yes
			}
		}
	}

	immediate = {
		set_local_variable = {
			name = had_2005
			value = yes
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					coronation_default_2005_drunk_trigger = yes
				}
				weight = {
					base = 1
					modifier = {
						add = 30
						has_trait = drunkard
					}
					modifier = {
						add = 100
						root = {
							has_relation_oaf = prev
						}
					}
					modifier = {
						add = 40
						is_of_major_interest_to_root_trigger = yes
					}
					modifier = {
						add = 20
						is_of_minor_interest_to_root_trigger = yes
					}
					modifier = { # Reduce the chance of it being someone you might be forced to respect
						factor = 0.2
						highest_held_title_tier > root.highest_held_title_tier
					}
				}
				save_scope_as = drunk
			}
		}
		hidden_effect = {
			set_as_oaf_effect = {
				CHARACTER = scope:drunk
			}
		}
	}

	option = { #What shameful behavior!
		name = coronation_banquet.2005.a
		if = {
			limit = { NOT = { has_trait = arbitrary } }
			stress_impact = {
				drunkard = minor_stress_impact_gain
				humble = minor_stress_impact_gain
				craven = minor_stress_impact_gain
				shy = minor_stress_impact_gain
				forgiving = medium_stress_impact_gain
				lifestyle_reveler = medium_stress_gain
			}
		}
		add_character_modifier = {
			modifier = feast_higher_standards_modifier
			years = 5
		}
		scope:drunk = {
			add_prestige = medium_prestige_loss
			add_opinion = {
				target = root
				opinion = -10
				modifier = angry_opinion
			}
		}
		hidden_effect = {
			add_opinion = {
				target = scope:drunk
				modifier = feast_threw_up_on_me_opinion
			}
		}
	}

	option = { #What's a little vomit among friends
		name = coronation_banquet.2005.b
		if = {
			limit = { NOT = { has_trait = arbitrary } }
			stress_impact = {
				base = minor_stress_impact_gain
				temperate = medium_stress_impact_gain
				diligent = minor_stress_impact_gain
				vengeful = medium_stress_impact_gain
				arrogant = minor_stress_impact_gain
				gregarious = minor_stress_impact_gain
			}
		}
		add_prestige = minor_prestige_loss
		scope:drunk = {
			add_opinion = {
				target = root
				modifier = kindness_opinion
				opinion = 30
			}
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_vengefulness = -1
				ai_compassion = 0.25
			}
		}
	}
}

#################################
# HOST-TRIGGERED EVENTS
# 5000-5999
#################################

#####################
# The Host's high Dread freaks you out
# by Petter Vilberg
#####################
coronation_banquet.5001 = {
	type = activity_event
	title = coronation_banquet.5001.t
	desc = {
		first_valid = {
			random_valid = {
				triggered_desc = {
					trigger = { exists = scope:friend }
					desc = coronation_banquet.5001.friend_reminder
				}
				triggered_desc = {
					trigger = { exists = scope:rival }
					desc = coronation_banquet.5001.rival_reminder
				}
				triggered_desc = {
					trigger = { exists = scope:spouse }
					desc = coronation_banquet.5001.spouse_reminder
				}
				triggered_desc = {
					trigger = { exists = scope:sadist }
					desc = coronation_banquet.5001.sadist_reminder
				}
			}
			desc = coronation_banquet.5001.reminder
		}
		desc = coronation_banquet.5001.worry
	}
	left_portrait = {
		character = scope:host
		animation = personality_callous
	}
	right_portrait = {
		character = root
		animation = paranoia
	}
	theme = feast_activity
	cooldown = { years = 1 }

	trigger = {
		NOT = { exists = local_var:had_5001 }
		scope:activity.activity_host = {
			is_alive = yes
			NOT = { this = root }
			is_imprisoned = no
			dread >= medium_dread
		}
	}

	weight_multiplier = {
		base = 1
		modifier = { #You're less likely to be intimidated if you're brave
			factor = 0.3
			has_trait = brave
		}
		compare_modifier = {
			value = root.dread
			multiplier = 0.02
		}
	}

	immediate = {
		set_local_variable = {
			name = had_5001
			value = yes
		}
		scope:activity = {
			activity_host = {
				save_scope_as = host
			}
			random_attending_character = {
				limit = {
					has_relation_friend = root
				}
				save_scope_as = friend
			}
			random_attending_character = {
				limit = {
					has_relation_rival = root
				}
				save_scope_as = rival
			}
			random_attending_character = {
				limit = {
					has_trait = sadistic
				}
				save_scope_as = sadist
			}
		}
		random_spouse = { #root character's spouse, not necessarily a part of the activity
			save_scope_as = spouse
		}
	}

	option = { #This is too much
		name = coronation_banquet.5001.a
		stress_impact = {
			base = medium_stress_gain
		}
	}
}


#####################
# Host is a lunatic
# by Linnéa Thimrén
#####################
coronation_banquet.5002 = {
	type = activity_event
	title = coronation_banquet.5002.t
	desc = {
		random_valid = {
			desc = coronation_banquet.5002.desc_chair
			desc = coronation_banquet.5002.desc_chicken
			desc = coronation_banquet.5002.desc_drapes
		}
	}
	theme = feast_activity
	left_portrait = {
		character = scope:lunatic_host
		animation = personality_irrational
	}
	right_portrait = {
		character = root
		animation = shock
	}
	cooldown = { years = 1 }

	trigger = {
		NOT = { exists = local_var:had_5002 }
		scope:activity.activity_host = {
			NOT = { this = root }
			is_alive = yes
			is_imprisoned = no
			has_trait = lunatic
		}
	}

	immediate = {
		set_local_variable = {
			name = had_5002
			value = yes
		}
		scope:activity = {
			activity_host = {
				save_scope_as = lunatic_host
			}
		}
	}

	option = { #Come now, let's go outside
		name = coronation_banquet.5002.a
		scope:lunatic_host = {
			add_opinion = {
				modifier = kindness_opinion
				target = root
				opinion = 20
			}
		}
		stress_impact = {
			sadistic = medium_stress_impact_gain
			callous = medium_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_compassion = 0.75
			}
		}
	}

	option = { #I will stop them!
		name = coronation_banquet.5002.b
		scope:activity = {
			every_attending_character = {
				custom = every_guest_scope_tt
				limit = {
					NOT = { this = root }
				}
				add_opinion = {
					target = root
					modifier = respect_opinion
					opinion = 10
				}
			}
		}
		scope:lunatic_host = {
			add_opinion = {
				modifier = rude_opinion
				target = root
			}
		}
		stress_impact = {
			compassionate = minor_stress_impact_gain
		}
		add_prestige = medium_prestige_gain
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_rationality = 0.5
			}
		}
	}

	option = { #Also lunatic, join in on the fun
		name = coronation_banquet.5002.c
		trigger = {
			has_trait = lunatic
		}
		trait = lunatic_1
		trait = lunatic_genetic
		exclusive = yes
		scope:lunatic_host = {
			add_opinion = {
				modifier = friendliness_opinion
				target = root
				opinion = 20
			}
		}
		stress_impact = {
			base = medium_stress_impact_loss
		}
	}
}


#####################
# Host is sadistic
# by Linnéa Thimrén
#####################
scripted_trigger coronation_default_5003_guest_trigger = {
	feast_default_participant_trigger = yes
	NOT = { this = root }
	NOT = {	this = scope:activity.activity_host }
	is_ai = yes
	root = {
		can_add_hook = {
			target = prev
			type = favor_hook
		}
	}
}


coronation_banquet.5003 = {
	type = activity_event
	title = coronation_banquet.5003.t
	desc = coronation_banquet.5003.desc
	theme = feast_activity
	left_portrait = {
		character = scope:guest
		animation = fear
	}
	right_portrait = {
		character = scope:sadistic_host
		animation = schadenfreude
	}
	cooldown = { years = 1 }

	trigger = {
		NOT = { exists = local_var:had_5003 }
		scope:activity = {
			activity_host = {
				NOT = { this = root }
				is_alive = yes
				is_imprisoned = no
				has_trait = sadistic
			}
			any_attending_character = {
				coronation_default_5003_guest_trigger = yes
			}
		}
	}

	immediate = {
		set_local_variable = {
			name = had_5003
			value = yes
		}
		scope:activity = {
			activity_host = {
				save_scope_as = sadistic_host
			}
			random_attending_character = {
				limit = {
					coronation_default_5003_guest_trigger = yes
				}
				weight = {
					base = 1
					modifier = { #Less likely to pick someone you actively dislike
						add = -0.75
						OR = {
							has_relation_rival = root
							has_relation_potential_rival = root
							reverse_opinion = {
								target = root
								value <= -10
							}
						}
					}
					modifier = { #More likely to pick someone that matters
						add = 0.75
						is_powerful_vassal = yes
					}
					modifier = { #More likely to pick someone that matters
						add = 0.75
						save_temporary_scope_as = guest_check
						scope:sadistic_host = {
							any_councillor = {
								this = scope:guest_check
							}
						}
					}
					modifier = { #More likely to pick someone that matters
						add = 0.75
						is_of_major_interest_to_root_trigger = yes
					}
				}
				save_scope_as = guest
			}
		}
	}

	option = { #This has to stop!
		name = coronation_banquet.5003.a
		scope:activity = {
			every_attending_character = {
				limit = {
					NOT = { this = root }
				}
				custom = every_guest_scope_tt
				add_opinion = {
					target = root
					modifier = respect_opinion
					opinion = 10
				}
			}
		}
		scope:sadistic_host = {
			add_opinion = {
				modifier = rude_opinion
				target = root
			}
		}
		add_prestige = medium_prestige_gain
		stress_impact = {
			craven = major_stress_impact_gain
			shy = medium_stress_impact_gain
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				OR = {
					has_trait = brave
					has_trait = vengeful
					has_trait = wrathful
					has_trait = just
				}
			}
			modifier = {
				add = 20
				OR = {
					has_trait = arrogant
					has_trait = zealous
				}
			}
		}
	}

	option = { #I'm too scared to intervene
		name = coronation_banquet.5003.b
		add_hook = {
			target = scope:guest
			type = favor_hook
		}
		stress_impact = {
			wrathful = medium_stress_impact_gain
			callous = medium_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_compassion = 0.75
			}
		}
	}

	option = { #Also sadistic, what a party!
		name = coronation_banquet.5003.c
		trigger = {
			has_trait = sadistic
		}
		trait = sadistic
		exclusive = yes

		scope:sadistic_host = {
			add_opinion = {
				modifier = friendliness_opinion
				target = root
				opinion = 20
			}
		}
		stress_impact = {
			base = minor_stress_loss
		}
		ai_chance = {
			base = 100
		}
	}
}


#####################
# Host is a reveler, offers you more! More!
# by Petter Vilberg
#####################
coronation_banquet.5004 = {
	type = activity_event
	title = coronation_banquet.5004.t
	desc = coronation_banquet.5004.desc
	theme = feast_activity
	left_portrait = {
		character = scope:host
		animation = wedding_drunk
	}
	right_portrait = {
		character = root
		animation = toast_goblet
	}
	cooldown = { years = 1 }

	trigger = {
		NOT = { exists = local_var:had_5004 }
		scope:activity.activity_host = {
			NOT = { this = root }
			is_alive = yes
			is_imprisoned = no
			has_trait = lifestyle_reveler
		}
	}

	weight_multiplier = {
		base = 1
		modifier = {
			add = 0.5
			has_trait = lifestyle_reveler
		}
		modifier = {
			add = 0.5
			has_trait = lifestyle_reveler
			has_trait_xp = {
				trait = lifestyle_reveler
				value >= 50
			}
		}
	}

	immediate = {
		set_local_variable = {
			name = had_5004
			value = yes
		}
	}

	option = { #This is great!
		name = coronation_banquet.5004.a
		random = {
			chance = 10
			add_trait = drunkard
		}
		scope:host = {
			add_opinion = {
				target = root
				modifier = respect_opinion
				opinion = 15
			}
		}
		hidden_effect = { #Progress in the reveler lifestyle
			if = {
				limit = { NOT = { has_variable = reveler_lifestyle_progress } }
				set_variable = {
					name = reveler_lifestyle_progress
					value = 1
				}
			}
			else = {
				change_variable = {
					name = reveler_lifestyle_progress
					add = 1
				}
			}
		}
		stress_impact = {
			lifestyle_reveler = minor_stress_impact_loss
			comfort_eater = minor_stress_impact_loss
			drunkard = minor_stress_impact_loss
			shy = minor_stress_impact_gain
			temperate = major_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_greed = 1
			}
			modifier = {
				add = 100
				has_trait = lifestyle_reveler
			}
		}
	}

	option = { #No, I cannot take anymore
		name = coronation_banquet.5004.b
		scope:host = {
			add_opinion = {
				target = root
				modifier = respect_opinion
				opinion = -10
			}
		}
		stress_impact = {
			gregarious = minor_stress_impact_gain
			gluttonous = minor_stress_impact_gain
			inappetetic = minor_stress_impact_loss
		}
	}

	option = { #Make yourself disappear
		name = coronation_banquet.5004.c
		trigger = {
			OR = {
				has_trait = shy
				has_trait = reclusive
			}
		}
		trait = shy
		trait = reclusive
		reverse_add_opinion = {
			target = scope:host
			modifier = respect_opinion
			opinion = -10
		}
		stress_impact = {
			shy = medium_stress_loss
			reclusive = medium_stress_impact_loss
		}
		ai_chance = {
			base = 1000
		}
	}
}

################################
# Let's talk about how great of a king I am!
# by James Beaumont
################################
coronation_banquet.5020 = {
	type = activity_event
	title = coronation_banquet.5020.t
	desc = coronation_banquet.5020.desc
	theme = feast_activity
	left_portrait = {
		character = root
		animation = happiness
	}
	cooldown = { years = 3 }

	trigger = {
		has_activity_intent = promote_rule_intent
	}

	option = { # I have the wit of TricksterGodName!
		name = coronation_banquet.5020.a
		duel = {
			skills = { diplomacy intrigue }
			value = decent_skill_rating
			50 = {
				desc = coronation_banquet.5020.a.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
				}
				send_interface_toast = {
					title = coronation_banquet.5020.a.success
					left_icon = root
					add_legitimacy = medium_legitimacy_gain
				}
			}
			50 = {
				desc = coronation_banquet.5020.a.failure
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
				}
				send_interface_toast = {
					title = coronation_banquet.5020.a.failure
					left_icon = root
					add_legitimacy = minor_legitimacy_gain
				}
			}
		}
	}

	option = { # I have the wisdom of KnowledgeGodName!
		name = coronation_banquet.5020.b
		duel = {
			skills = { learning stewardship }
			value = decent_skill_rating
			50 = {
				desc = coronation_banquet.5020.a.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
				}
				send_interface_toast = {
					title = coronation_banquet.5020.a.success
					left_icon = root
					add_legitimacy = medium_legitimacy_gain
				}
			}
			50 = {
				desc = coronation_banquet.5020.a.failure
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
				}
				send_interface_toast = {
					title = coronation_banquet.5020.a.failure
					left_icon = root
					add_legitimacy = minor_legitimacy_gain
				}
			}
		}
	}

	option = { # I have the heart and stomach of WarGodName!
		name = coronation_banquet.5020.c
		duel = {
			skills = { martial prowess }
			value = decent_skill_rating
			50 = {
				desc = coronation_banquet.5020.a.success
				compare_modifier = {
					value = scope:duel_value
					multiplier = 3.5
				}
				send_interface_toast = {
					title = coronation_banquet.5020.a.success
					left_icon = root
					add_legitimacy = medium_legitimacy_gain
				}
			}
			50 = {
				desc = coronation_banquet.5020.a.failure
				compare_modifier = {
					value = scope:duel_value
					multiplier = -3.5
				}
				send_interface_toast = {
					title = coronation_banquet.5020.a.failure
					left_icon = root
					add_legitimacy = minor_legitimacy_gain
				}
			}
		}
	}

	option = { # I'll just enjoy the quiet for a moment
		name = coronation_banquet.5020.d
		add_stress = medium_stress_loss
	}
}

#################################
# HOST EVENTS
# 6000-6999
#################################


#####################
# Guest compliments you on your feast
# by Petter Vilberg
#####################
coronation_banquet.6002 = {
	type = activity_event
	title = coronation_banquet.6002.t
	desc = coronation_banquet.6002.desc
	left_portrait = {
		character = scope:guest
		animation = happiness
	}
	center_portrait = {
		character = root
		triggered_animation = {
			trigger = {
				OR = {
					has_trait = shy
					has_trait = reclusive
					has_trait = humble
					has_trait = content
				}
			}
			animation = personality_content
		}
		animation = personality_honorable
	}
	right_portrait = {
		character = scope:spouse
		animation = dancing
	}
	theme = feast_activity
	cooldown = { years = 1 }

	trigger = {
		scope:activity = {
			OR = {
				AND = {
					has_activity_type = activity_wedding
					has_activity_option = {
						category = wedding_option_food
						option = wedding_food_good
					}
				}
				AND = {
					has_activity_type = activity_feast
					has_activity_option = {
						category = feast_option_food
						option = feast_food_good
					}
				}
			}
		}
		NOR = {
			exists = local_var:had_6002
			exists = local_var:had_6001
		}
		scope:activity = {
			activity_host = {
				is_married = yes
				primary_partner = {
					feast_default_participant_trigger = yes
				}
			}
			any_attending_character = {
				feast_default_participant_trigger = yes
				NOT = { this = root }
				NOT = { this = scope:activity.activity_host.primary_partner }
				opinion = {
					target = scope:activity.activity_host
					value >= 20
				}
			}
		}
	}

	immediate = {
		set_local_variable = {
			name = had_6002
			value = yes
		}
		primary_partner = {
			save_scope_as = spouse
		}

		scope:activity = {
			random_attending_character = {
				limit = {
					feast_default_participant_trigger = yes
					NOT = { this = scope:spouse } # Spouse should not compliment themselves
					opinion = {
						target = scope:activity.activity_host
						value >= 20
					}
				}
				save_scope_as = guest
			}
		}
	}

	option = { # Yes, I've really done something here
		name = coronation_banquet.6002.a
		ai_chance = {
			base = 100
			modifier = {
				add = 100
				has_trait = arrogant
			}
		}
		stress_impact = {
			humble = medium_stress_impact_gain
			family_first = minor_stress_impact_gain
		}
		add_prestige = medium_prestige_gain
		reverse_add_opinion = {
			target = scope:spouse
			modifier = feast_spouse_did_not_credit_me_opinion
		}
	}

	option = { #It is all thanks to my spouse
		name = coronation_banquet.6002.b
		trigger = {
			exists = scope:spouse
		}
		add_character_modifier = {
			modifier = feast_household_efforts_modifier
			years = 5
		}
		reverse_add_opinion = {
			target = scope:spouse
			modifier = feast_spouse_gave_me_credit_opinion
		}
		stress_impact = {
			arrogant = minor_stress_impact_gain
		}
		ai_chance = {
			base = 100
			compare_modifier = {
				target = scope:activity.activity_host
				value = ai_honor
			}
			opinion_modifier = {
				opinion_target = scope:spouse
				min = -99
			}
		}
	}
}

#####################
# Two guests get into a fight
# by Petter Vilberg
#####################

scripted_trigger coronation_default_6003_fighter_2_temp_trigger = {
	feast_default_participant_trigger = yes
	NOT = { this = scope:fighter_1_temp }
	OR = {
		has_relation_rival = scope:fighter_1_temp
		AND = {
			opinion = {
				target = scope:fighter_1_temp
				value <= -20
			}
			reverse_opinion = {
				target = scope:fighter_1_temp
				value <= -20
			}
			OR = {
				AND = {
					is_female = yes
					scope:fighter_1_temp = { is_female = yes }
				}
				AND = {
					is_male = yes
					scope:fighter_1_temp = { is_male = yes }
				}
			}
		}
	}
}

scripted_trigger coronation_default_6003_fighter_2_trigger = {
	feast_default_participant_trigger = yes
	NOT = { this = root }
	NOT = { this = scope:fighter_1 }
	OR = {
		has_relation_rival = scope:fighter_1
		AND = {
			opinion = {
				target = scope:fighter_1
				value <= -20
			}
			reverse_opinion = {
				target = scope:fighter_1
				value <= -20
			}
			OR = {
				AND = {
					is_female = yes
					scope:fighter_1 = { is_female = yes }
				}
				AND = {
					is_male = yes
					scope:fighter_1 = { is_male = yes }
				}
			}
		}
	}
}

scripted_trigger coronation_default_6003_fighter_1_trigger = {
	feast_default_participant_trigger = yes
	save_temporary_scope_as = fighter_1_temp
	NOT = { this = root }
	scope:activity = {
		any_attending_character = {
			coronation_default_6003_fighter_2_temp_trigger = yes
		}
	}
}

coronation_banquet.6003 = {
	type = activity_event
	title = coronation_banquet.6003.t
	desc = {
		desc = coronation_banquet.6003.opening
		desc = coronation_banquet.6003.guard
	}
	theme = feast_activity
	center_portrait = {
		character = scope:fighter_1
		animation = wrestling_victory
	}
	right_portrait = {
		character = scope:fighter_2
		animation = aggressive_unarmed
	}
	cooldown = { years = 1 }

	trigger = {
		NOT = { exists = local_var:had_6003 }
		NOT = { exists = local_var:had_6351 }
		scope:activity = {
			any_attending_character = {
				coronation_default_6003_fighter_1_trigger = yes
				save_temporary_scope_as = fighter_1_temp
			}
			any_attending_character = {
				coronation_default_6003_fighter_2_temp_trigger = yes
			}
		}
		root = scope:activity.special_guest:coronation_target
	}

	immediate = {
		set_local_variable = {
			name = had_6003
			value = yes
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					coronation_default_6003_fighter_1_trigger = yes
				}
				save_scope_as = fighter_1
			}
			random_attending_character = {
				limit = {
					coronation_default_6003_fighter_2_trigger = yes
				}
				save_scope_as = fighter_2
			}
		}
	}

	option = { #Side with fighter_1
		name = coronation_banquet.6003.a
		reverse_add_opinion = {
			target = scope:fighter_1
			modifier = feast_sided_with_me_in_my_fight_opinion
		}
		progress_towards_friend_effect = {
			REASON = friend_took_side_in_fight
			CHARACTER = scope:fighter_1
			OPINION = 0
		}
		reverse_add_opinion = {
			target = scope:fighter_2
			modifier = feast_sided_against_me_in_my_fight_opinion
		}
		progress_towards_rival_effect = {
			CHARACTER = scope:fighter_2
			REASON = rival_other_fighter_side
			OPINION = 0
		}
		ai_chance = {
			base = 100
			opinion_modifier = {
				opinion_target = scope:fighter_1
				min = -99
			}
			modifier = {
				add = 500
				has_relation_friend = scope:fighter_1
			}
		}
	}

	option = { #Side with fighter_2
		name = coronation_banquet.6003.b
		reverse_add_opinion = {
			target = scope:fighter_2
			modifier = feast_sided_with_me_in_my_fight_opinion
		}
		progress_towards_friend_effect = {
			REASON = friend_took_side_in_fight
			CHARACTER = scope:fighter_2
			OPINION = 0
		}
		reverse_add_opinion = {
			target = scope:fighter_1
			modifier = feast_sided_against_me_in_my_fight_opinion
		}
		progress_towards_rival_effect = {
			CHARACTER = scope:fighter_1
			REASON = rival_other_fighter_side
			OPINION = 0
		}
		ai_chance = {
			base = 100
			opinion_modifier = {
				opinion_target = scope:fighter_1
				min = -99
			}
			modifier = {
				add = 500
				has_relation_friend = scope:fighter_1
			}
		}
	}

	option = { #Resolve fight amicably
		name = coronation_banquet.6003.c
		trigger = {
			diplomacy >= 15
		}
		skill = diplomacy
		add_prestige = medium_prestige_gain
	}
}


#####################
# Guest is having a hard time socializing - help or laugh at them!
# by Linnéa Thimrén
#####################
coronation_banquet.6101 = {
	type = activity_event
	title = coronation_banquet.6101.t
	desc = {
		desc = coronation_banquet.6101.desc_opening
		first_valid = {
			triggered_desc = {
				trigger = {
					has_character_flag = liked_by_host
				}
				desc = coronation_banquet.6101.desc_liked
			}
			triggered_desc = {
				trigger = {
					has_character_flag = disliked_by_host
					scope:troubled_guest = { is_landed = no }
				}
				desc = coronation_banquet.6101.desc_disliked_unlanded
			}
			triggered_desc = {
				trigger = {
					has_character_flag = disliked_by_host
					scope:troubled_guest = { is_landed = yes }
				}
				desc = coronation_banquet.6101.desc_disliked
			}
		}
	}
	theme = feast_activity
	left_portrait = {
		character = scope:troubled_guest
		animation = paranoia
	}
	right_portrait = {
		character = root
		animation = personality_compassionate
	}
	cooldown = { years = 1 }

	trigger = {
		NOT = { exists = local_var:had_6101 }
		scope:activity = {
			any_attending_character = {
				feast_default_participant_trigger = yes
				NOT = { this = root }
				has_trait = shy
				save_temporary_scope_as = guest_check
			}
		}
		can_add_hook = {
			target = scope:guest_check
			type = favor_hook
		}
	}

	immediate = {
		set_local_variable = {
			name = had_6101
			value = yes
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					feast_default_participant_trigger = yes
					NOT = { this = root }
					has_trait = shy
				}
				weight = {
					base = 1
					modifier = { #More likely to pick someone that matters
						add = 0.75
						is_powerful_vassal = yes
					}
					modifier = { #More likely to pick someone that matters
						add = 0.75
						save_temporary_scope_as = guest_check
						root = {
							any_councillor = {
								this = scope:guest_check
							}
						}
					}
					modifier = { #More likely to pick someone that matters
						add = 0.75
						is_of_major_interest_to_root_trigger = yes
					}
				}
				save_scope_as = troubled_guest
			}
		}
		if = {
			limit = {
				OR = {
					has_relation_friend = scope:troubled_guest
					has_relation_potential_friend = scope:troubled_guest
					has_relation_lover = scope:troubled_guest
					has_relation_potential_lover = scope:troubled_guest
					opinion = {
						target = scope:troubled_guest
						value >= 10
					}
				}
			}
			add_character_flag = {
				flag = liked_by_host
				days = 10
			}
		}
		else = {
			add_character_flag = {
				flag = disliked_by_host
				days = 10
			}
		}
	}

	option = { #you save them from having to be social
		name = coronation_banquet.6101.a
		if = {
			limit = {
				can_add_hook = {
					target = scope:troubled_guest
					type = favor_hook
				}
			}
			reverse_add_opinion = {
				modifier = kindness_opinion
				target = scope:troubled_guest
				opinion = 15
			}
			add_hook = {
				target = scope:troubled_guest
				type = favor_hook
			}
		}
		else = {
			reverse_add_opinion = {
				modifier = kindness_opinion
				target = scope:troubled_guest
				opinion = 30
			}
		}
		stress_impact = {
			shy = medium_stress_impact_gain
			sadistic = medium_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_compassion = 0.7
				ai_honor = 0.25
				ai_boldness = 0.25
			}
		}
	}

	option = { #Mercilessly push them
		name = coronation_banquet.6101.b
		reverse_add_opinion = {
			modifier = cruelty_opinion
			target = scope:troubled_guest
			opinion = -20
		}
		progress_towards_rival_effect = {
			CHARACTER = scope:troubled_guest
			REASON = rival_mercilessly_pushed
			OPINION = 0
		}
		scope:activity = {
			every_attending_character = {
				limit = {
					feast_default_participant_trigger = yes
					NOT = {	this = scope:troubled_guest	}
				}
				custom = every_guest_scope_tt
				add_opinion = {
					target = root
					modifier = friendliness_opinion
					opinion = 10
				}
			}
		}
		stress_impact = {
			compassionate = medium_stress_impact_gain
			shy = medium_stress_impact_gain
			sadistic = medium_stress_impact_loss
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_vengefulness = 0.5
				ai_energy = 0.25
				ai_boldness = 0.25
			}
		}
	}

	option = { #You save him
		name = coronation_banquet.6101.c
		flavor = coronation_banquet.6101.c.tt
		trigger = {
			OR = {
				has_trait = shy
				has_trait = reclusive
			}
		}
		trait = shy
		trait = reclusive
		add_prestige = medium_prestige_loss
		reverse_add_opinion = {
			modifier = friendliness_opinion
			target = scope:troubled_guest
			opinion = 20
		}
		progress_towards_friend_effect = {
			REASON = friend_saved_troubled_guest
			CHARACTER = scope:troubled_guest
			OPINION = 0
		}
		add_hook = {
			target = scope:troubled_guest
			type = favor_hook
		}
		stress_impact = {
			shy = minor_stress_impact_loss
			reclusive = medium_stress_impact_loss
			sadistic = medium_stress_impact_gain
			callous = medium_stress_impact_gain
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				has_trait = shy
			}
			ai_value_modifier = {
				ai_compassion = 0.7
				ai_honor = 0.25
			}
		}
	}
}


#####################
# A guest rambles on and on
# by Linnéa Thimrén
#####################
scripted_trigger coronation_default_6111_character_trigger = {
	feast_default_participant_trigger = yes
	NOT = { this = root }
}

coronation_banquet.6111 = {
	type = activity_event
	title = coronation_banquet.6111.t
	desc = coronation_banquet.6111.desc
	theme = feast_activity
	left_portrait = {
		character = scope:guest_to_talk_to
		animation = thinking
	}
	right_portrait = {
		character = root
		animation = boredom
	}
	cooldown = { years = 1 }

	trigger = {
		NOT = { exists = local_var:had_6111 }
		scope:activity = {
			any_attending_character = {
				coronation_default_6111_character_trigger = yes
			}
		}
	}

	immediate = {
		set_local_variable = {
			name = had_6111
			value = yes
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					coronation_default_6111_character_trigger = yes
					#to prioritize characters that you want to get to know
					OR = { #Either I am trying to befriend them, or them me, or I just wanna promote my legend to anyone who will listen
						AND = {
							has_activity_intent = befriend_attendee_intent
							intent_target ?= {
								is_alive = yes
								this = root
							}
						}
						root = {
							has_activity_intent = befriend_attendee_intent
							intent_target ?= prev
						}
						root = {
							has_activity_intent = spread_legend_intent
						}
					}
				}
				alternative_limit = {
					coronation_default_6111_character_trigger = yes
					has_same_education_trait_as_character_trigger = {
						CHARACTER = root
					}
				}
				alternative_limit = {
					coronation_default_6111_character_trigger = yes
				}
				weight = {
					base = 1
					modifier = { #More likely to pick someone that matters
						add = 0.75
						is_of_major_interest_to_root_trigger = yes
					}
					modifier = { #More likely to pick someone that matters
						add = 0.75
						is_powerful_vassal = yes
					}
					modifier = { #More likely to pick someone that matters
						add = 0.5
						save_temporary_scope_as = guest_check
						root = {
							any_councillor = {
								this = scope:guest_check
							}
						}
					}
				}
				save_scope_as = guest_to_talk_to
			}
		}
	}

	option = { #you're actually interested
		name = coronation_banquet.6111.a

		add_character_modifier = {
			modifier = feast_had_interesting_conversation_modifier
			years = 10
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_compassion = 0.5
				ai_honor = 0.25
				ai_rationality = 0.25
			}
		}
	}

	option = { #Let's talk about you instead
		name = coronation_banquet.6111.b
		progress_towards_friend_effect = {
			REASON = friend_showed_personal_interest
			CHARACTER = scope:guest_to_talk_to
			OPINION = 20
		}
		stress_impact = {
			compassionate = medium_stress_impact_loss
			gregarious = medium_stress_impact_loss
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				OR = {
					scope:guest_to_talk_to = {
						any_targeting_scheme = {
							scheme_owner = root
							scheme_type = befriend
						}
					}
					number_of_personality_traits_in_common = {
						target = scope:guest_to_talk_to
						value >= 2
					}
					scope:guest_to_talk_to = {
						has_same_education_trait_as_character_trigger = {
							CHARACTER = root
						}
					}
				}
			}
		}
	}

	option = { #they just won't shut up!
		name = coronation_banquet.6111.c
		trigger = {
			OR = {
				has_trait = sadistic
				has_trait = callous
				has_trait = irritable
			}
		}
		trait = sadistic
		trait = callous
		trait = irritable
		scope:activity = {
			every_attending_character = {
				limit = {
					feast_default_participant_trigger = yes
					NOT = { this = scope:guest_to_talk_to }
					ai_compassion <= medium_negative_compassion
				}
				custom = every_evil_guest_scope_tt
				add_opinion = {
					target = root
					modifier = amused_opinion
					opinion = 10
				}
			}
		}
		reverse_add_opinion = {
			modifier = publicly_ridiculed
			target = scope:guest_to_talk_to
		}
		if = {
			limit = {
				can_set_relation_potential_rival_trigger = { CHARACTER = scope:guest_to_talk_to }
			}
			set_relation_potential_rival = scope:guest_to_talk_to
		}
		add_prestige = minor_prestige_gain
		stress_impact = {
			sadistic = medium_stress_impact_loss
			callous = minor_stress_impact_loss
			irritable = medium_stress_impact_loss
		}
		ai_chance = {
			base = 50
			modifier = {
				add = 50
				opinion = {
					target = scope:guest_to_talk_to
					value <= 0
				}
			}
			ai_value_modifier = {
				ai_vengefulness = 0.75
				ai_compassion = -0.5
			}
		}
	}

	option = { #Let's change subjects to my legend!
		name = coronation_banquet.6111.d
		trigger = {
			has_activity_intent = spread_legend_intent
		}
		if = { # If they're a nobody I don't care about, give me a neat modifier
			limit = {
				scope:guest_to_talk_to = {
					OR = {
						highest_held_title_tier <= tier_county
						exists = promoted_legend
					}
				}
			}
			add_character_modifier = {
				modifier = ce1_legendary_feaster
				years = 15
			}
		}
		else = {
			duel = {
				skill = diplomacy
				target = scope:guest_to_talk_to
				50 = {
					desc = coronation_banquet.6111.d.success
					compare_modifier = {
						value = scope:duel_value
						multiplier = 3.5
					}
					send_interface_toast = {
						title = coronation_banquet.6111.d.success
						left_icon = root
						right_icon = scope:guest_to_talk_to
						add_prestige = medium_prestige_gain
						scope:guest_to_talk_to = {
							set_promoted_legend = root.promoted_legend
						}
					}
				}
				50 = {
					desc = coronation_banquet.6111.d.failure
					compare_modifier = {
						value = scope:duel_value
						multiplier = -3.5
					}
					send_interface_toast = {
						title = coronation_banquet.6111.d.failure
						left_icon = root
						right_icon = scope:guest_to_talk_to
						add_prestige = minor_prestige_loss
					}
				}
			}
		}
		ai_chance = {
			base = 500
		}
	}

	option = { #Let's talk about how great of a king I am!
		name = coronation_banquet.6111.e
		trigger = {
			has_activity_intent = promote_rule_intent
		}
		add_legitimacy = minor_legitimacy_gain
		ai_chance = {
			base = 500
		}
	}
}

#####################
# Serve a guest food you know they hate
# by Linnéa Thimrén
#####################
coronation_banquet.6121 = {
	type = activity_event
	title = coronation_banquet.6121.t
	desc = coronation_banquet.6121.desc
	theme = feast_activity
	right_portrait = {
		character = scope:hated_guest
		animation = poison
	}
	left_portrait = {
		character = root
		animation = schadenfreude
	}
	cooldown = { years = 1 }

	trigger = {
		NOT = { exists = local_var:had_6121 }
		scope:activity = {
			activity_host = root
			any_attending_character = {
				NOT = { this = root }
				feast_default_participant_trigger = yes
				opinion = {
					target = scope:activity.activity_host
					value <= -10
				}
				save_temporary_scope_as = guest_check
				root = {
					can_add_hook = {
						target = scope:guest_check
						type = favor_hook
					}
				}
			}
		}
	}

	weight_multiplier = {
		base = 0.5
		modifier = { #More likely if there's someone you actually dislike
			scope:activity = {
				any_attending_character = {
					NOT = { this = root }
					feast_default_participant_trigger = yes
					OR = {
						opinion = {
							target = scope:activity.activity_host
							value <= -40
						}
						has_relation_rival = scope:activity.activity_host
						has_relation_potential_rival = scope:activity.activity_host
					}
					save_temporary_scope_as = guest_check
					root = {
						can_add_hook = {
							target = scope:guest_check
							type = favor_hook
						}
					}
				}
			}
		}
	}

	immediate = {
		set_local_variable = {
			name = had_6121
			value = yes
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					NOT = { this = root }
					feast_default_participant_trigger = yes
					has_relation_rival = scope:activity.activity_host
					save_temporary_scope_as = guest_check
					root = {
						can_add_hook = {
							target = scope:guest_check
							type = favor_hook
						}
					}

				}
				alternative_limit = {
					NOT = { this = root }
					feast_default_participant_trigger = yes
					has_relation_potential_rival = scope:activity.activity_host
					save_temporary_scope_as = guest_check
					root = {
						can_add_hook = {
							target = scope:guest_check
							type = favor_hook
						}
					}
				}
				alternative_limit = {
					feast_default_participant_trigger = yes
					opinion = {
						target = scope:activity.activity_host
						value <= -20
					}
					save_temporary_scope_as = guest_check
					root = {
						can_add_hook = {
							target = scope:guest_check
							type = favor_hook
						}
					}
				}
				alternative_limit = {
					NOT = { this = root }
					feast_default_participant_trigger = yes
					opinion = {
						target = scope:activity.activity_host
						value <= -10
					}
					save_temporary_scope_as = guest_check
					root = {
						can_add_hook = {
							target = scope:guest_check
							type = favor_hook
						}
					}
				}
				weight = {
					base = 1
					modifier = { #Less likely to choose someone you probably like
						add = -1
						OR = {
							has_relation_friend = root
							has_relation_potential_friend = root
							has_relation_lover = root
							has_relation_potential_lover = root
						}
					}
					modifier = { #More likely to choose someone you want dead
						add = 1
						any_targeting_scheme = {
							scheme_owner = root
							scheme_type = murder
						}
					}
				}
				save_scope_as = hated_guest
			}
		}
	}

	option = { #Laugh as they suffer
		name = coronation_banquet.6121.a
		scope:hated_guest = {
			add_character_modifier = {
				modifier = feast_bad_reaction_to_food
				years = 7
			}
		}
		if = {
			limit = {
				OR = {
					can_set_relation_potential_rival_trigger = { CHARACTER = scope:hated_guest }
					can_set_relation_rival_trigger = { CHARACTER = scope:hated_guest }
				}
			}
			progress_towards_rival_effect = {
				CHARACTER = scope:hated_guest
				REASON = rival_served_food
				OPINION = 0
			}
		}
		else = {
			scope:hated_guest = {
				add_opinion = {
					target = root
					modifier = cruelty_opinion
					opinion = -20
				}
			}
		}
		stress_impact = {
			compassionate = medium_stress_impact_gain
		}
		ai_chance = {
			base = 100
			ai_value_modifier = {
				ai_vengefulness = 0.5
				ai_boldness = 0.25
				ai_compassion = -0.25
			}
		}
	}

	option = { #"Save" them
		name = coronation_banquet.6121.b
		add_prestige = minor_prestige_gain
		add_hook = {
			type = favor_hook
			target = scope:hated_guest
		}
		stress_impact = {
			sadistic = medium_stress_impact_gain
			vengeful = medium_stress_impact_gain
		}
		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_compassion = 0.75
				ai_honor = 0.25
			}
		}
	}
}


#####################
# There's no more wine!
# by Linnéa Thimrén
#####################
coronation_banquet.6231 = {
	type = activity_event
	title = coronation_banquet.6231.t
	desc = coronation_banquet.6231.desc
	theme = feast_activity
	left_portrait = {
		character = scope:coronation_target
		animation = shock
	}
	right_portrait = {
		character = scope:drunk_guest
		animation = wedding_drunk
	}
	override_background = { reference = bp1_wine_cellar }
	cooldown = { months = 6 }
	trigger = {
		drinks_alcohol_trigger = yes
		root = scope:activity.special_guest:coronation_target
		scope:activity = {
			any_attending_character = {
				count > 2
				NOT = { this = root }
				drinks_alcohol_trigger = yes
			}
		}
	}

	immediate = {
		scope:activity.special_guest:coronation_target = { save_scope_as = coronation_target }
		scope:activity = {
			random_attending_character = {
				limit = {
					NOT = { this = scope:coronation_target }
					exists = scope:activity.special_guest:honorary_guest_regular
					this = scope:activity.special_guest:honorary_guest_regular
					drinks_alcohol_trigger = yes
				}
				alternative_limit = {
					NOT = { this = scope:coronation_target }
					drinks_alcohol_trigger = yes
				}
				save_scope_as = drunk_guest
			}
		}
	}

	option = { #We must buy more!
		name = coronation_banquet.6231.a
		trigger = {
			short_term_gold >= activity_medium_gold_value
		}
		show_as_unavailable = {
			short_term_gold < activity_medium_gold_value
		}
		scope:activity = {
			every_attending_character = {
				limit = {
					NOT = { this = scope:coronation_target }
					feast_default_participant_trigger = yes
				}
				custom = every_guest_scope_tt
				add_opinion = {
					target = scope:coronation_target
					modifier = pleased_opinion
					opinion = 10
				}
			}
			if = {
				limit = {
					any_attending_character = {
						NOT = { this = scope:coronation_target }
						has_trait = drunkard
					}
				}
				every_attending_character = {
					limit = {
						NOT = { this = scope:coronation_target }
						feast_default_participant_trigger = yes
						has_trait = drunkard
					}
					custom = every_drunkard_guest_scope_tt
					add_opinion = {
						target = scope:coronation_target
						modifier = grateful_opinion
						opinion = 20
					}
				}
			}
		}
		add_character_modifier = {
			modifier = feast_bought_more_drink_modifier
			years = 10
		}
		remove_short_term_gold = activity_medium_gold_value
		stress_impact = {
			greedy = medium_stress_impact_gain
			drunkard = medium_stress_impact_loss
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_energy = 0.5
				ai_honor = 0.25
				ai_compassion = 0.25
			}
		}
	}

	option = { #We all have to pitch in!
		name = coronation_banquet.6231.b
		add_prestige = minor_prestige_loss
		add_gold = minor_gold_value
		stress_impact = {
			just = medium_stress_impact_gain
			generous = medium_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_greed = 0.5
			}
		}
	}

	option = { #I have a private stash!
		name = coronation_banquet.6231.c
		trigger = {
			has_trait = lifestyle_reveler
		}
		trait = lifestyle_reveler
		add_prestige = medium_prestige_gain
		add_character_modifier = {
			modifier = feast_bought_more_drink_modifier
			years = 10
		}
		stress_impact = {
			greedy = minor_stress_impact_gain
		}
		ai_chance = {
			base = 500
		}
	}
}


#####################
# Chance to become friend or rival
# by Linnéa Thimrén
#####################
scripted_trigger coronation_default_participant_requirements_trigger = {
	feast_default_participant_trigger = yes
	NOR = {
		has_relation_friend = root
		has_relation_rival = root
		has_relation_lover = root
	}
}

coronation_banquet.6251 = {
	type = activity_event
	title = coronation_banquet.6251.t
	desc = coronation_banquet.6251.desc
	theme = feast_activity
	left_portrait = {
		character = root
		animation = thinking
	}
	right_portrait = {
		character = scope:guest
		animation = happiness
	}
	cooldown = { years = 1 }

	trigger = {
		NOT = { exists = local_var:had_6251 }
		scope:activity = {
			any_attending_character = {
				NOT = { this = root }
				coronation_default_participant_requirements_trigger = yes
			}
		}
	}

	immediate = {
		set_local_variable = {
			name = had_6251
			value = yes
		}
		scope:activity = {
			random_attending_character = {
				limit = {
					NOT = { this = root }
					coronation_default_participant_requirements_trigger = yes
				}
				weight = {
					base = 1
					modifier = { #More likely to pick someone that matters
						add = 2
						is_of_major_interest_to_root_trigger = yes
					}
					modifier = { #More likely to pick someone that matters
						add = 1
						is_of_minor_interest_to_root_trigger = yes
					}
				}
				save_scope_as = guest
			}
		}
	}

	option = { #friendly
		name = coronation_banquet.6251.a
		reverse_add_opinion = {
			modifier = friendliness_opinion
			target = scope:guest
			opinion = 20
		}
		if = {
			limit = {
				NOR = {
					has_relation_friend = scope:guest
					has_relation_potential_friend = scope:guest
				}
			}
			set_relation_potential_friend = scope:guest
		}
		if = {
			limit = {
				has_relation_potential_friend = scope:guest
			}
			set_relation_friend = { reason = friend_feast_subject_of_interest target = scope:guest involved_character = scope:activity.activity_host province = scope:activity.activity_location }
		}
		stress_impact = {
			gregarious = minor_stress_impact_loss
			compassionate = minor_stress_impact_loss
			vengeful = medium_stress_impact_gain
		}
		ai_chance = {
			base = 40
			modifier = {
				add = 60
				opinion = {
					target = scope:guest
					value >= 40
				}
			}
			ai_value_modifier = {
				ai_compassion = 0.75
			}
		}
	}

	option = { #Rival
		name = coronation_banquet.6251.b
		add_prestige = minor_prestige_gain
		reverse_add_opinion = {
			modifier = cruelty_opinion
			target = scope:guest
			opinion = -20
		}
		if = {
			limit = {
				OR = {
					can_set_relation_potential_rival_trigger = { CHARACTER = scope:guest }
					can_set_relation_rival_trigger = { CHARACTER = scope:guest }
				}
			}
			progress_towards_rival_effect = {
				CHARACTER = scope:guest
				REASON = rival_rude_response
				OPINION = 0
			}
		}
		stress_impact = {
			compassionate = medium_stress_impact_gain
		}
		ai_chance = {
			base = 40
			modifier = {
				add = 20
				opinion = {
					target = scope:guest
					value <= 0
				}
			}
			modifier = {
				add = 20
				OR = {
					has_trait = sadistic
					has_trait = vengeful
					has_trait = wrathful
				}
			}
			ai_value_modifier = {
				ai_vengefulness = 0.5
			}
		}
	}

	option = { #Lustful
		name = coronation_banquet.6251.c
		trigger = {
			OR = {
				matching_gender_and_sexuality_trigger = { CHARACTER_1 = root CHARACTER_2 = scope:guest }
				AND = {
					scope:guest = {	is_attracted_to_gender_of = root }
					root = { has_perk = unshackled_lust_perk }
				}
			}
			scope:guest = {
				might_cheat_on_every_partner_trigger = yes
				NOT = { is_close_or_extended_family_of = root }
			}
			root = {
				might_cheat_on_every_partner_trigger = yes
			}
		}
		reverse_add_opinion = {
			modifier = friendliness_opinion
			target = scope:guest
			opinion = 20
		}
		progress_towards_lover_effect = {
			CHARACTER = scope:guest
			REASON = lover_feast_conversation
			OPINION = 0
		}
		stress_impact = {
			celibate = major_stress_impact_gain
			lustful = medium_stress_impact_loss
		}
		ai_chance = {
			base = 20
			modifier = {
				add = 100
				has_trait = lustful
			}
		}
	}
}

#####################
# Pervert laughs at lewd double-meaning
# by Bianca Savazzi
#####################

scripted_effect coronation_default_6501_additional_person_opinion_effect = {
	if = {
		limit = { exists = scope:fellow_pervert }
		random_list = {
			40 = {
				show_chance = no
				progress_towards_friend_effect = {
					REASON = friend_shared_lewd_humor
					CHARACTER = scope:fellow_pervert
					OPINION = 0
				}
			}
			60 = {
				show_chance = no
				modifier = {
					add = -20
					has_trait_extroverted_trigger = yes
				}
				modifier = {
					add = 20
					has_trait_levelheaded_trigger = yes
				}
				progress_towards_rival_effect = {
					CHARACTER = scope:fellow_pervert
					REASON = rival_misunderstood_lewd_humor
					OPINION = 0
				}
			}
		}
	}
}

coronation_banquet.6501 = {
	type = activity_event
	title = coronation_banquet.6501.t
	desc = {
		desc = coronation_banquet.6501.desc.opening
		random_valid = {
			desc = coronation_banquet.6501.joke_a
			desc = coronation_banquet.6501.joke_b
			desc = coronation_banquet.6501.joke_c
		}
		first_valid = {
			triggered_desc = {
				trigger = { NOT = { exists = scope:fellow_pervert } }
				desc = coronation_banquet.6501.desc.ending_solo
			}
			desc = coronation_banquet.6501.desc.ending_duo
		}

	}
	theme = feast_activity
	cooldown = { years = 2 }
	left_portrait = {
		character = scope:innocent_guest
		animation = personality_cynical
	}
	right_portrait = {
		character = scope:fellow_pervert
		animation = disbelief
	}

	trigger = {
		OR = {
			has_trait = rakish
			has_trait = deviant
			has_trait_extroverted_trigger = yes
		}
		scope:activity = {
			any_attending_character = {
				count > 0
				feast_default_participant_trigger = yes
			}
		}
	}

	weight_multiplier = {
		base = 1
		modifier = { #More likely to fire if it can be the duo version
			add = 0.5
			scope:activity = {
				any_attending_character = {
					count > 2
					is_ai = yes
				}
			}
		}
	}

	immediate = {
		scope:activity = {
			random_attending_character = {
				limit = {
					feast_default_participant_trigger = yes
				}
				weight = {
					base = 1
					modifier = {
						add = 2
						is_of_major_interest_to_root_trigger = yes
					}
					modifier = {
						add = 1
						is_of_minor_interest_to_root_trigger = yes
					}
				}
				save_scope_as = innocent_guest
			}
			random_attending_character = {
				limit = {
					feast_default_participant_trigger = yes
					is_ai = yes
					NOT = { this = scope:innocent_guest}
				}
				weight = {
					base = 1
					modifier = {
						add = 1
						is_of_minor_interest_to_root_trigger = yes
					}
				}
				save_scope_as = fellow_pervert
			}
		}
	}

	option = { # Hold back
		name = coronation_banquet.6501.a
		stress_impact = {
			lifestyle_reveler = minor_stress_impact_gain
		}

		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = -0.5
				ai_energy = -0.5
			}
		}
	}

	option = { # Laugh
		name = coronation_banquet.6501.b

		custom_tooltip = coronation_banquet.6501.b.tt
		hidden_effect = {
			random_list = {
				40 = {
					show_chance = no
					send_interface_toast = {
						title = coronation_banquet.6501.b.success
						left_icon = scope:innocent_guest

						progress_towards_friend_effect = {
							REASON = friend_shared_lewd_humor
							CHARACTER = scope:innocent_guest
							OPINION = 0
						}
						coronation_default_6501_additional_person_opinion_effect = yes
					}
				}
				60 = {
					show_chance = no
					modifier = {
						add = -20
						has_trait_extroverted_trigger = yes
					}
					modifier = {
						add = 20
						has_trait_levelheaded_trigger = yes
					}
					send_interface_toast = {
						title = coronation_banquet.6501.b.failure
						left_icon = scope:innocent_guest

						progress_towards_rival_effect = {
							CHARACTER = scope:innocent_guest
							REASON = rival_didnt_get_lewd_humor
							OPINION = 0
						}
						coronation_default_6501_additional_person_opinion_effect = yes
					}
				}
			}
		}

		stress_impact = {
			shy = medium_stress_impact_gain
		}
		ai_chance = {
			base = 50
			ai_value_modifier = {
				ai_boldness = 0.5
				ai_energy = 0.5
			}
		}
	}
}

#################################
# END EVENTS
# by Petter Vilberg
# 9000-9999
#################################

scripted_trigger coronation_end_events_participant_trigger = {
	NOT = { this = scope:host }
	is_alive = yes
	is_imprisoned = no
}